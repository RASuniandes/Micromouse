
micromouse_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800707c  0800707c  0001707c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007240  08007240  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007240  08007240  00017240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007248  08007248  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007248  08007248  00017248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000082c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000089c  2000089c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e48  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec7  00000000  00000000  00036ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  00039db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001348  00000000  00000000  0003b238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002354a  00000000  00000000  0003c580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a343  00000000  00000000  0005faca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d30ff  00000000  00000000  00079e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014cf0c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f04  00000000  00000000  0014cf5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007064 	.word	0x08007064

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007064 	.word	0x08007064

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <Delay_Init+0x38>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10e      	bne.n	80005a2 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <Delay_Init+0x38>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	4a08      	ldr	r2, [pc, #32]	; (80005ac <Delay_Init+0x38>)
 800058a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800058e:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <Delay_Init+0x3c>)
 8000592:	2200      	movs	r2, #0
 8000594:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <Delay_Init+0x3c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <Delay_Init+0x3c>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6013      	str	r3, [r2, #0]
    }
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	e000edf0 	.word	0xe000edf0
 80005b0:	e0001000 	.word	0xe0001000

080005b4 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <delayMicroseconds+0x38>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 168; // Our MCU runs at 168 MHz, so each microsecond lasts 168 clock ticks
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	22a8      	movs	r2, #168	; 0xa8
 80005c6:	fb02 f303 	mul.w	r3, r2, r3
 80005ca:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 80005cc:	bf00      	nop
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <delayMicroseconds+0x38>)
 80005d0:	685a      	ldr	r2, [r3, #4]
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d8f8      	bhi.n	80005ce <delayMicroseconds+0x1a>
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e0001000 	.word	0xe0001000

080005f0 <getRightEncoderCounts>:
#include "encoders.h"

/*
 * Implement this function so it returns the right encoder value
 */
int16_t getRightEncoderCounts() {
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <getRightEncoderCounts+0x14>)
 80005f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f8:	b21b      	sxth	r3, r3
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	40010000 	.word	0x40010000

08000608 <getLeftEncoderCounts>:

/*
 * Implement this function so it returns the left encoder value
 */
int16_t getLeftEncoderCounts() {
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	return (int16_t) TIM8->CNT * -1;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <getLeftEncoderCounts+0x1c>)
 800060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000610:	b29b      	uxth	r3, r3
 8000612:	425b      	negs	r3, r3
 8000614:	b29b      	uxth	r3, r3
 8000616:	b21b      	sxth	r3, r3
}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40010400 	.word	0x40010400

08000628 <readIR>:
 Wait for a small amount of time (at least 20 us) so the photodiode can react
 Then read the correct receiver
 Lastly turn off the emitter
 */
uint16_t readIR(IR ir)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	uint16_t reading;
	switch (ir) {
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b03      	cmp	r3, #3
 8000636:	d85b      	bhi.n	80006f0 <readIR+0xc8>
 8000638:	a201      	add	r2, pc, #4	; (adr r2, 8000640 <readIR+0x18>)
 800063a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063e:	bf00      	nop
 8000640:	08000651 	.word	0x08000651
 8000644:	080006a1 	.word	0x080006a1
 8000648:	080006c9 	.word	0x080006c9
 800064c:	08000679 	.word	0x08000679
	case IR_LEFT:
		HAL_GPIO_WritePin(L_Emitter_GPIO_Port, L_Emitter_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2120      	movs	r1, #32
 8000654:	4829      	ldr	r0, [pc, #164]	; (80006fc <readIR+0xd4>)
 8000656:	f002 fac5 	bl	8002be4 <HAL_GPIO_WritePin>
		delayMicroseconds(25);
 800065a:	2019      	movs	r0, #25
 800065c:	f7ff ffaa 	bl	80005b4 <delayMicroseconds>
		reading = analogRead(ir);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f84e 	bl	8000704 <analogRead>
 8000668:	4603      	mov	r3, r0
 800066a:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(L_Emitter_GPIO_Port, L_Emitter_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2120      	movs	r1, #32
 8000670:	4822      	ldr	r0, [pc, #136]	; (80006fc <readIR+0xd4>)
 8000672:	f002 fab7 	bl	8002be4 <HAL_GPIO_WritePin>
		break;
 8000676:	e03c      	b.n	80006f2 <readIR+0xca>
	case IR_RIGHT:
		HAL_GPIO_WritePin(R_Emitter_GPIO_Port, R_Emitter_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	481f      	ldr	r0, [pc, #124]	; (80006fc <readIR+0xd4>)
 800067e:	f002 fab1 	bl	8002be4 <HAL_GPIO_WritePin>
		delayMicroseconds(25);
 8000682:	2019      	movs	r0, #25
 8000684:	f7ff ff96 	bl	80005b4 <delayMicroseconds>
		reading = analogRead(ir);
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f83a 	bl	8000704 <analogRead>
 8000690:	4603      	mov	r3, r0
 8000692:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(R_Emitter_GPIO_Port, R_Emitter_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	4818      	ldr	r0, [pc, #96]	; (80006fc <readIR+0xd4>)
 800069a:	f002 faa3 	bl	8002be4 <HAL_GPIO_WritePin>
		break;
 800069e:	e028      	b.n	80006f2 <readIR+0xca>
	case IR_FRONT_LEFT:
		HAL_GPIO_WritePin(FL_Emitter_GPIO_Port, FL_Emitter_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2101      	movs	r1, #1
 80006a4:	4816      	ldr	r0, [pc, #88]	; (8000700 <readIR+0xd8>)
 80006a6:	f002 fa9d 	bl	8002be4 <HAL_GPIO_WritePin>
		delayMicroseconds(25);
 80006aa:	2019      	movs	r0, #25
 80006ac:	f7ff ff82 	bl	80005b4 <delayMicroseconds>
		reading = analogRead(ir);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f826 	bl	8000704 <analogRead>
 80006b8:	4603      	mov	r3, r0
 80006ba:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(FL_Emitter_GPIO_Port, FL_Emitter_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2101      	movs	r1, #1
 80006c0:	480f      	ldr	r0, [pc, #60]	; (8000700 <readIR+0xd8>)
 80006c2:	f002 fa8f 	bl	8002be4 <HAL_GPIO_WritePin>
		break;
 80006c6:	e014      	b.n	80006f2 <readIR+0xca>
	case IR_FRONT_RIGHT:
		HAL_GPIO_WritePin(FR_Emitter_GPIO_Port, FR_Emitter_Pin, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	480b      	ldr	r0, [pc, #44]	; (80006fc <readIR+0xd4>)
 80006ce:	f002 fa89 	bl	8002be4 <HAL_GPIO_WritePin>
		delayMicroseconds(25);
 80006d2:	2019      	movs	r0, #25
 80006d4:	f7ff ff6e 	bl	80005b4 <delayMicroseconds>
		reading = analogRead(ir);
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f812 	bl	8000704 <analogRead>
 80006e0:	4603      	mov	r3, r0
 80006e2:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(FR_Emitter_GPIO_Port, FR_Emitter_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <readIR+0xd4>)
 80006ea:	f002 fa7b 	bl	8002be4 <HAL_GPIO_WritePin>
		break;
 80006ee:	e000      	b.n	80006f2 <readIR+0xca>
	default:
		break;
 80006f0:	bf00      	nop
	}
	return reading;
 80006f2:	89fb      	ldrh	r3, [r7, #14]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40020000 	.word	0x40020000
 8000700:	40020400 	.word	0x40020400

08000704 <analogRead>:
/*
 This function reads the specific channel of the ADC corresponding to the correct IR
 You should not have to edit this function
 */
uint16_t analogRead(IR ir)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 800071c:	f000 fbe8 	bl	8000ef0 <Get_HADC1_Ptr>
 8000720:	61f8      	str	r0, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b03      	cmp	r3, #3
 8000726:	d817      	bhi.n	8000758 <analogRead+0x54>
 8000728:	a201      	add	r2, pc, #4	; (adr r2, 8000730 <analogRead+0x2c>)
 800072a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072e:	bf00      	nop
 8000730:	08000741 	.word	0x08000741
 8000734:	08000747 	.word	0x08000747
 8000738:	0800074d 	.word	0x0800074d
 800073c:	08000753 	.word	0x08000753
    {
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_10;
 8000740:	230a      	movs	r3, #10
 8000742:	60fb      	str	r3, [r7, #12]
            break;
 8000744:	e00a      	b.n	800075c <analogRead+0x58>
        case IR_FRONT_LEFT:
            sConfig.Channel = ADC_CHANNEL_11;
 8000746:	230b      	movs	r3, #11
 8000748:	60fb      	str	r3, [r7, #12]
            break;
 800074a:	e007      	b.n	800075c <analogRead+0x58>
        case IR_FRONT_RIGHT:
            sConfig.Channel = ADC_CHANNEL_12;
 800074c:	230c      	movs	r3, #12
 800074e:	60fb      	str	r3, [r7, #12]
            break;
 8000750:	e004      	b.n	800075c <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_13;
 8000752:	230d      	movs	r3, #13
 8000754:	60fb      	str	r3, [r7, #12]
            break;
 8000756:	e001      	b.n	800075c <analogRead+0x58>
        default:
            return 0;
 8000758:	2300      	movs	r3, #0
 800075a:	e032      	b.n	80007c2 <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	69f8      	ldr	r0, [r7, #28]
 800076c:	f001 fc22 	bl	8001fb4 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <analogRead+0x76>
    {
        return 0;
 8000776:	2300      	movs	r3, #0
 8000778:	e023      	b.n	80007c2 <analogRead+0xbe>
    }

    complete = 0;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <analogRead+0xc8>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	4913      	ldr	r1, [pc, #76]	; (80007d0 <analogRead+0xcc>)
 8000784:	69f8      	ldr	r0, [r7, #28]
 8000786:	f001 fa97 	bl	8001cb8 <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 800078a:	e000      	b.n	800078e <analogRead+0x8a>
    {
        continue;
 800078c:	bf00      	nop
    while (complete == 0)
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <analogRead+0xc8>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0fa      	beq.n	800078c <analogRead+0x88>
    }

    uint32_t sum = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 800079e:	e00a      	b.n	80007b6 <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 80007a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <analogRead+0xcc>)
 80007a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007a8:	461a      	mov	r2, r3
 80007aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ac:	4413      	add	r3, r2
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
        ++measurement;
 80007b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007b2:	3301      	adds	r3, #1
 80007b4:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 80007b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007b8:	2b7f      	cmp	r3, #127	; 0x7f
 80007ba:	d9f1      	bls.n	80007a0 <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	09db      	lsrs	r3, r3, #7
 80007c0:	b29b      	uxth	r3, r3
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3728      	adds	r7, #40	; 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000018c 	.word	0x2000018c
 80007d0:	2000008c 	.word	0x2000008c

080007d4 <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f001 fb7b 	bl	8001ed8 <HAL_ADC_Stop_DMA>
    complete = 1;
 80007e2:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000018c 	.word	0x2000018c

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f001 f984 	bl	8001b04 <HAL_Init>

  /* USER CODE BEGIN Init */
  Delay_Init();
 80007fc:	f7ff feba 	bl	8000574 <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f86e 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f000 fadc 	bl	8000dc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000808:	f000 f8d4 	bl	80009b4 <MX_ADC1_Init>
  MX_I2C2_Init();
 800080c:	f000 f924 	bl	8000a58 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000810:	f000 f950 	bl	8000ab4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000814:	f000 f9a6 	bl	8000b64 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000818:	f000 fa1e 	bl	8000c58 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800081c:	f000 fa74 	bl	8000d08 <MX_USART2_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000820:	f000 fa9c 	bl	8000d5c <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */

  //Inicialización I2C

  //MPU6500
  mpu6500_init();
 8000824:	f000 fb74 	bl	8000f10 <mpu6500_init>

  //vl6180x
  vl6180_init();
 8000828:	f000 ff88 	bl	800173c <vl6180_init>


  // Timers PWM - Motores
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //L_Emitter
 800082c:	2100      	movs	r1, #0
 800082e:	4822      	ldr	r0, [pc, #136]	; (80008b8 <main+0xc4>)
 8000830:	f004 f8e4 	bl	80049fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //R_Emitter
 8000834:	2104      	movs	r1, #4
 8000836:	4820      	ldr	r0, [pc, #128]	; (80008b8 <main+0xc4>)
 8000838:	f004 f8e0 	bl	80049fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //FR_Emitter
 800083c:	2108      	movs	r1, #8
 800083e:	481e      	ldr	r0, [pc, #120]	; (80008b8 <main+0xc4>)
 8000840:	f004 f8dc 	bl	80049fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //FL_Emitter
 8000844:	210c      	movs	r1, #12
 8000846:	481c      	ldr	r0, [pc, #112]	; (80008b8 <main+0xc4>)
 8000848:	f004 f8d8 	bl	80049fc <HAL_TIM_PWM_Start>

  // Timers ENCODERS
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800084c:	213c      	movs	r1, #60	; 0x3c
 800084e:	481b      	ldr	r0, [pc, #108]	; (80008bc <main+0xc8>)
 8000850:	f004 fa42 	bl	8004cd8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000854:	213c      	movs	r1, #60	; 0x3c
 8000856:	481a      	ldr	r0, [pc, #104]	; (80008c0 <main+0xcc>)
 8000858:	f004 fa3e 	bl	8004cd8 <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	leftMotor_counts = getLeftEncoderCounts();
 800085c:	f7ff fed4 	bl	8000608 <getLeftEncoderCounts>
 8000860:	4603      	mov	r3, r0
 8000862:	461a      	mov	r2, r3
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <main+0xd0>)
 8000866:	801a      	strh	r2, [r3, #0]
	rightMotor_counts = getRightEncoderCounts();
 8000868:	f7ff fec2 	bl	80005f0 <getRightEncoderCounts>
 800086c:	4603      	mov	r3, r0
 800086e:	461a      	mov	r2, r3
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <main+0xd4>)
 8000872:	801a      	strh	r2, [r3, #0]

	left_IR = readIR(IR_LEFT);
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff fed7 	bl	8000628 <readIR>
 800087a:	4603      	mov	r3, r0
 800087c:	b21a      	sxth	r2, r3
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <main+0xd8>)
 8000880:	801a      	strh	r2, [r3, #0]
	right_IR = readIR(IR_RIGHT);
 8000882:	2003      	movs	r0, #3
 8000884:	f7ff fed0 	bl	8000628 <readIR>
 8000888:	4603      	mov	r3, r0
 800088a:	b21a      	sxth	r2, r3
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <main+0xdc>)
 800088e:	801a      	strh	r2, [r3, #0]
	front_left_IR = readIR(IR_FRONT_LEFT);
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff fec9 	bl	8000628 <readIR>
 8000896:	4603      	mov	r3, r0
 8000898:	b21a      	sxth	r2, r3
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <main+0xe0>)
 800089c:	801a      	strh	r2, [r3, #0]
	front_right_IR = readIR(IR_FRONT_RIGHT);
 800089e:	2002      	movs	r0, #2
 80008a0:	f7ff fec2 	bl	8000628 <readIR>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <main+0xe4>)
 80008aa:	801a      	strh	r2, [r3, #0]

	//Lectura del MPU
	mpu_data = mpu6500_read();
 80008ac:	f000 fbaa 	bl	8001004 <mpu6500_read>
 80008b0:	4603      	mov	r3, r0
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <main+0xe8>)
 80008b4:	6013      	str	r3, [r2, #0]
	leftMotor_counts = getLeftEncoderCounts();
 80008b6:	e7d1      	b.n	800085c <main+0x68>
 80008b8:	20000274 	.word	0x20000274
 80008bc:	2000022c 	.word	0x2000022c
 80008c0:	200002bc 	.word	0x200002bc
 80008c4:	20000854 	.word	0x20000854
 80008c8:	20000856 	.word	0x20000856
 80008cc:	20000858 	.word	0x20000858
 80008d0:	2000085a 	.word	0x2000085a
 80008d4:	2000085c 	.word	0x2000085c
 80008d8:	2000085e 	.word	0x2000085e
 80008dc:	20000860 	.word	0x20000860

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	; 0x50
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	2230      	movs	r2, #48	; 0x30
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f005 fc22 	bl	8006138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <SystemClock_Config+0xcc>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a27      	ldr	r2, [pc, #156]	; (80009ac <SystemClock_Config+0xcc>)
 800090e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <SystemClock_Config+0xcc>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <SystemClock_Config+0xd0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <SystemClock_Config+0xd0>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <SystemClock_Config+0xd0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800093c:	2301      	movs	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000940:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
 8000948:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800094e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000950:	2304      	movs	r3, #4
 8000952:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000954:	23a8      	movs	r3, #168	; 0xa8
 8000956:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000958:	2302      	movs	r3, #2
 800095a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800095c:	2307      	movs	r3, #7
 800095e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f107 0320 	add.w	r3, r7, #32
 8000964:	4618      	mov	r0, r3
 8000966:	f003 fb61 	bl	800402c <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000970:	f000 fac8 	bl	8000f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	230f      	movs	r3, #15
 8000976:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000978:	2302      	movs	r3, #2
 800097a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000980:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000984:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2105      	movs	r1, #5
 8000992:	4618      	mov	r0, r3
 8000994:	f003 fdc2 	bl	800451c <HAL_RCC_ClockConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800099e:	f000 fab1 	bl	8000f04 <Error_Handler>
  }
}
 80009a2:	bf00      	nop
 80009a4:	3750      	adds	r7, #80	; 0x50
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40007000 	.word	0x40007000

080009b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_ADC1_Init+0x98>)
 80009c8:	4a21      	ldr	r2, [pc, #132]	; (8000a50 <MX_ADC1_Init+0x9c>)
 80009ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_ADC1_Init+0x98>)
 80009ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_ADC1_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_ADC1_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_ADC1_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_ADC1_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_ADC1_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_ADC1_Init+0x98>)
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <MX_ADC1_Init+0xa0>)
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_ADC1_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_ADC1_Init+0x98>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_ADC1_Init+0x98>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_ADC1_Init+0x98>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_ADC1_Init+0x98>)
 8000a16:	f001 f90b 	bl	8001c30 <HAL_ADC_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a20:	f000 fa70 	bl	8000f04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a24:	230a      	movs	r3, #10
 8000a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_ADC1_Init+0x98>)
 8000a36:	f001 fabd 	bl	8001fb4 <HAL_ADC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a40:	f000 fa60 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000190 	.word	0x20000190
 8000a50:	40012000 	.word	0x40012000
 8000a54:	0f000001 	.word	0x0f000001

08000a58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a5e:	4a13      	ldr	r2, [pc, #76]	; (8000aac <MX_I2C2_Init+0x54>)
 8000a60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_I2C2_Init+0x58>)
 8000a66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a7a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a96:	f002 f8bf 	bl	8002c18 <HAL_I2C_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000aa0:	f000 fa30 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200001d8 	.word	0x200001d8
 8000aac:	40005800 	.word	0x40005800
 8000ab0:	000186a0 	.word	0x000186a0

08000ab4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	2224      	movs	r2, #36	; 0x24
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f005 fb38 	bl	8006138 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MX_TIM1_Init+0xa8>)
 8000ad2:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <MX_TIM1_Init+0xac>)
 8000ad4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <MX_TIM1_Init+0xa8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <MX_TIM1_Init+0xa8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <MX_TIM1_Init+0xa8>)
 8000ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MX_TIM1_Init+0xa8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_TIM1_Init+0xa8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MX_TIM1_Init+0xa8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000afc:	2301      	movs	r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b04:	2301      	movs	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b14:	2301      	movs	r3, #1
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <MX_TIM1_Init+0xa8>)
 8000b28:	f004 f830 	bl	8004b8c <HAL_TIM_Encoder_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000b32:	f000 f9e7 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	; (8000b5c <MX_TIM1_Init+0xa8>)
 8000b44:	f004 fc8e 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000b4e:	f000 f9d9 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	3730      	adds	r7, #48	; 0x30
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000022c 	.word	0x2000022c
 8000b60:	40010000 	.word	0x40010000

08000b64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6a:	f107 0320 	add.w	r3, r7, #32
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
 8000b82:	615a      	str	r2, [r3, #20]
 8000b84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b86:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <MX_TIM4_Init+0xec>)
 8000b88:	4a32      	ldr	r2, [pc, #200]	; (8000c54 <MX_TIM4_Init+0xf0>)
 8000b8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b8c:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <MX_TIM4_Init+0xec>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <MX_TIM4_Init+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <MX_TIM4_Init+0xec>)
 8000b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <MX_TIM4_Init+0xec>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <MX_TIM4_Init+0xec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bac:	4828      	ldr	r0, [pc, #160]	; (8000c50 <MX_TIM4_Init+0xec>)
 8000bae:	f003 fed5 	bl	800495c <HAL_TIM_PWM_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000bb8:	f000 f9a4 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4821      	ldr	r0, [pc, #132]	; (8000c50 <MX_TIM4_Init+0xec>)
 8000bcc:	f004 fc4a 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000bd6:	f000 f995 	bl	8000f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bda:	2360      	movs	r3, #96	; 0x60
 8000bdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4817      	ldr	r0, [pc, #92]	; (8000c50 <MX_TIM4_Init+0xec>)
 8000bf2:	f004 f8ff 	bl	8004df4 <HAL_TIM_PWM_ConfigChannel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000bfc:	f000 f982 	bl	8000f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2204      	movs	r2, #4
 8000c04:	4619      	mov	r1, r3
 8000c06:	4812      	ldr	r0, [pc, #72]	; (8000c50 <MX_TIM4_Init+0xec>)
 8000c08:	f004 f8f4 	bl	8004df4 <HAL_TIM_PWM_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000c12:	f000 f977 	bl	8000f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2208      	movs	r2, #8
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <MX_TIM4_Init+0xec>)
 8000c1e:	f004 f8e9 	bl	8004df4 <HAL_TIM_PWM_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000c28:	f000 f96c 	bl	8000f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	220c      	movs	r2, #12
 8000c30:	4619      	mov	r1, r3
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <MX_TIM4_Init+0xec>)
 8000c34:	f004 f8de 	bl	8004df4 <HAL_TIM_PWM_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000c3e:	f000 f961 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <MX_TIM4_Init+0xec>)
 8000c44:	f000 fbc2 	bl	80013cc <HAL_TIM_MspPostInit>

}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000274 	.word	0x20000274
 8000c54:	40000800 	.word	0x40000800

08000c58 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2224      	movs	r2, #36	; 0x24
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f005 fa66 	bl	8006138 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_TIM8_Init+0xa8>)
 8000c76:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <MX_TIM8_Init+0xac>)
 8000c78:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_TIM8_Init+0xa8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <MX_TIM8_Init+0xa8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_TIM8_Init+0xa8>)
 8000c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_TIM8_Init+0xa8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_TIM8_Init+0xa8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_TIM8_Init+0xa8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480d      	ldr	r0, [pc, #52]	; (8000d00 <MX_TIM8_Init+0xa8>)
 8000ccc:	f003 ff5e 	bl	8004b8c <HAL_TIM_Encoder_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8000cd6:	f000 f915 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4806      	ldr	r0, [pc, #24]	; (8000d00 <MX_TIM8_Init+0xa8>)
 8000ce8:	f004 fbbc 	bl	8005464 <HAL_TIMEx_MasterConfigSynchronization>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8000cf2:	f000 f907 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	3730      	adds	r7, #48	; 0x30
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200002bc 	.word	0x200002bc
 8000d04:	40010400 	.word	0x40010400

08000d08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <MX_USART2_UART_Init+0x50>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_USART2_UART_Init+0x4c>)
 8000d40:	f004 fc0c 	bl	800555c <HAL_UART_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d4a:	f000 f8db 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000304 	.word	0x20000304
 8000d58:	40004400 	.word	0x40004400

08000d5c <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d62:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000d64:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d68:	2206      	movs	r2, #6
 8000d6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d6e:	2202      	movs	r2, #2
 8000d70:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000da4:	f003 f825 	bl	8003df2 <HAL_PCD_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000dae:	f000 f8a9 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000348 	.word	0x20000348
 8000dbc:	40040000 	.word	0x40040000

08000dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b41      	ldr	r3, [pc, #260]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a40      	ldr	r2, [pc, #256]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b3e      	ldr	r3, [pc, #248]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a39      	ldr	r2, [pc, #228]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a32      	ldr	r2, [pc, #200]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a2b      	ldr	r2, [pc, #172]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, L_Emitter_Pin|R_Emitter_Pin|FR_Emitter_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	21e0      	movs	r1, #224	; 0xe0
 8000e4a:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <MX_GPIO_Init+0x124>)
 8000e4c:	f001 feca 	bl	8002be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL_Emitter_GPIO_Port, FL_Emitter_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	4824      	ldr	r0, [pc, #144]	; (8000ee8 <MX_GPIO_Init+0x128>)
 8000e56:	f001 fec5 	bl	8002be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e60:	4822      	ldr	r0, [pc, #136]	; (8000eec <MX_GPIO_Init+0x12c>)
 8000e62:	f001 febf 	bl	8002be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOTON_Pin BOTON2_Pin */
  GPIO_InitStruct.Pin = BOTON_Pin|BOTON2_Pin;
 8000e66:	f640 0302 	movw	r3, #2050	; 0x802
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <MX_GPIO_Init+0x124>)
 8000e7c:	f001 fd16 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pins : L_Emitter_Pin R_Emitter_Pin FR_Emitter_Pin */
  GPIO_InitStruct.Pin = L_Emitter_Pin|R_Emitter_Pin|FR_Emitter_Pin;
 8000e80:	23e0      	movs	r3, #224	; 0xe0
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <MX_GPIO_Init+0x124>)
 8000e98:	f001 fd08 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : FL_Emitter_Pin */
  GPIO_InitStruct.Pin = FL_Emitter_Pin;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FL_Emitter_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <MX_GPIO_Init+0x128>)
 8000eb4:	f001 fcfa 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4806      	ldr	r0, [pc, #24]	; (8000eec <MX_GPIO_Init+0x12c>)
 8000ed2:	f001 fceb 	bl	80028ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	; 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40020800 	.word	0x40020800

08000ef0 <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */
ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
    return &hadc1;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <Get_HADC1_Ptr+0x10>)
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	20000190 	.word	0x20000190

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <Error_Handler+0x8>
	...

08000f10 <mpu6500_init>:
extern I2C_HandleTypeDef hi2c2;

uint8_t data_buffer[14];
int16_t sensor_data[7];

void mpu6500_init(){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af04      	add	r7, sp, #16
	  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c2, (DEVICE_ADDRESS << 1) + 0, 1, 100);
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	2201      	movs	r2, #1
 8000f1a:	21d0      	movs	r1, #208	; 0xd0
 8000f1c:	4830      	ldr	r0, [pc, #192]	; (8000fe0 <mpu6500_init+0xd0>)
 8000f1e:	f002 fadf 	bl	80034e0 <HAL_I2C_IsDeviceReady>
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
	  if(ret == HAL_OK){
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d103      	bne.n	8000f34 <mpu6500_init+0x24>
		  printf("MPU6500 connected!");
 8000f2c:	482d      	ldr	r0, [pc, #180]	; (8000fe4 <mpu6500_init+0xd4>)
 8000f2e:	f005 f90b 	bl	8006148 <iprintf>
 8000f32:	e002      	b.n	8000f3a <mpu6500_init+0x2a>
	  }
	  else{
		  printf("MPU6500 not connected, check connections.");
 8000f34:	482c      	ldr	r0, [pc, #176]	; (8000fe8 <mpu6500_init+0xd8>)
 8000f36:	f005 f907 	bl	8006148 <iprintf>
	  }

	  uint8_t temp_reg = FS_GYRO_500;
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	71bb      	strb	r3, [r7, #6]
	  ret = HAL_I2C_Mem_Write(&hi2c2, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_GYRO, 1, &temp_reg, 1, 100); //+/- 500deg/s
 8000f3e:	2364      	movs	r3, #100	; 0x64
 8000f40:	9302      	str	r3, [sp, #8]
 8000f42:	2301      	movs	r3, #1
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	1dbb      	adds	r3, r7, #6
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	221b      	movs	r2, #27
 8000f4e:	21d0      	movs	r1, #208	; 0xd0
 8000f50:	4823      	ldr	r0, [pc, #140]	; (8000fe0 <mpu6500_init+0xd0>)
 8000f52:	f001 ffa5 	bl	8002ea0 <HAL_I2C_Mem_Write>
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	  if(ret == HAL_OK){
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d103      	bne.n	8000f68 <mpu6500_init+0x58>
		  printf("Setting Gyro sensibility.");
 8000f60:	4822      	ldr	r0, [pc, #136]	; (8000fec <mpu6500_init+0xdc>)
 8000f62:	f005 f8f1 	bl	8006148 <iprintf>
 8000f66:	e002      	b.n	8000f6e <mpu6500_init+0x5e>
	  }
	  else{
		  printf("Unable to write to register 27. Gyro sens failed.");
 8000f68:	4821      	ldr	r0, [pc, #132]	; (8000ff0 <mpu6500_init+0xe0>)
 8000f6a:	f005 f8ed 	bl	8006148 <iprintf>
	  }

	  temp_reg = FS_ACC_4G;
 8000f6e:	2308      	movs	r3, #8
 8000f70:	71bb      	strb	r3, [r7, #6]
	  ret = HAL_I2C_Mem_Write(&hi2c2, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_ACC, 1, &temp_reg, 1, 100); //+/- 500deg/s
 8000f72:	2364      	movs	r3, #100	; 0x64
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	2301      	movs	r3, #1
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	1dbb      	adds	r3, r7, #6
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	221c      	movs	r2, #28
 8000f82:	21d0      	movs	r1, #208	; 0xd0
 8000f84:	4816      	ldr	r0, [pc, #88]	; (8000fe0 <mpu6500_init+0xd0>)
 8000f86:	f001 ff8b 	bl	8002ea0 <HAL_I2C_Mem_Write>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	  if(ret == HAL_OK){
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d103      	bne.n	8000f9c <mpu6500_init+0x8c>
		  printf("Setting Accel sensibility.");
 8000f94:	4817      	ldr	r0, [pc, #92]	; (8000ff4 <mpu6500_init+0xe4>)
 8000f96:	f005 f8d7 	bl	8006148 <iprintf>
 8000f9a:	e002      	b.n	8000fa2 <mpu6500_init+0x92>
	  }
	  else{
		  printf("Unable to write to register 28. Accel sens failed.");
 8000f9c:	4816      	ldr	r0, [pc, #88]	; (8000ff8 <mpu6500_init+0xe8>)
 8000f9e:	f005 f8d3 	bl	8006148 <iprintf>
	  }

	  temp_reg = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71bb      	strb	r3, [r7, #6]
	  ret = HAL_I2C_Mem_Write(&hi2c2, (DEVICE_ADDRESS << 1) + 0, REG_USR_CTRL, 1, &temp_reg, 1, 100); //+/- 500deg/s
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2301      	movs	r3, #1
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	1dbb      	adds	r3, r7, #6
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	226b      	movs	r2, #107	; 0x6b
 8000fb6:	21d0      	movs	r1, #208	; 0xd0
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <mpu6500_init+0xd0>)
 8000fba:	f001 ff71 	bl	8002ea0 <HAL_I2C_Mem_Write>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	  if(ret == HAL_OK){
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d103      	bne.n	8000fd0 <mpu6500_init+0xc0>
		  printf("Exiting sleep mode.");
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <mpu6500_init+0xec>)
 8000fca:	f005 f8bd 	bl	8006148 <iprintf>
	  }
	  else{
		  printf("Unable to exit from sleep mode.");
	  }
}
 8000fce:	e002      	b.n	8000fd6 <mpu6500_init+0xc6>
		  printf("Unable to exit from sleep mode.");
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <mpu6500_init+0xf0>)
 8000fd2:	f005 f8b9 	bl	8006148 <iprintf>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200001d8 	.word	0x200001d8
 8000fe4:	0800707c 	.word	0x0800707c
 8000fe8:	08007090 	.word	0x08007090
 8000fec:	080070bc 	.word	0x080070bc
 8000ff0:	080070d8 	.word	0x080070d8
 8000ff4:	0800710c 	.word	0x0800710c
 8000ff8:	08007128 	.word	0x08007128
 8000ffc:	0800715c 	.word	0x0800715c
 8001000:	08007170 	.word	0x08007170

08001004 <mpu6500_read>:

/* Función que realiza la lectura   */
int16_t * mpu6500_read(){
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af04      	add	r7, sp, #16

	HAL_I2C_Mem_Read(&hi2c2, (DEVICE_ADDRESS << 1) + 1, REG_DATA, 1, data_buffer, 14, 100);
 800100a:	2364      	movs	r3, #100	; 0x64
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	230e      	movs	r3, #14
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <mpu6500_read+0xdc>)
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	223b      	movs	r2, #59	; 0x3b
 800101a:	21d1      	movs	r1, #209	; 0xd1
 800101c:	4831      	ldr	r0, [pc, #196]	; (80010e4 <mpu6500_read+0xe0>)
 800101e:	f002 f839 	bl	8003094 <HAL_I2C_Mem_Read>

	sensor_data[0] = ((int16_t)data_buffer[0] << 8) + data_buffer[1]; //x_acc [0]
 8001022:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <mpu6500_read+0xdc>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b29b      	uxth	r3, r3
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <mpu6500_read+0xdc>)
 800102e:	785b      	ldrb	r3, [r3, #1]
 8001030:	b29b      	uxth	r3, r3
 8001032:	4413      	add	r3, r2
 8001034:	b29b      	uxth	r3, r3
 8001036:	b21a      	sxth	r2, r3
 8001038:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <mpu6500_read+0xe4>)
 800103a:	801a      	strh	r2, [r3, #0]
	sensor_data[1] = ((int16_t)data_buffer[2] << 8) + data_buffer[3]; //y_acc [1]
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <mpu6500_read+0xdc>)
 800103e:	789b      	ldrb	r3, [r3, #2]
 8001040:	b29b      	uxth	r3, r3
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <mpu6500_read+0xdc>)
 8001048:	78db      	ldrb	r3, [r3, #3]
 800104a:	b29b      	uxth	r3, r3
 800104c:	4413      	add	r3, r2
 800104e:	b29b      	uxth	r3, r3
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <mpu6500_read+0xe4>)
 8001054:	805a      	strh	r2, [r3, #2]
	sensor_data[2] = ((int16_t)data_buffer[4] << 8) + data_buffer[5]; //z_acc [2]
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <mpu6500_read+0xdc>)
 8001058:	791b      	ldrb	r3, [r3, #4]
 800105a:	b29b      	uxth	r3, r3
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b29a      	uxth	r2, r3
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <mpu6500_read+0xdc>)
 8001062:	795b      	ldrb	r3, [r3, #5]
 8001064:	b29b      	uxth	r3, r3
 8001066:	4413      	add	r3, r2
 8001068:	b29b      	uxth	r3, r3
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <mpu6500_read+0xe4>)
 800106e:	809a      	strh	r2, [r3, #4]

	sensor_data[3] = ((int16_t)data_buffer[6] << 8) + data_buffer[7]; //temp [3]
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <mpu6500_read+0xdc>)
 8001072:	799b      	ldrb	r3, [r3, #6]
 8001074:	b29b      	uxth	r3, r3
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <mpu6500_read+0xdc>)
 800107c:	79db      	ldrb	r3, [r3, #7]
 800107e:	b29b      	uxth	r3, r3
 8001080:	4413      	add	r3, r2
 8001082:	b29b      	uxth	r3, r3
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <mpu6500_read+0xe4>)
 8001088:	80da      	strh	r2, [r3, #6]

	sensor_data[4] = ((int16_t)data_buffer[8] << 8) + data_buffer[9]; //x_gyro [4]
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <mpu6500_read+0xdc>)
 800108c:	7a1b      	ldrb	r3, [r3, #8]
 800108e:	b29b      	uxth	r3, r3
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b29a      	uxth	r2, r3
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <mpu6500_read+0xdc>)
 8001096:	7a5b      	ldrb	r3, [r3, #9]
 8001098:	b29b      	uxth	r3, r3
 800109a:	4413      	add	r3, r2
 800109c:	b29b      	uxth	r3, r3
 800109e:	b21a      	sxth	r2, r3
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <mpu6500_read+0xe4>)
 80010a2:	811a      	strh	r2, [r3, #8]
	sensor_data[5] = ((int16_t)data_buffer[10] << 8) + data_buffer[11]; //y_gyro [5]
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <mpu6500_read+0xdc>)
 80010a6:	7a9b      	ldrb	r3, [r3, #10]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <mpu6500_read+0xdc>)
 80010b0:	7adb      	ldrb	r3, [r3, #11]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <mpu6500_read+0xe4>)
 80010bc:	815a      	strh	r2, [r3, #10]
	sensor_data[6] = ((int16_t)data_buffer[12] << 8) + data_buffer[13]; //z_gyro [6]
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <mpu6500_read+0xdc>)
 80010c0:	7b1b      	ldrb	r3, [r3, #12]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <mpu6500_read+0xdc>)
 80010ca:	7b5b      	ldrb	r3, [r3, #13]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4413      	add	r3, r2
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <mpu6500_read+0xe4>)
 80010d6:	819a      	strh	r2, [r3, #12]

	return sensor_data;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <mpu6500_read+0xe4>)
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000864 	.word	0x20000864
 80010e4:	200001d8 	.word	0x200001d8
 80010e8:	20000874 	.word	0x20000874

080010ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_MspInit+0x4c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <HAL_MspInit+0x4c>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_MspInit+0x4c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_MspInit+0x4c>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a24      	ldr	r2, [pc, #144]	; (80011ec <HAL_ADC_MspInit+0xb0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d141      	bne.n	80011e2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <HAL_ADC_MspInit+0xb4>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <HAL_ADC_MspInit+0xb4>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_ADC_MspInit+0xb4>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <HAL_ADC_MspInit+0xb4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <HAL_ADC_MspInit+0xb4>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_ADC_MspInit+0xb4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_ADC_MspInit+0xb4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <HAL_ADC_MspInit+0xb4>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_ADC_MspInit+0xb4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = FR_RECEIVER_Pin|FL_RECEIVER_Pin|R_RECEIVER_Pin|F_RECEIVER_Pin;
 80011b2:	230f      	movs	r3, #15
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b6:	2303      	movs	r3, #3
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	480b      	ldr	r0, [pc, #44]	; (80011f4 <HAL_ADC_MspInit+0xb8>)
 80011c6:	f001 fb71 	bl	80028ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BAT_LVL_Pin;
 80011ca:	2302      	movs	r3, #2
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ce:	2303      	movs	r3, #3
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BAT_LVL_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4806      	ldr	r0, [pc, #24]	; (80011f8 <HAL_ADC_MspInit+0xbc>)
 80011de:	f001 fb65 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40012000 	.word	0x40012000
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020400 	.word	0x40020400

080011fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a19      	ldr	r2, [pc, #100]	; (8001280 <HAL_I2C_MspInit+0x84>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d12c      	bne.n	8001278 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_I2C_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_I2C_MspInit+0x88>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_I2C_MspInit+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800123a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001240:	2312      	movs	r3, #18
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800124c:	2304      	movs	r3, #4
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	480c      	ldr	r0, [pc, #48]	; (8001288 <HAL_I2C_MspInit+0x8c>)
 8001258:	f001 fb28 	bl	80028ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_I2C_MspInit+0x88>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <HAL_I2C_MspInit+0x88>)
 8001266:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_I2C_MspInit+0x88>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40005800 	.word	0x40005800
 8001284:	40023800 	.word	0x40023800
 8001288:	40020400 	.word	0x40020400

0800128c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a32      	ldr	r2, [pc, #200]	; (8001374 <HAL_TIM_Encoder_MspInit+0xe8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d12d      	bne.n	800130a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	4b31      	ldr	r3, [pc, #196]	; (8001378 <HAL_TIM_Encoder_MspInit+0xec>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a30      	ldr	r2, [pc, #192]	; (8001378 <HAL_TIM_Encoder_MspInit+0xec>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <HAL_TIM_Encoder_MspInit+0xec>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <HAL_TIM_Encoder_MspInit+0xec>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a29      	ldr	r2, [pc, #164]	; (8001378 <HAL_TIM_Encoder_MspInit+0xec>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b27      	ldr	r3, [pc, #156]	; (8001378 <HAL_TIM_Encoder_MspInit+0xec>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MR_OUT_A_Pin|MR_OUT_B_Pin;
 80012e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	481e      	ldr	r0, [pc, #120]	; (800137c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001304:	f001 fad2 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001308:	e030      	b.n	800136c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM8)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d12b      	bne.n	800136c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_TIM_Encoder_MspInit+0xec>)
 800131a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131c:	4a16      	ldr	r2, [pc, #88]	; (8001378 <HAL_TIM_Encoder_MspInit+0xec>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	6453      	str	r3, [r2, #68]	; 0x44
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_TIM_Encoder_MspInit+0xec>)
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_TIM_Encoder_MspInit+0xec>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <HAL_TIM_Encoder_MspInit+0xec>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6313      	str	r3, [r2, #48]	; 0x30
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_TIM_Encoder_MspInit+0xec>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ML_OUT_A_Pin|ML_OUT_B_Pin;
 800134c:	23c0      	movs	r3, #192	; 0xc0
 800134e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800135c:	2303      	movs	r3, #3
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4807      	ldr	r0, [pc, #28]	; (8001384 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001368:	f001 faa0 	bl	80028ac <HAL_GPIO_Init>
}
 800136c:	bf00      	nop
 800136e:	3730      	adds	r7, #48	; 0x30
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40010000 	.word	0x40010000
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000
 8001380:	40010400 	.word	0x40010400
 8001384:	40020800 	.word	0x40020800

08001388 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d10d      	bne.n	80013b6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_TIM_PWM_MspInit+0x40>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <HAL_TIM_PWM_MspInit+0x40>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <HAL_TIM_PWM_MspInit+0x40>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40000800 	.word	0x40000800
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a12      	ldr	r2, [pc, #72]	; (8001434 <HAL_TIM_MspPostInit+0x68>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d11e      	bne.n	800142c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_TIM_MspPostInit+0x6c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <HAL_TIM_MspPostInit+0x6c>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_TIM_MspPostInit+0x6c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = ML1_PWM_Pin|ML2_PWM_Pin|MR1_PWM_Pin|MR2_PWM_Pin;
 800140a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800140e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800141c:	2302      	movs	r3, #2
 800141e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_TIM_MspPostInit+0x70>)
 8001428:	f001 fa40 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40000800 	.word	0x40000800
 8001438:	40023800 	.word	0x40023800
 800143c:	40020400 	.word	0x40020400

08001440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <HAL_UART_MspInit+0x84>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12b      	bne.n	80014ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_UART_MspInit+0x88>)
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_UART_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = A_Pin|GPIO_PIN_3;
 800149a:	230c      	movs	r3, #12
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014aa:	2307      	movs	r3, #7
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_UART_MspInit+0x8c>)
 80014b6:	f001 f9f9 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40004400 	.word	0x40004400
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000

080014d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_HS)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a19      	ldr	r2, [pc, #100]	; (8001554 <HAL_PCD_MspInit+0x84>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d12c      	bne.n	800154c <HAL_PCD_MspInit+0x7c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_PCD_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a17      	ldr	r2, [pc, #92]	; (8001558 <HAL_PCD_MspInit+0x88>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_PCD_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800150e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001520:	230c      	movs	r3, #12
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	480c      	ldr	r0, [pc, #48]	; (800155c <HAL_PCD_MspInit+0x8c>)
 800152c:	f001 f9be 	bl	80028ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_PCD_MspInit+0x88>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_PCD_MspInit+0x88>)
 800153a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800153e:	6313      	str	r3, [r2, #48]	; 0x30
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_PCD_MspInit+0x88>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40040000 	.word	0x40040000
 8001558:	40023800 	.word	0x40023800
 800155c:	40020400 	.word	0x40020400

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 fafc 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 80015b0:	f000 f8b8 	bl	8001724 <SysTickFunction>
  /* USER CODE END SysTick_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e00a      	b.n	80015e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ca:	f3af 8000 	nop.w
 80015ce:	4601      	mov	r1, r0
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	60ba      	str	r2, [r7, #8]
 80015d6:	b2ca      	uxtb	r2, r1
 80015d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbf0      	blt.n	80015ca <_read+0x12>
  }

  return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e009      	b.n	8001618 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf1      	blt.n	8001604 <_write+0x12>
  }
  return len;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_close>:

int _close(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001652:	605a      	str	r2, [r3, #4]
  return 0;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_isatty>:

int _isatty(int file)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <_sbrk+0x5c>)
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <_sbrk+0x60>)
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <_sbrk+0x64>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <_sbrk+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d207      	bcs.n	80016d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c4:	f004 fd0e 	bl	80060e4 <__errno>
 80016c8:	4603      	mov	r3, r0
 80016ca:	220c      	movs	r2, #12
 80016cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e009      	b.n	80016e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <_sbrk+0x64>)
 80016e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20020000 	.word	0x20020000
 80016f4:	00000400 	.word	0x00000400
 80016f8:	20000884 	.word	0x20000884
 80016fc:	200008a0 	.word	0x200008a0

08001700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <SystemInit+0x20>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <SystemInit+0x20>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <SysTickFunction>:
#include "main.h"
//#include "pid.h"
#include "encoders.h"
#include <stdio.h>

void SysTickFunction(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 60000 || getLeftEncoderCounts() > 60000
 8001728:	f7fe ff62 	bl	80005f0 <getRightEncoderCounts>
 800172c:	f7fe ff6c 	bl	8000608 <getLeftEncoderCounts>
			|| getRightEncoderCounts() < -60000 || getLeftEncoderCounts() < -60000) {
 8001730:	f7fe ff5e 	bl	80005f0 <getRightEncoderCounts>
 8001734:	f7fe ff68 	bl	8000608 <getLeftEncoderCounts>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
		resetEncoders();
		TIM1->CNT = (int16_t) difference;
	}
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <vl6180_init>:
#include "main.h"
#include "stdio.h"

extern I2C_HandleTypeDef hi2c2;

void vl6180_init(){
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af04      	add	r7, sp, #16
	uint8_t param = 0x01;
 8001742:	2301      	movs	r3, #1
 8001744:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x207, 1, &param, 1, 100);
 8001746:	2364      	movs	r3, #100	; 0x64
 8001748:	9302      	str	r3, [sp, #8]
 800174a:	2301      	movs	r3, #1
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	1dfb      	adds	r3, r7, #7
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2301      	movs	r3, #1
 8001754:	f240 2207 	movw	r2, #519	; 0x207
 8001758:	2129      	movs	r1, #41	; 0x29
 800175a:	48c6      	ldr	r0, [pc, #792]	; (8001a74 <vl6180_init+0x338>)
 800175c:	f001 fba0 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x01;
 8001760:	2301      	movs	r3, #1
 8001762:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x208, 1, &param, 1, 100);
 8001764:	2364      	movs	r3, #100	; 0x64
 8001766:	9302      	str	r3, [sp, #8]
 8001768:	2301      	movs	r3, #1
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	1dfb      	adds	r3, r7, #7
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2301      	movs	r3, #1
 8001772:	f44f 7202 	mov.w	r2, #520	; 0x208
 8001776:	2129      	movs	r1, #41	; 0x29
 8001778:	48be      	ldr	r0, [pc, #760]	; (8001a74 <vl6180_init+0x338>)
 800177a:	f001 fb91 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x00;
 800177e:	2300      	movs	r3, #0
 8001780:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x096, 1, &param, 1, 100);
 8001782:	2364      	movs	r3, #100	; 0x64
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	2301      	movs	r3, #1
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2301      	movs	r3, #1
 8001790:	2296      	movs	r2, #150	; 0x96
 8001792:	2129      	movs	r1, #41	; 0x29
 8001794:	48b7      	ldr	r0, [pc, #732]	; (8001a74 <vl6180_init+0x338>)
 8001796:	f001 fb83 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0xFD;
 800179a:	23fd      	movs	r3, #253	; 0xfd
 800179c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x097, 1, &param, 1, 100);
 800179e:	2364      	movs	r3, #100	; 0x64
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	2301      	movs	r3, #1
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2301      	movs	r3, #1
 80017ac:	2297      	movs	r2, #151	; 0x97
 80017ae:	2129      	movs	r1, #41	; 0x29
 80017b0:	48b0      	ldr	r0, [pc, #704]	; (8001a74 <vl6180_init+0x338>)
 80017b2:	f001 fb75 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x00;
 80017b6:	2300      	movs	r3, #0
 80017b8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0E3, 1, &param, 1, 100);
 80017ba:	2364      	movs	r3, #100	; 0x64
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	2301      	movs	r3, #1
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2301      	movs	r3, #1
 80017c8:	22e3      	movs	r2, #227	; 0xe3
 80017ca:	2129      	movs	r1, #41	; 0x29
 80017cc:	48a9      	ldr	r0, [pc, #676]	; (8001a74 <vl6180_init+0x338>)
 80017ce:	f001 fb67 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x04;
 80017d2:	2304      	movs	r3, #4
 80017d4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0E4, 1, &param, 1, 100);
 80017d6:	2364      	movs	r3, #100	; 0x64
 80017d8:	9302      	str	r3, [sp, #8]
 80017da:	2301      	movs	r3, #1
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	1dfb      	adds	r3, r7, #7
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2301      	movs	r3, #1
 80017e4:	22e4      	movs	r2, #228	; 0xe4
 80017e6:	2129      	movs	r1, #41	; 0x29
 80017e8:	48a2      	ldr	r0, [pc, #648]	; (8001a74 <vl6180_init+0x338>)
 80017ea:	f001 fb59 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x02;
 80017ee:	2302      	movs	r3, #2
 80017f0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0E5, 1, &param, 1, 100);
 80017f2:	2364      	movs	r3, #100	; 0x64
 80017f4:	9302      	str	r3, [sp, #8]
 80017f6:	2301      	movs	r3, #1
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2301      	movs	r3, #1
 8001800:	22e5      	movs	r2, #229	; 0xe5
 8001802:	2129      	movs	r1, #41	; 0x29
 8001804:	489b      	ldr	r0, [pc, #620]	; (8001a74 <vl6180_init+0x338>)
 8001806:	f001 fb4b 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x01;
 800180a:	2301      	movs	r3, #1
 800180c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0E6, 1, &param, 1, 100);
 800180e:	2364      	movs	r3, #100	; 0x64
 8001810:	9302      	str	r3, [sp, #8]
 8001812:	2301      	movs	r3, #1
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2301      	movs	r3, #1
 800181c:	22e6      	movs	r2, #230	; 0xe6
 800181e:	2129      	movs	r1, #41	; 0x29
 8001820:	4894      	ldr	r0, [pc, #592]	; (8001a74 <vl6180_init+0x338>)
 8001822:	f001 fb3d 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x03;
 8001826:	2303      	movs	r3, #3
 8001828:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0E7, 1, &param, 1, 100);
 800182a:	2364      	movs	r3, #100	; 0x64
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	2301      	movs	r3, #1
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2301      	movs	r3, #1
 8001838:	22e7      	movs	r2, #231	; 0xe7
 800183a:	2129      	movs	r1, #41	; 0x29
 800183c:	488d      	ldr	r0, [pc, #564]	; (8001a74 <vl6180_init+0x338>)
 800183e:	f001 fb2f 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x02;
 8001842:	2302      	movs	r3, #2
 8001844:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0F5, 1, &param, 1, 100);
 8001846:	2364      	movs	r3, #100	; 0x64
 8001848:	9302      	str	r3, [sp, #8]
 800184a:	2301      	movs	r3, #1
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2301      	movs	r3, #1
 8001854:	22f5      	movs	r2, #245	; 0xf5
 8001856:	2129      	movs	r1, #41	; 0x29
 8001858:	4886      	ldr	r0, [pc, #536]	; (8001a74 <vl6180_init+0x338>)
 800185a:	f001 fb21 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x05;
 800185e:	2305      	movs	r3, #5
 8001860:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0D9, 1, &param, 1, 100);
 8001862:	2364      	movs	r3, #100	; 0x64
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	2301      	movs	r3, #1
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2301      	movs	r3, #1
 8001870:	22d9      	movs	r2, #217	; 0xd9
 8001872:	2129      	movs	r1, #41	; 0x29
 8001874:	487f      	ldr	r0, [pc, #508]	; (8001a74 <vl6180_init+0x338>)
 8001876:	f001 fb13 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0xCE;
 800187a:	23ce      	movs	r3, #206	; 0xce
 800187c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0DB, 1, &param, 1, 100);
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2301      	movs	r3, #1
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2301      	movs	r3, #1
 800188c:	22db      	movs	r2, #219	; 0xdb
 800188e:	2129      	movs	r1, #41	; 0x29
 8001890:	4878      	ldr	r0, [pc, #480]	; (8001a74 <vl6180_init+0x338>)
 8001892:	f001 fb05 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x03;
 8001896:	2303      	movs	r3, #3
 8001898:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0DC, 1, &param, 1, 100);
 800189a:	2364      	movs	r3, #100	; 0x64
 800189c:	9302      	str	r3, [sp, #8]
 800189e:	2301      	movs	r3, #1
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	1dfb      	adds	r3, r7, #7
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2301      	movs	r3, #1
 80018a8:	22dc      	movs	r2, #220	; 0xdc
 80018aa:	2129      	movs	r1, #41	; 0x29
 80018ac:	4871      	ldr	r0, [pc, #452]	; (8001a74 <vl6180_init+0x338>)
 80018ae:	f001 faf7 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0xF8;
 80018b2:	23f8      	movs	r3, #248	; 0xf8
 80018b4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0DD, 1, &param, 1, 100);
 80018b6:	2364      	movs	r3, #100	; 0x64
 80018b8:	9302      	str	r3, [sp, #8]
 80018ba:	2301      	movs	r3, #1
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	22dd      	movs	r2, #221	; 0xdd
 80018c6:	2129      	movs	r1, #41	; 0x29
 80018c8:	486a      	ldr	r0, [pc, #424]	; (8001a74 <vl6180_init+0x338>)
 80018ca:	f001 fae9 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x00;
 80018ce:	2300      	movs	r3, #0
 80018d0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x09F, 1, &param, 1, 100);
 80018d2:	2364      	movs	r3, #100	; 0x64
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	2301      	movs	r3, #1
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	1dfb      	adds	r3, r7, #7
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	229f      	movs	r2, #159	; 0x9f
 80018e2:	2129      	movs	r1, #41	; 0x29
 80018e4:	4863      	ldr	r0, [pc, #396]	; (8001a74 <vl6180_init+0x338>)
 80018e6:	f001 fadb 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x3C;
 80018ea:	233c      	movs	r3, #60	; 0x3c
 80018ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0A3, 1, &param, 1, 100);
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	9302      	str	r3, [sp, #8]
 80018f2:	2301      	movs	r3, #1
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2301      	movs	r3, #1
 80018fc:	22a3      	movs	r2, #163	; 0xa3
 80018fe:	2129      	movs	r1, #41	; 0x29
 8001900:	485c      	ldr	r0, [pc, #368]	; (8001a74 <vl6180_init+0x338>)
 8001902:	f001 facd 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x00;
 8001906:	2300      	movs	r3, #0
 8001908:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0B7, 1, &param, 1, 100);
 800190a:	2364      	movs	r3, #100	; 0x64
 800190c:	9302      	str	r3, [sp, #8]
 800190e:	2301      	movs	r3, #1
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2301      	movs	r3, #1
 8001918:	22b7      	movs	r2, #183	; 0xb7
 800191a:	2129      	movs	r1, #41	; 0x29
 800191c:	4855      	ldr	r0, [pc, #340]	; (8001a74 <vl6180_init+0x338>)
 800191e:	f001 fabf 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x3C;
 8001922:	233c      	movs	r3, #60	; 0x3c
 8001924:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0BB, 1, &param, 1, 100);
 8001926:	2364      	movs	r3, #100	; 0x64
 8001928:	9302      	str	r3, [sp, #8]
 800192a:	2301      	movs	r3, #1
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2301      	movs	r3, #1
 8001934:	22bb      	movs	r2, #187	; 0xbb
 8001936:	2129      	movs	r1, #41	; 0x29
 8001938:	484e      	ldr	r0, [pc, #312]	; (8001a74 <vl6180_init+0x338>)
 800193a:	f001 fab1 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x09;
 800193e:	2309      	movs	r3, #9
 8001940:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0B2, 1, &param, 1, 100);
 8001942:	2364      	movs	r3, #100	; 0x64
 8001944:	9302      	str	r3, [sp, #8]
 8001946:	2301      	movs	r3, #1
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2301      	movs	r3, #1
 8001950:	22b2      	movs	r2, #178	; 0xb2
 8001952:	2129      	movs	r1, #41	; 0x29
 8001954:	4847      	ldr	r0, [pc, #284]	; (8001a74 <vl6180_init+0x338>)
 8001956:	f001 faa3 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x09;
 800195a:	2309      	movs	r3, #9
 800195c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0CA, 1, &param, 1, 100);
 800195e:	2364      	movs	r3, #100	; 0x64
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	2301      	movs	r3, #1
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2301      	movs	r3, #1
 800196c:	22ca      	movs	r2, #202	; 0xca
 800196e:	2129      	movs	r1, #41	; 0x29
 8001970:	4840      	ldr	r0, [pc, #256]	; (8001a74 <vl6180_init+0x338>)
 8001972:	f001 fa95 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x01;
 8001976:	2301      	movs	r3, #1
 8001978:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x198, 1, &param, 1, 100);
 800197a:	2364      	movs	r3, #100	; 0x64
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	2301      	movs	r3, #1
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2301      	movs	r3, #1
 8001988:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800198c:	2129      	movs	r1, #41	; 0x29
 800198e:	4839      	ldr	r0, [pc, #228]	; (8001a74 <vl6180_init+0x338>)
 8001990:	f001 fa86 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x17;
 8001994:	2317      	movs	r3, #23
 8001996:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x1B0, 1, &param, 1, 100);
 8001998:	2364      	movs	r3, #100	; 0x64
 800199a:	9302      	str	r3, [sp, #8]
 800199c:	2301      	movs	r3, #1
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2301      	movs	r3, #1
 80019a6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 80019aa:	2129      	movs	r1, #41	; 0x29
 80019ac:	4831      	ldr	r0, [pc, #196]	; (8001a74 <vl6180_init+0x338>)
 80019ae:	f001 fa77 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x00;
 80019b2:	2300      	movs	r3, #0
 80019b4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x1AD, 1, &param, 1, 100);
 80019b6:	2364      	movs	r3, #100	; 0x64
 80019b8:	9302      	str	r3, [sp, #8]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2301      	movs	r3, #1
 80019c4:	f240 12ad 	movw	r2, #429	; 0x1ad
 80019c8:	2129      	movs	r1, #41	; 0x29
 80019ca:	482a      	ldr	r0, [pc, #168]	; (8001a74 <vl6180_init+0x338>)
 80019cc:	f001 fa68 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x05;
 80019d0:	2305      	movs	r3, #5
 80019d2:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x0FF, 1, &param, 1, 100);
 80019d4:	2364      	movs	r3, #100	; 0x64
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	2301      	movs	r3, #1
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	1dfb      	adds	r3, r7, #7
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2301      	movs	r3, #1
 80019e2:	22ff      	movs	r2, #255	; 0xff
 80019e4:	2129      	movs	r1, #41	; 0x29
 80019e6:	4823      	ldr	r0, [pc, #140]	; (8001a74 <vl6180_init+0x338>)
 80019e8:	f001 fa5a 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x05;
 80019ec:	2305      	movs	r3, #5
 80019ee:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x100, 1, &param, 1, 100);
 80019f0:	2364      	movs	r3, #100	; 0x64
 80019f2:	9302      	str	r3, [sp, #8]
 80019f4:	2301      	movs	r3, #1
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	1dfb      	adds	r3, r7, #7
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2301      	movs	r3, #1
 80019fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a02:	2129      	movs	r1, #41	; 0x29
 8001a04:	481b      	ldr	r0, [pc, #108]	; (8001a74 <vl6180_init+0x338>)
 8001a06:	f001 fa4b 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x05;
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x199, 1, &param, 1, 100);
 8001a0e:	2364      	movs	r3, #100	; 0x64
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	2301      	movs	r3, #1
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f240 1299 	movw	r2, #409	; 0x199
 8001a20:	2129      	movs	r1, #41	; 0x29
 8001a22:	4814      	ldr	r0, [pc, #80]	; (8001a74 <vl6180_init+0x338>)
 8001a24:	f001 fa3c 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x1B;
 8001a28:	231b      	movs	r3, #27
 8001a2a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x1A6, 1, &param, 1, 100);
 8001a2c:	2364      	movs	r3, #100	; 0x64
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	2301      	movs	r3, #1
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	1dfb      	adds	r3, r7, #7
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8001a3e:	2129      	movs	r1, #41	; 0x29
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <vl6180_init+0x338>)
 8001a42:	f001 fa2d 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x3E;
 8001a46:	233e      	movs	r3, #62	; 0x3e
 8001a48:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x1AC, 1, &param, 1, 100);
 8001a4a:	2364      	movs	r3, #100	; 0x64
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8001a5c:	2129      	movs	r1, #41	; 0x29
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <vl6180_init+0x338>)
 8001a60:	f001 fa1e 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x1F;
 8001a64:	231f      	movs	r3, #31
 8001a66:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x1A7, 1, &param, 1, 100);
 8001a68:	2364      	movs	r3, #100	; 0x64
 8001a6a:	9302      	str	r3, [sp, #8]
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	1dfb      	adds	r3, r7, #7
 8001a72:	e001      	b.n	8001a78 <vl6180_init+0x33c>
 8001a74:	200001d8 	.word	0x200001d8
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f240 12a7 	movw	r2, #423	; 0x1a7
 8001a80:	2129      	movs	r1, #41	; 0x29
 8001a82:	480a      	ldr	r0, [pc, #40]	; (8001aac <vl6180_init+0x370>)
 8001a84:	f001 fa0c 	bl	8002ea0 <HAL_I2C_Mem_Write>
	param = 0x00;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, VL_ADDRESS, 0x030, 1, &param, 1, 100);
 8001a8c:	2364      	movs	r3, #100	; 0x64
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	2301      	movs	r3, #1
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	1dfb      	adds	r3, r7, #7
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2301      	movs	r3, #1
 8001a9a:	2230      	movs	r2, #48	; 0x30
 8001a9c:	2129      	movs	r1, #41	; 0x29
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <vl6180_init+0x370>)
 8001aa0:	f001 f9fe 	bl	8002ea0 <HAL_I2C_Mem_Write>


}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200001d8 	.word	0x200001d8

08001ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab4:	480d      	ldr	r0, [pc, #52]	; (8001aec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ab6:	490e      	ldr	r1, [pc, #56]	; (8001af0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001abc:	e002      	b.n	8001ac4 <LoopCopyDataInit>

08001abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac2:	3304      	adds	r3, #4

08001ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac8:	d3f9      	bcc.n	8001abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aca:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001acc:	4c0b      	ldr	r4, [pc, #44]	; (8001afc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad0:	e001      	b.n	8001ad6 <LoopFillZerobss>

08001ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad4:	3204      	adds	r2, #4

08001ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad8:	d3fb      	bcc.n	8001ad2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ada:	f7ff fe11 	bl	8001700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ade:	f004 fb07 	bl	80060f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae2:	f7fe fe87 	bl	80007f4 <main>
  bx  lr    
 8001ae6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001af4:	08007250 	.word	0x08007250
  ldr r2, =_sbss
 8001af8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001afc:	2000089c 	.word	0x2000089c

08001b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC_IRQHandler>
	...

08001b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <HAL_Init+0x40>)
 8001b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <HAL_Init+0x40>)
 8001b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <HAL_Init+0x40>)
 8001b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 fd93 	bl	8002658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b32:	200f      	movs	r0, #15
 8001b34:	f000 f808 	bl	8001b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b38:	f7ff fad8 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_InitTick+0x54>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_InitTick+0x58>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fd9d 	bl	80026a6 <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00e      	b.n	8001b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d80a      	bhi.n	8001b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f000 fd73 	bl	800266e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <HAL_InitTick+0x5c>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_IncTick+0x20>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_IncTick+0x24>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_IncTick+0x24>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	20000888 	.word	0x20000888

08001bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <HAL_GetTick+0x14>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000888 	.word	0x20000888

08001be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff ffee 	bl	8001bd0 <HAL_GetTick>
 8001bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d005      	beq.n	8001c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_Delay+0x44>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c0e:	bf00      	nop
 8001c10:	f7ff ffde 	bl	8001bd0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d8f7      	bhi.n	8001c10 <HAL_Delay+0x28>
  {
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008

08001c30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e033      	b.n	8001cae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fa74 	bl	800113c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d118      	bne.n	8001ca0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c76:	f023 0302 	bic.w	r3, r3, #2
 8001c7a:	f043 0202 	orr.w	r2, r3, #2
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fab8 	bl	80021f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f023 0303 	bic.w	r3, r3, #3
 8001c96:	f043 0201 	orr.w	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c9e:	e001      	b.n	8001ca4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_Start_DMA+0x1e>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e0e9      	b.n	8001eaa <HAL_ADC_Start_DMA+0x1f2>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d018      	beq.n	8001d1e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cfc:	4b6d      	ldr	r3, [pc, #436]	; (8001eb4 <HAL_ADC_Start_DMA+0x1fc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6d      	ldr	r2, [pc, #436]	; (8001eb8 <HAL_ADC_Start_DMA+0x200>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	0c9a      	lsrs	r2, r3, #18
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d10:	e002      	b.n	8001d18 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f9      	bne.n	8001d12 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2c:	d107      	bne.n	8001d3e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	f040 80a1 	bne.w	8001e90 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d56:	f023 0301 	bic.w	r3, r3, #1
 8001d5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d8c:	d106      	bne.n	8001d9c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f023 0206 	bic.w	r2, r3, #6
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
 8001d9a:	e002      	b.n	8001da2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001daa:	4b44      	ldr	r3, [pc, #272]	; (8001ebc <HAL_ADC_Start_DMA+0x204>)
 8001dac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db2:	4a43      	ldr	r2, [pc, #268]	; (8001ec0 <HAL_ADC_Start_DMA+0x208>)
 8001db4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dba:	4a42      	ldr	r2, [pc, #264]	; (8001ec4 <HAL_ADC_Start_DMA+0x20c>)
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc2:	4a41      	ldr	r2, [pc, #260]	; (8001ec8 <HAL_ADC_Start_DMA+0x210>)
 8001dc4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001dce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001dde:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	334c      	adds	r3, #76	; 0x4c
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f000 fc5d 	bl	80026be <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d12a      	bne.n	8001e66 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a2d      	ldr	r2, [pc, #180]	; (8001ecc <HAL_ADC_Start_DMA+0x214>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d015      	beq.n	8001e46 <HAL_ADC_Start_DMA+0x18e>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2c      	ldr	r2, [pc, #176]	; (8001ed0 <HAL_ADC_Start_DMA+0x218>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_Start_DMA+0x178>
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <HAL_ADC_Start_DMA+0x204>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00a      	beq.n	8001e46 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a27      	ldr	r2, [pc, #156]	; (8001ed4 <HAL_ADC_Start_DMA+0x21c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d136      	bne.n	8001ea8 <HAL_ADC_Start_DMA+0x1f0>
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_ADC_Start_DMA+0x204>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d130      	bne.n	8001ea8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d129      	bne.n	8001ea8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	e020      	b.n	8001ea8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <HAL_ADC_Start_DMA+0x214>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_ADC_Start_DMA+0x1f0>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d114      	bne.n	8001ea8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f043 0210 	orr.w	r2, r3, #16
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	431bde83 	.word	0x431bde83
 8001ebc:	40012300 	.word	0x40012300
 8001ec0:	080023f1 	.word	0x080023f1
 8001ec4:	080024ab 	.word	0x080024ab
 8001ec8:	080024c7 	.word	0x080024c7
 8001ecc:	40012000 	.word	0x40012000
 8001ed0:	40012100 	.word	0x40012100
 8001ed4:	40012200 	.word	0x40012200

08001ed8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_Stop_DMA+0x1a>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e048      	b.n	8001f84 <HAL_ADC_Stop_DMA+0xac>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d130      	bne.n	8001f7a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f26:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d10f      	bne.n	8001f56 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fc17 	bl	800276e <HAL_DMA_Abort>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001f64:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	f043 0201 	orr.w	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x1c>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e105      	b.n	80021dc <HAL_ADC_ConfigChannel+0x228>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b09      	cmp	r3, #9
 8001fde:	d925      	bls.n	800202c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68d9      	ldr	r1, [r3, #12]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b1e      	subs	r3, #30
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43da      	mvns	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	400a      	ands	r2, r1
 8002004:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68d9      	ldr	r1, [r3, #12]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	4618      	mov	r0, r3
 8002018:	4603      	mov	r3, r0
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4403      	add	r3, r0
 800201e:	3b1e      	subs	r3, #30
 8002020:	409a      	lsls	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	e022      	b.n	8002072 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6919      	ldr	r1, [r3, #16]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	2207      	movs	r2, #7
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	400a      	ands	r2, r1
 800204e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6919      	ldr	r1, [r3, #16]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	4618      	mov	r0, r3
 8002062:	4603      	mov	r3, r0
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4403      	add	r3, r0
 8002068:	409a      	lsls	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b06      	cmp	r3, #6
 8002078:	d824      	bhi.n	80020c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	3b05      	subs	r3, #5
 800208c:	221f      	movs	r2, #31
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	400a      	ands	r2, r1
 800209a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	4618      	mov	r0, r3
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b05      	subs	r3, #5
 80020b6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	635a      	str	r2, [r3, #52]	; 0x34
 80020c2:	e04c      	b.n	800215e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	d824      	bhi.n	8002116 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	3b23      	subs	r3, #35	; 0x23
 80020de:	221f      	movs	r2, #31
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43da      	mvns	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	400a      	ands	r2, r1
 80020ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	3b23      	subs	r3, #35	; 0x23
 8002108:	fa00 f203 	lsl.w	r2, r0, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
 8002114:	e023      	b.n	800215e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3b41      	subs	r3, #65	; 0x41
 8002128:	221f      	movs	r2, #31
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	400a      	ands	r2, r1
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4618      	mov	r0, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	3b41      	subs	r3, #65	; 0x41
 8002152:	fa00 f203 	lsl.w	r2, r0, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800215e:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <HAL_ADC_ConfigChannel+0x234>)
 8002160:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a21      	ldr	r2, [pc, #132]	; (80021ec <HAL_ADC_ConfigChannel+0x238>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d109      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x1cc>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b12      	cmp	r3, #18
 8002172:	d105      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <HAL_ADC_ConfigChannel+0x238>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d123      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x21e>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b10      	cmp	r3, #16
 8002190:	d003      	beq.n	800219a <HAL_ADC_ConfigChannel+0x1e6>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b11      	cmp	r3, #17
 8002198:	d11b      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b10      	cmp	r3, #16
 80021ac:	d111      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_ADC_ConfigChannel+0x23c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_ADC_ConfigChannel+0x240>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	0c9a      	lsrs	r2, r3, #18
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021c4:	e002      	b.n	80021cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f9      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40012300 	.word	0x40012300
 80021ec:	40012000 	.word	0x40012000
 80021f0:	20000000 	.word	0x20000000
 80021f4:	431bde83 	.word	0x431bde83

080021f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002200:	4b79      	ldr	r3, [pc, #484]	; (80023e8 <ADC_Init+0x1f0>)
 8002202:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	431a      	orrs	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800222c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6859      	ldr	r1, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	021a      	lsls	r2, r3, #8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002250:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002272:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6899      	ldr	r1, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	4a58      	ldr	r2, [pc, #352]	; (80023ec <ADC_Init+0x1f4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d022      	beq.n	80022d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800229e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6899      	ldr	r1, [r3, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6899      	ldr	r1, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	e00f      	b.n	80022f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0202 	bic.w	r2, r2, #2
 8002304:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6899      	ldr	r1, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7e1b      	ldrb	r3, [r3, #24]
 8002310:	005a      	lsls	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01b      	beq.n	800235c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002332:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002342:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	3b01      	subs	r3, #1
 8002350:	035a      	lsls	r2, r3, #13
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	e007      	b.n	800236c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	3b01      	subs	r3, #1
 8002388:	051a      	lsls	r2, r3, #20
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6899      	ldr	r1, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ae:	025a      	lsls	r2, r3, #9
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6899      	ldr	r1, [r3, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	029a      	lsls	r2, r3, #10
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	609a      	str	r2, [r3, #8]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40012300 	.word	0x40012300
 80023ec:	0f000001 	.word	0x0f000001

080023f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002406:	2b00      	cmp	r3, #0
 8002408:	d13c      	bne.n	8002484 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d12b      	bne.n	800247c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002428:	2b00      	cmp	r3, #0
 800242a:	d127      	bne.n	800247c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002444:	2b00      	cmp	r3, #0
 8002446:	d119      	bne.n	800247c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0220 	bic.w	r2, r2, #32
 8002456:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d105      	bne.n	800247c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f043 0201 	orr.w	r2, r3, #1
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f7fe f9a9 	bl	80007d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002482:	e00e      	b.n	80024a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f7ff fd85 	bl	8001fa0 <HAL_ADC_ErrorCallback>
}
 8002496:	e004      	b.n	80024a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	4798      	blx	r3
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7ff fd67 	bl	8001f8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2240      	movs	r2, #64	; 0x40
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f043 0204 	orr.w	r2, r3, #4
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f7ff fd5a 	bl	8001fa0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <__NVIC_SetPriorityGrouping+0x44>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002510:	4013      	ands	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800251c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002526:	4a04      	ldr	r2, [pc, #16]	; (8002538 <__NVIC_SetPriorityGrouping+0x44>)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	60d3      	str	r3, [r2, #12]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <__NVIC_GetPriorityGrouping+0x18>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	f003 0307 	and.w	r3, r3, #7
}
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	6039      	str	r1, [r7, #0]
 8002562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	2b00      	cmp	r3, #0
 800256a:	db0a      	blt.n	8002582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	490c      	ldr	r1, [pc, #48]	; (80025a4 <__NVIC_SetPriority+0x4c>)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	0112      	lsls	r2, r2, #4
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	440b      	add	r3, r1
 800257c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002580:	e00a      	b.n	8002598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4908      	ldr	r1, [pc, #32]	; (80025a8 <__NVIC_SetPriority+0x50>)
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	3b04      	subs	r3, #4
 8002590:	0112      	lsls	r2, r2, #4
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	440b      	add	r3, r1
 8002596:	761a      	strb	r2, [r3, #24]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000e100 	.word	0xe000e100
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	; 0x24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f1c3 0307 	rsb	r3, r3, #7
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	bf28      	it	cs
 80025ca:	2304      	movcs	r3, #4
 80025cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d902      	bls.n	80025dc <NVIC_EncodePriority+0x30>
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3b03      	subs	r3, #3
 80025da:	e000      	b.n	80025de <NVIC_EncodePriority+0x32>
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43da      	mvns	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	401a      	ands	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f4:	f04f 31ff 	mov.w	r1, #4294967295
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	43d9      	mvns	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	4313      	orrs	r3, r2
         );
}
 8002606:	4618      	mov	r0, r3
 8002608:	3724      	adds	r7, #36	; 0x24
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002624:	d301      	bcc.n	800262a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002626:	2301      	movs	r3, #1
 8002628:	e00f      	b.n	800264a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262a:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <SysTick_Config+0x40>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002632:	210f      	movs	r1, #15
 8002634:	f04f 30ff 	mov.w	r0, #4294967295
 8002638:	f7ff ff8e 	bl	8002558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <SysTick_Config+0x40>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002642:	4b04      	ldr	r3, [pc, #16]	; (8002654 <SysTick_Config+0x40>)
 8002644:	2207      	movs	r2, #7
 8002646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	e000e010 	.word	0xe000e010

08002658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff47 	bl	80024f4 <__NVIC_SetPriorityGrouping>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002680:	f7ff ff5c 	bl	800253c <__NVIC_GetPriorityGrouping>
 8002684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	6978      	ldr	r0, [r7, #20]
 800268c:	f7ff ff8e 	bl	80025ac <NVIC_EncodePriority>
 8002690:	4602      	mov	r2, r0
 8002692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff5d 	bl	8002558 <__NVIC_SetPriority>
}
 800269e:	bf00      	nop
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffb0 	bl	8002614 <SysTick_Config>
 80026b4:	4603      	mov	r3, r0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_DMA_Start_IT+0x26>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e040      	b.n	8002766 <HAL_DMA_Start_IT+0xa8>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d12f      	bne.n	8002758 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f89e 	bl	800284e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	223f      	movs	r2, #63	; 0x3f
 8002718:	409a      	lsls	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0216 	orr.w	r2, r2, #22
 800272c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0208 	orr.w	r2, r2, #8
 8002744:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e005      	b.n	8002764 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002760:	2302      	movs	r3, #2
 8002762:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002764:	7dfb      	ldrb	r3, [r7, #23]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800277c:	f7ff fa28 	bl	8001bd0 <HAL_GetTick>
 8002780:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d008      	beq.n	80027a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e052      	b.n	8002846 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0216 	bic.w	r2, r2, #22
 80027ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d103      	bne.n	80027d0 <HAL_DMA_Abort+0x62>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0208 	bic.w	r2, r2, #8
 80027de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f0:	e013      	b.n	800281a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027f2:	f7ff f9ed 	bl	8001bd0 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	d90c      	bls.n	800281a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2203      	movs	r2, #3
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e015      	b.n	8002846 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e4      	bne.n	80027f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	223f      	movs	r2, #63	; 0x3f
 800282e:	409a      	lsls	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800286a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d108      	bne.n	800288e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800288c:	e007      	b.n	800289e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	60da      	str	r2, [r3, #12]
}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e16b      	b.n	8002ba0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c8:	2201      	movs	r2, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	f040 815a 	bne.w	8002b9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d005      	beq.n	80028fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d130      	bne.n	8002960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	2203      	movs	r2, #3
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002934:	2201      	movs	r2, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 0201 	and.w	r2, r3, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b03      	cmp	r3, #3
 800296a:	d017      	beq.n	800299c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d123      	bne.n	80029f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	08da      	lsrs	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3208      	adds	r2, #8
 80029b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	220f      	movs	r2, #15
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	08da      	lsrs	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3208      	adds	r2, #8
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0203 	and.w	r2, r3, #3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80b4 	beq.w	8002b9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b60      	ldr	r3, [pc, #384]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	4a5f      	ldr	r2, [pc, #380]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a40:	6453      	str	r3, [r2, #68]	; 0x44
 8002a42:	4b5d      	ldr	r3, [pc, #372]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a4e:	4a5b      	ldr	r2, [pc, #364]	; (8002bbc <HAL_GPIO_Init+0x310>)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	220f      	movs	r2, #15
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_GPIO_Init+0x314>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02b      	beq.n	8002ad2 <HAL_GPIO_Init+0x226>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a51      	ldr	r2, [pc, #324]	; (8002bc4 <HAL_GPIO_Init+0x318>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d025      	beq.n	8002ace <HAL_GPIO_Init+0x222>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a50      	ldr	r2, [pc, #320]	; (8002bc8 <HAL_GPIO_Init+0x31c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01f      	beq.n	8002aca <HAL_GPIO_Init+0x21e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4f      	ldr	r2, [pc, #316]	; (8002bcc <HAL_GPIO_Init+0x320>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d019      	beq.n	8002ac6 <HAL_GPIO_Init+0x21a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4e      	ldr	r2, [pc, #312]	; (8002bd0 <HAL_GPIO_Init+0x324>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_GPIO_Init+0x216>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4d      	ldr	r2, [pc, #308]	; (8002bd4 <HAL_GPIO_Init+0x328>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00d      	beq.n	8002abe <HAL_GPIO_Init+0x212>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4c      	ldr	r2, [pc, #304]	; (8002bd8 <HAL_GPIO_Init+0x32c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <HAL_GPIO_Init+0x20e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4b      	ldr	r2, [pc, #300]	; (8002bdc <HAL_GPIO_Init+0x330>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_GPIO_Init+0x20a>
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	e00e      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	e00c      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002aba:	2306      	movs	r3, #6
 8002abc:	e00a      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002abe:	2305      	movs	r3, #5
 8002ac0:	e008      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e004      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e002      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	f002 0203 	and.w	r2, r2, #3
 8002ada:	0092      	lsls	r2, r2, #2
 8002adc:	4093      	lsls	r3, r2
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ae4:	4935      	ldr	r1, [pc, #212]	; (8002bbc <HAL_GPIO_Init+0x310>)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3302      	adds	r3, #2
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002af2:	4b3b      	ldr	r3, [pc, #236]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b16:	4a32      	ldr	r2, [pc, #200]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b1c:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b40:	4a27      	ldr	r2, [pc, #156]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b6a:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b94:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b0f      	cmp	r3, #15
 8002ba4:	f67f ae90 	bls.w	80028c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3724      	adds	r7, #36	; 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40013800 	.word	0x40013800
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	40020400 	.word	0x40020400
 8002bc8:	40020800 	.word	0x40020800
 8002bcc:	40020c00 	.word	0x40020c00
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40021400 	.word	0x40021400
 8002bd8:	40021800 	.word	0x40021800
 8002bdc:	40021c00 	.word	0x40021c00
 8002be0:	40013c00 	.word	0x40013c00

08002be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf4:	787b      	ldrb	r3, [r7, #1]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c00:	e003      	b.n	8002c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c02:	887b      	ldrh	r3, [r7, #2]
 8002c04:	041a      	lsls	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	619a      	str	r2, [r3, #24]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e12b      	b.n	8002e82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fe fadc 	bl	80011fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2224      	movs	r2, #36	; 0x24
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0201 	bic.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f001 fe46 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 8002c80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4a81      	ldr	r2, [pc, #516]	; (8002e8c <HAL_I2C_Init+0x274>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d807      	bhi.n	8002c9c <HAL_I2C_Init+0x84>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4a80      	ldr	r2, [pc, #512]	; (8002e90 <HAL_I2C_Init+0x278>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	bf94      	ite	ls
 8002c94:	2301      	movls	r3, #1
 8002c96:	2300      	movhi	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e006      	b.n	8002caa <HAL_I2C_Init+0x92>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a7d      	ldr	r2, [pc, #500]	; (8002e94 <HAL_I2C_Init+0x27c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	bf94      	ite	ls
 8002ca4:	2301      	movls	r3, #1
 8002ca6:	2300      	movhi	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0e7      	b.n	8002e82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a78      	ldr	r2, [pc, #480]	; (8002e98 <HAL_I2C_Init+0x280>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	0c9b      	lsrs	r3, r3, #18
 8002cbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a6a      	ldr	r2, [pc, #424]	; (8002e8c <HAL_I2C_Init+0x274>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d802      	bhi.n	8002cec <HAL_I2C_Init+0xd4>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	e009      	b.n	8002d00 <HAL_I2C_Init+0xe8>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	4a69      	ldr	r2, [pc, #420]	; (8002e9c <HAL_I2C_Init+0x284>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	3301      	adds	r3, #1
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	495c      	ldr	r1, [pc, #368]	; (8002e8c <HAL_I2C_Init+0x274>)
 8002d1c:	428b      	cmp	r3, r1
 8002d1e:	d819      	bhi.n	8002d54 <HAL_I2C_Init+0x13c>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e59      	subs	r1, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2e:	1c59      	adds	r1, r3, #1
 8002d30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d34:	400b      	ands	r3, r1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_I2C_Init+0x138>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1e59      	subs	r1, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4e:	e051      	b.n	8002df4 <HAL_I2C_Init+0x1dc>
 8002d50:	2304      	movs	r3, #4
 8002d52:	e04f      	b.n	8002df4 <HAL_I2C_Init+0x1dc>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d111      	bne.n	8002d80 <HAL_I2C_Init+0x168>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	440b      	add	r3, r1
 8002d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	e012      	b.n	8002da6 <HAL_I2C_Init+0x18e>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1e58      	subs	r0, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6859      	ldr	r1, [r3, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	0099      	lsls	r1, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Init+0x196>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e022      	b.n	8002df4 <HAL_I2C_Init+0x1dc>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10e      	bne.n	8002dd4 <HAL_I2C_Init+0x1bc>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1e58      	subs	r0, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6859      	ldr	r1, [r3, #4]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	440b      	add	r3, r1
 8002dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd2:	e00f      	b.n	8002df4 <HAL_I2C_Init+0x1dc>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1e58      	subs	r0, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	0099      	lsls	r1, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dea:	3301      	adds	r3, #1
 8002dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	6809      	ldr	r1, [r1, #0]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6911      	ldr	r1, [r2, #16]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68d2      	ldr	r2, [r2, #12]
 8002e2e:	4311      	orrs	r1, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	430b      	orrs	r3, r1
 8002e36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	000186a0 	.word	0x000186a0
 8002e90:	001e847f 	.word	0x001e847f
 8002e94:	003d08ff 	.word	0x003d08ff
 8002e98:	431bde83 	.word	0x431bde83
 8002e9c:	10624dd3 	.word	0x10624dd3

08002ea0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	4611      	mov	r1, r2
 8002eac:	461a      	mov	r2, r3
 8002eae:	4603      	mov	r3, r0
 8002eb0:	817b      	strh	r3, [r7, #10]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	813b      	strh	r3, [r7, #8]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eba:	f7fe fe89 	bl	8001bd0 <HAL_GetTick>
 8002ebe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	f040 80d9 	bne.w	8003080 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	2319      	movs	r3, #25
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	496d      	ldr	r1, [pc, #436]	; (800308c <HAL_I2C_Mem_Write+0x1ec>)
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 fdad 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e0cc      	b.n	8003082 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_I2C_Mem_Write+0x56>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e0c5      	b.n	8003082 <HAL_I2C_Mem_Write+0x1e2>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d007      	beq.n	8002f1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2221      	movs	r2, #33	; 0x21
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2240      	movs	r2, #64	; 0x40
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a3a      	ldr	r2, [r7, #32]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4a4d      	ldr	r2, [pc, #308]	; (8003090 <HAL_I2C_Mem_Write+0x1f0>)
 8002f5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f5e:	88f8      	ldrh	r0, [r7, #6]
 8002f60:	893a      	ldrh	r2, [r7, #8]
 8002f62:	8979      	ldrh	r1, [r7, #10]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fbe4 	bl	800373c <I2C_RequestMemoryWrite>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d052      	beq.n	8003020 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e081      	b.n	8003082 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fe2e 	bl	8003be4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d107      	bne.n	8002fa6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e06b      	b.n	8003082 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d11b      	bne.n	8003020 <HAL_I2C_Mem_Write+0x180>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d017      	beq.n	8003020 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1aa      	bne.n	8002f7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fe1a 	bl	8003c66 <I2C_WaitOnBTFFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00d      	beq.n	8003054 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	2b04      	cmp	r3, #4
 800303e:	d107      	bne.n	8003050 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e016      	b.n	8003082 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	00100002 	.word	0x00100002
 8003090:	ffff0000 	.word	0xffff0000

08003094 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08c      	sub	sp, #48	; 0x30
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	4608      	mov	r0, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	461a      	mov	r2, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	817b      	strh	r3, [r7, #10]
 80030a6:	460b      	mov	r3, r1
 80030a8:	813b      	strh	r3, [r7, #8]
 80030aa:	4613      	mov	r3, r2
 80030ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ae:	f7fe fd8f 	bl	8001bd0 <HAL_GetTick>
 80030b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b20      	cmp	r3, #32
 80030be:	f040 8208 	bne.w	80034d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	2319      	movs	r3, #25
 80030c8:	2201      	movs	r2, #1
 80030ca:	497b      	ldr	r1, [pc, #492]	; (80032b8 <HAL_I2C_Mem_Read+0x224>)
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 fcb3 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
 80030da:	e1fb      	b.n	80034d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_I2C_Mem_Read+0x56>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e1f4      	b.n	80034d4 <HAL_I2C_Mem_Read+0x440>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d007      	beq.n	8003110 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800311e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2222      	movs	r2, #34	; 0x22
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2240      	movs	r2, #64	; 0x40
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800313a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003140:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4a5b      	ldr	r2, [pc, #364]	; (80032bc <HAL_I2C_Mem_Read+0x228>)
 8003150:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003152:	88f8      	ldrh	r0, [r7, #6]
 8003154:	893a      	ldrh	r2, [r7, #8]
 8003156:	8979      	ldrh	r1, [r7, #10]
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	4603      	mov	r3, r0
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fb80 	bl	8003868 <I2C_RequestMemoryRead>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e1b0      	b.n	80034d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	2b00      	cmp	r3, #0
 8003178:	d113      	bne.n	80031a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	623b      	str	r3, [r7, #32]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	623b      	str	r3, [r7, #32]
 800318e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e184      	b.n	80034ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d11b      	bne.n	80031e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e164      	b.n	80034ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d11b      	bne.n	8003222 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003208:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	e144      	b.n	80034ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003238:	e138      	b.n	80034ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	2b03      	cmp	r3, #3
 8003240:	f200 80f1 	bhi.w	8003426 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	2b01      	cmp	r3, #1
 800324a:	d123      	bne.n	8003294 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800324c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fd49 	bl	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e139      	b.n	80034d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003292:	e10b      	b.n	80034ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	2b02      	cmp	r3, #2
 800329a:	d14e      	bne.n	800333a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	2200      	movs	r2, #0
 80032a4:	4906      	ldr	r1, [pc, #24]	; (80032c0 <HAL_I2C_Mem_Read+0x22c>)
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fbc6 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e10e      	b.n	80034d4 <HAL_I2C_Mem_Read+0x440>
 80032b6:	bf00      	nop
 80032b8:	00100002 	.word	0x00100002
 80032bc:	ffff0000 	.word	0xffff0000
 80032c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691a      	ldr	r2, [r3, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003338:	e0b8      	b.n	80034ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003340:	2200      	movs	r2, #0
 8003342:	4966      	ldr	r1, [pc, #408]	; (80034dc <HAL_I2C_Mem_Read+0x448>)
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 fb77 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e0bf      	b.n	80034d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	2200      	movs	r2, #0
 800339e:	494f      	ldr	r1, [pc, #316]	; (80034dc <HAL_I2C_Mem_Read+0x448>)
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fb49 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e091      	b.n	80034d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003424:	e042      	b.n	80034ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003428:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 fc5c 	bl	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e04c      	b.n	80034d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b04      	cmp	r3, #4
 8003478:	d118      	bne.n	80034ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f47f aec2 	bne.w	800323a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	e000      	b.n	80034d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
  }
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3728      	adds	r7, #40	; 0x28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	00010004 	.word	0x00010004

080034e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	460b      	mov	r3, r1
 80034ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80034f0:	f7fe fb6e 	bl	8001bd0 <HAL_GetTick>
 80034f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b20      	cmp	r3, #32
 8003504:	f040 8111 	bne.w	800372a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	2319      	movs	r3, #25
 800350e:	2201      	movs	r2, #1
 8003510:	4988      	ldr	r1, [pc, #544]	; (8003734 <HAL_I2C_IsDeviceReady+0x254>)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fa90 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800351e:	2302      	movs	r3, #2
 8003520:	e104      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_I2C_IsDeviceReady+0x50>
 800352c:	2302      	movs	r3, #2
 800352e:	e0fd      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d007      	beq.n	8003556 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003564:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2224      	movs	r2, #36	; 0x24
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a70      	ldr	r2, [pc, #448]	; (8003738 <HAL_I2C_IsDeviceReady+0x258>)
 8003578:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003588:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2200      	movs	r2, #0
 8003592:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fa4e 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b0:	d103      	bne.n	80035ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e0b6      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035be:	897b      	ldrh	r3, [r7, #10]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035ce:	f7fe faff 	bl	8001bd0 <HAL_GetTick>
 80035d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b02      	cmp	r3, #2
 80035e0:	bf0c      	ite	eq
 80035e2:	2301      	moveq	r3, #1
 80035e4:	2300      	movne	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003602:	e025      	b.n	8003650 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003604:	f7fe fae4 	bl	8001bd0 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d302      	bcc.n	800361a <HAL_I2C_IsDeviceReady+0x13a>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d103      	bne.n	8003622 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	22a0      	movs	r2, #160	; 0xa0
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b02      	cmp	r3, #2
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2ba0      	cmp	r3, #160	; 0xa0
 800365a:	d005      	beq.n	8003668 <HAL_I2C_IsDeviceReady+0x188>
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d102      	bne.n	8003668 <HAL_I2C_IsDeviceReady+0x188>
 8003662:	7dbb      	ldrb	r3, [r7, #22]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0cd      	beq.n	8003604 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d129      	bne.n	80036d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2319      	movs	r3, #25
 80036aa:	2201      	movs	r2, #1
 80036ac:	4921      	ldr	r1, [pc, #132]	; (8003734 <HAL_I2C_IsDeviceReady+0x254>)
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f9c2 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e036      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e02c      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2319      	movs	r3, #25
 80036f2:	2201      	movs	r2, #1
 80036f4:	490f      	ldr	r1, [pc, #60]	; (8003734 <HAL_I2C_IsDeviceReady+0x254>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f99e 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e012      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	3301      	adds	r3, #1
 800370a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	f4ff af32 	bcc.w	800357a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800372a:	2302      	movs	r3, #2
  }
}
 800372c:	4618      	mov	r0, r3
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	00100002 	.word	0x00100002
 8003738:	ffff0000 	.word	0xffff0000

0800373c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	4608      	mov	r0, r1
 8003746:	4611      	mov	r1, r2
 8003748:	461a      	mov	r2, r3
 800374a:	4603      	mov	r3, r0
 800374c:	817b      	strh	r3, [r7, #10]
 800374e:	460b      	mov	r3, r1
 8003750:	813b      	strh	r3, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003764:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	2200      	movs	r2, #0
 800376e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f960 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00d      	beq.n	800379a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378c:	d103      	bne.n	8003796 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e05f      	b.n	800385a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800379a:	897b      	ldrh	r3, [r7, #10]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	6a3a      	ldr	r2, [r7, #32]
 80037ae:	492d      	ldr	r1, [pc, #180]	; (8003864 <I2C_RequestMemoryWrite+0x128>)
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f998 	bl	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e04c      	b.n	800385a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d8:	6a39      	ldr	r1, [r7, #32]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fa02 	bl	8003be4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d107      	bne.n	80037fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e02b      	b.n	800385a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003808:	893b      	ldrh	r3, [r7, #8]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	611a      	str	r2, [r3, #16]
 8003812:	e021      	b.n	8003858 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003814:	893b      	ldrh	r3, [r7, #8]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	b29b      	uxth	r3, r3
 800381a:	b2da      	uxtb	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003824:	6a39      	ldr	r1, [r7, #32]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f9dc 	bl	8003be4 <I2C_WaitOnTXEFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00d      	beq.n	800384e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	2b04      	cmp	r3, #4
 8003838:	d107      	bne.n	800384a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003848:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e005      	b.n	800385a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800384e:	893b      	ldrh	r3, [r7, #8]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	00010002 	.word	0x00010002

08003868 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	461a      	mov	r2, r3
 8003876:	4603      	mov	r3, r0
 8003878:	817b      	strh	r3, [r7, #10]
 800387a:	460b      	mov	r3, r1
 800387c:	813b      	strh	r3, [r7, #8]
 800387e:	4613      	mov	r3, r2
 8003880:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003890:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f8c2 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c8:	d103      	bne.n	80038d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e0aa      	b.n	8003a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038d6:	897b      	ldrh	r3, [r7, #10]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	6a3a      	ldr	r2, [r7, #32]
 80038ea:	4952      	ldr	r1, [pc, #328]	; (8003a34 <I2C_RequestMemoryRead+0x1cc>)
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f8fa 	bl	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e097      	b.n	8003a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003914:	6a39      	ldr	r1, [r7, #32]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f964 	bl	8003be4 <I2C_WaitOnTXEFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	2b04      	cmp	r3, #4
 8003928:	d107      	bne.n	800393a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003938:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e076      	b.n	8003a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003944:	893b      	ldrh	r3, [r7, #8]
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	611a      	str	r2, [r3, #16]
 800394e:	e021      	b.n	8003994 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003950:	893b      	ldrh	r3, [r7, #8]
 8003952:	0a1b      	lsrs	r3, r3, #8
 8003954:	b29b      	uxth	r3, r3
 8003956:	b2da      	uxtb	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003960:	6a39      	ldr	r1, [r7, #32]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f93e 	bl	8003be4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2b04      	cmp	r3, #4
 8003974:	d107      	bne.n	8003986 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003984:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e050      	b.n	8003a2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800398a:	893b      	ldrh	r3, [r7, #8]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003996:	6a39      	ldr	r1, [r7, #32]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f923 	bl	8003be4 <I2C_WaitOnTXEFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00d      	beq.n	80039c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d107      	bne.n	80039bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e035      	b.n	8003a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f82b 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f6:	d103      	bne.n	8003a00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e013      	b.n	8003a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a04:	897b      	ldrh	r3, [r7, #10]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	6a3a      	ldr	r2, [r7, #32]
 8003a18:	4906      	ldr	r1, [pc, #24]	; (8003a34 <I2C_RequestMemoryRead+0x1cc>)
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f863 	bl	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	00010002 	.word	0x00010002

08003a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a48:	e025      	b.n	8003a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d021      	beq.n	8003a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a52:	f7fe f8bd 	bl	8001bd0 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d302      	bcc.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d116      	bne.n	8003a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f043 0220 	orr.w	r2, r3, #32
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e023      	b.n	8003ade <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d10d      	bne.n	8003abc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	e00c      	b.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bf0c      	ite	eq
 8003ace:	2301      	moveq	r3, #1
 8003ad0:	2300      	movne	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d0b6      	beq.n	8003a4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003af4:	e051      	b.n	8003b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b04:	d123      	bne.n	8003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f043 0204 	orr.w	r2, r3, #4
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e046      	b.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d021      	beq.n	8003b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	f7fe f83b 	bl	8001bd0 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d116      	bne.n	8003b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f043 0220 	orr.w	r2, r3, #32
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e020      	b.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d10c      	bne.n	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	43da      	mvns	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	e00b      	b.n	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	43da      	mvns	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf14      	ite	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	2300      	moveq	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d18d      	bne.n	8003af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bf0:	e02d      	b.n	8003c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f8ce 	bl	8003d94 <I2C_IsAcknowledgeFailed>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e02d      	b.n	8003c5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d021      	beq.n	8003c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0a:	f7fd ffe1 	bl	8001bd0 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d116      	bne.n	8003c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f043 0220 	orr.w	r2, r3, #32
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e007      	b.n	8003c5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c58:	2b80      	cmp	r3, #128	; 0x80
 8003c5a:	d1ca      	bne.n	8003bf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c72:	e02d      	b.n	8003cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f88d 	bl	8003d94 <I2C_IsAcknowledgeFailed>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e02d      	b.n	8003ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d021      	beq.n	8003cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8c:	f7fd ffa0 	bl	8001bd0 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d116      	bne.n	8003cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e007      	b.n	8003ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d1ca      	bne.n	8003c74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cf4:	e042      	b.n	8003d7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d119      	bne.n	8003d38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0210 	mvn.w	r2, #16
 8003d0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e029      	b.n	8003d8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d38:	f7fd ff4a 	bl	8001bd0 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d302      	bcc.n	8003d4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d116      	bne.n	8003d7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	f043 0220 	orr.w	r2, r3, #32
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e007      	b.n	8003d8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b40      	cmp	r3, #64	; 0x40
 8003d88:	d1b5      	bne.n	8003cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003daa:	d11b      	bne.n	8003de4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003db4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f043 0204 	orr.w	r2, r3, #4
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003df2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003df4:	b08f      	sub	sp, #60	; 0x3c
 8003df6:	af0a      	add	r7, sp, #40	; 0x28
 8003df8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e10f      	b.n	8004024 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fb56 	bl	80014d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2203      	movs	r2, #3
 8003e28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d102      	bne.n	8003e3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 fead 	bl	8005ba2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	603b      	str	r3, [r7, #0]
 8003e4e:	687e      	ldr	r6, [r7, #4]
 8003e50:	466d      	mov	r5, sp
 8003e52:	f106 0410 	add.w	r4, r6, #16
 8003e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e62:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e66:	1d33      	adds	r3, r6, #4
 8003e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e6a:	6838      	ldr	r0, [r7, #0]
 8003e6c:	f001 fe38 	bl	8005ae0 <USB_CoreInit>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0d0      	b.n	8004024 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 fe9b 	bl	8005bc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	73fb      	strb	r3, [r7, #15]
 8003e92:	e04a      	b.n	8003f2a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e94:	7bfa      	ldrb	r2, [r7, #15]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	333d      	adds	r3, #61	; 0x3d
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ea8:	7bfa      	ldrb	r2, [r7, #15]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	333c      	adds	r3, #60	; 0x3c
 8003eb8:	7bfa      	ldrb	r2, [r7, #15]
 8003eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ebc:	7bfa      	ldrb	r2, [r7, #15]
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
 8003ec0:	b298      	uxth	r0, r3
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	3344      	adds	r3, #68	; 0x44
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ed4:	7bfa      	ldrb	r2, [r7, #15]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3340      	adds	r3, #64	; 0x40
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ee8:	7bfa      	ldrb	r2, [r7, #15]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	3348      	adds	r3, #72	; 0x48
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003efc:	7bfa      	ldrb	r2, [r7, #15]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	334c      	adds	r3, #76	; 0x4c
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f10:	7bfa      	ldrb	r2, [r7, #15]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3354      	adds	r3, #84	; 0x54
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	3301      	adds	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
 8003f2a:	7bfa      	ldrb	r2, [r7, #15]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d3af      	bcc.n	8003e94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f34:	2300      	movs	r3, #0
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e044      	b.n	8003fc4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f3a:	7bfa      	ldrb	r2, [r7, #15]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003f62:	7bfa      	ldrb	r2, [r7, #15]
 8003f64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f66:	7bfa      	ldrb	r2, [r7, #15]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f7c:	7bfa      	ldrb	r2, [r7, #15]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f92:	7bfa      	ldrb	r2, [r7, #15]
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
 8003fc4:	7bfa      	ldrb	r2, [r7, #15]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d3b5      	bcc.n	8003f3a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	687e      	ldr	r6, [r7, #4]
 8003fd6:	466d      	mov	r5, sp
 8003fd8:	f106 0410 	add.w	r4, r6, #16
 8003fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fe8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fec:	1d33      	adds	r3, r6, #4
 8003fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ff0:	6838      	ldr	r0, [r7, #0]
 8003ff2:	f001 fe33 	bl	8005c5c <USB_DevInit>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e00d      	b.n	8004024 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f001 fffe 	bl	800601e <USB_DevDisconnect>

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800402c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e267      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d075      	beq.n	8004136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800404a:	4b88      	ldr	r3, [pc, #544]	; (800426c <HAL_RCC_OscConfig+0x240>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b04      	cmp	r3, #4
 8004054:	d00c      	beq.n	8004070 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004056:	4b85      	ldr	r3, [pc, #532]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800405e:	2b08      	cmp	r3, #8
 8004060:	d112      	bne.n	8004088 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004062:	4b82      	ldr	r3, [pc, #520]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800406e:	d10b      	bne.n	8004088 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	4b7e      	ldr	r3, [pc, #504]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d05b      	beq.n	8004134 <HAL_RCC_OscConfig+0x108>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d157      	bne.n	8004134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e242      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004090:	d106      	bne.n	80040a0 <HAL_RCC_OscConfig+0x74>
 8004092:	4b76      	ldr	r3, [pc, #472]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a75      	ldr	r2, [pc, #468]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e01d      	b.n	80040dc <HAL_RCC_OscConfig+0xb0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x98>
 80040aa:	4b70      	ldr	r3, [pc, #448]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a6f      	ldr	r2, [pc, #444]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b6d      	ldr	r3, [pc, #436]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a6c      	ldr	r2, [pc, #432]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0xb0>
 80040c4:	4b69      	ldr	r3, [pc, #420]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a68      	ldr	r2, [pc, #416]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	4b66      	ldr	r3, [pc, #408]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a65      	ldr	r2, [pc, #404]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80040d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fd fd74 	bl	8001bd0 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fd fd70 	bl	8001bd0 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	; 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e207      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	4b5b      	ldr	r3, [pc, #364]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0xc0>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410c:	f7fd fd60 	bl	8001bd0 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004114:	f7fd fd5c 	bl	8001bd0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	; 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e1f3      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	4b51      	ldr	r3, [pc, #324]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0xe8>
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d063      	beq.n	800420a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004142:	4b4a      	ldr	r3, [pc, #296]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414e:	4b47      	ldr	r3, [pc, #284]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004156:	2b08      	cmp	r3, #8
 8004158:	d11c      	bne.n	8004194 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415a:	4b44      	ldr	r3, [pc, #272]	; (800426c <HAL_RCC_OscConfig+0x240>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d116      	bne.n	8004194 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004166:	4b41      	ldr	r3, [pc, #260]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <HAL_RCC_OscConfig+0x152>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d001      	beq.n	800417e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e1c7      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417e:	4b3b      	ldr	r3, [pc, #236]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4937      	ldr	r1, [pc, #220]	; (800426c <HAL_RCC_OscConfig+0x240>)
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004192:	e03a      	b.n	800420a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d020      	beq.n	80041de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800419c:	4b34      	ldr	r3, [pc, #208]	; (8004270 <HAL_RCC_OscConfig+0x244>)
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7fd fd15 	bl	8001bd0 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041aa:	f7fd fd11 	bl	8001bd0 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e1a8      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041bc:	4b2b      	ldr	r3, [pc, #172]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c8:	4b28      	ldr	r3, [pc, #160]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4925      	ldr	r1, [pc, #148]	; (800426c <HAL_RCC_OscConfig+0x240>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	600b      	str	r3, [r1, #0]
 80041dc:	e015      	b.n	800420a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041de:	4b24      	ldr	r3, [pc, #144]	; (8004270 <HAL_RCC_OscConfig+0x244>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fd fcf4 	bl	8001bd0 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ec:	f7fd fcf0 	bl	8001bd0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e187      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fe:	4b1b      	ldr	r3, [pc, #108]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d036      	beq.n	8004284 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800421e:	4b15      	ldr	r3, [pc, #84]	; (8004274 <HAL_RCC_OscConfig+0x248>)
 8004220:	2201      	movs	r2, #1
 8004222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004224:	f7fd fcd4 	bl	8001bd0 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800422c:	f7fd fcd0 	bl	8001bd0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e167      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_RCC_OscConfig+0x240>)
 8004240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0x200>
 800424a:	e01b      	b.n	8004284 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCC_OscConfig+0x248>)
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004252:	f7fd fcbd 	bl	8001bd0 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004258:	e00e      	b.n	8004278 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425a:	f7fd fcb9 	bl	8001bd0 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d907      	bls.n	8004278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e150      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
 800426c:	40023800 	.word	0x40023800
 8004270:	42470000 	.word	0x42470000
 8004274:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004278:	4b88      	ldr	r3, [pc, #544]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800427a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ea      	bne.n	800425a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 8097 	beq.w	80043c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004292:	2300      	movs	r3, #0
 8004294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004296:	4b81      	ldr	r3, [pc, #516]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10f      	bne.n	80042c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	4b7d      	ldr	r3, [pc, #500]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	4a7c      	ldr	r2, [pc, #496]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80042ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b0:	6413      	str	r3, [r2, #64]	; 0x40
 80042b2:	4b7a      	ldr	r3, [pc, #488]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042be:	2301      	movs	r3, #1
 80042c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c2:	4b77      	ldr	r3, [pc, #476]	; (80044a0 <HAL_RCC_OscConfig+0x474>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d118      	bne.n	8004300 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ce:	4b74      	ldr	r3, [pc, #464]	; (80044a0 <HAL_RCC_OscConfig+0x474>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a73      	ldr	r2, [pc, #460]	; (80044a0 <HAL_RCC_OscConfig+0x474>)
 80042d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042da:	f7fd fc79 	bl	8001bd0 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e2:	f7fd fc75 	bl	8001bd0 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e10c      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f4:	4b6a      	ldr	r3, [pc, #424]	; (80044a0 <HAL_RCC_OscConfig+0x474>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d106      	bne.n	8004316 <HAL_RCC_OscConfig+0x2ea>
 8004308:	4b64      	ldr	r3, [pc, #400]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	4a63      	ldr	r2, [pc, #396]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	6713      	str	r3, [r2, #112]	; 0x70
 8004314:	e01c      	b.n	8004350 <HAL_RCC_OscConfig+0x324>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b05      	cmp	r3, #5
 800431c:	d10c      	bne.n	8004338 <HAL_RCC_OscConfig+0x30c>
 800431e:	4b5f      	ldr	r3, [pc, #380]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	4a5e      	ldr	r2, [pc, #376]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004324:	f043 0304 	orr.w	r3, r3, #4
 8004328:	6713      	str	r3, [r2, #112]	; 0x70
 800432a:	4b5c      	ldr	r3, [pc, #368]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	4a5b      	ldr	r2, [pc, #364]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6713      	str	r3, [r2, #112]	; 0x70
 8004336:	e00b      	b.n	8004350 <HAL_RCC_OscConfig+0x324>
 8004338:	4b58      	ldr	r3, [pc, #352]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800433a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433c:	4a57      	ldr	r2, [pc, #348]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	6713      	str	r3, [r2, #112]	; 0x70
 8004344:	4b55      	ldr	r3, [pc, #340]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	4a54      	ldr	r2, [pc, #336]	; (800449c <HAL_RCC_OscConfig+0x470>)
 800434a:	f023 0304 	bic.w	r3, r3, #4
 800434e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d015      	beq.n	8004384 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fd fc3a 	bl	8001bd0 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	e00a      	b.n	8004376 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004360:	f7fd fc36 	bl	8001bd0 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	; 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e0cb      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004376:	4b49      	ldr	r3, [pc, #292]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0ee      	beq.n	8004360 <HAL_RCC_OscConfig+0x334>
 8004382:	e014      	b.n	80043ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004384:	f7fd fc24 	bl	8001bd0 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800438c:	f7fd fc20 	bl	8001bd0 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	; 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e0b5      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a2:	4b3e      	ldr	r3, [pc, #248]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1ee      	bne.n	800438c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d105      	bne.n	80043c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b4:	4b39      	ldr	r3, [pc, #228]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	4a38      	ldr	r2, [pc, #224]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80043ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80a1 	beq.w	800450c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ca:	4b34      	ldr	r3, [pc, #208]	; (800449c <HAL_RCC_OscConfig+0x470>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d05c      	beq.n	8004490 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d141      	bne.n	8004462 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043de:	4b31      	ldr	r3, [pc, #196]	; (80044a4 <HAL_RCC_OscConfig+0x478>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fd fbf4 	bl	8001bd0 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fd fbf0 	bl	8001bd0 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e087      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fe:	4b27      	ldr	r3, [pc, #156]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	019b      	lsls	r3, r3, #6
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	3b01      	subs	r3, #1
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	491b      	ldr	r1, [pc, #108]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004430:	4313      	orrs	r3, r2
 8004432:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004434:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <HAL_RCC_OscConfig+0x478>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fd fbc9 	bl	8001bd0 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004442:	f7fd fbc5 	bl	8001bd0 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e05c      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x416>
 8004460:	e054      	b.n	800450c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004462:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <HAL_RCC_OscConfig+0x478>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fd fbb2 	bl	8001bd0 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004470:	f7fd fbae 	bl	8001bd0 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e045      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_RCC_OscConfig+0x470>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x444>
 800448e:	e03d      	b.n	800450c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e038      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
 800449c:	40023800 	.word	0x40023800
 80044a0:	40007000 	.word	0x40007000
 80044a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044a8:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <HAL_RCC_OscConfig+0x4ec>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d028      	beq.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d121      	bne.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d11a      	bne.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044d8:	4013      	ands	r3, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d111      	bne.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ee:	085b      	lsrs	r3, r3, #1
 80044f0:	3b01      	subs	r3, #1
 80044f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800

0800451c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0cc      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b68      	ldr	r3, [pc, #416]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d90c      	bls.n	8004558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b65      	ldr	r3, [pc, #404]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004546:	4b63      	ldr	r3, [pc, #396]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0b8      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d020      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004570:	4b59      	ldr	r3, [pc, #356]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4a58      	ldr	r2, [pc, #352]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800457a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004588:	4b53      	ldr	r3, [pc, #332]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a52      	ldr	r2, [pc, #328]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004594:	4b50      	ldr	r3, [pc, #320]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	494d      	ldr	r1, [pc, #308]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d044      	beq.n	800463c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d107      	bne.n	80045ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ba:	4b47      	ldr	r3, [pc, #284]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d119      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e07f      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d003      	beq.n	80045da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045da:	4b3f      	ldr	r3, [pc, #252]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e06f      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ea:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e067      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fa:	4b37      	ldr	r3, [pc, #220]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f023 0203 	bic.w	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4934      	ldr	r1, [pc, #208]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	4313      	orrs	r3, r2
 800460a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800460c:	f7fd fae0 	bl	8001bd0 <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	e00a      	b.n	800462a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004614:	f7fd fadc 	bl	8001bd0 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e04f      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 020c 	and.w	r2, r3, #12
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	429a      	cmp	r2, r3
 800463a:	d1eb      	bne.n	8004614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800463c:	4b25      	ldr	r3, [pc, #148]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d20c      	bcs.n	8004664 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e032      	b.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4916      	ldr	r1, [pc, #88]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800468e:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	490e      	ldr	r1, [pc, #56]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046a2:	f000 f821 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 80046a6:	4602      	mov	r2, r0
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	490a      	ldr	r1, [pc, #40]	; (80046dc <HAL_RCC_ClockConfig+0x1c0>)
 80046b4:	5ccb      	ldrb	r3, [r1, r3]
 80046b6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ba:	4a09      	ldr	r2, [pc, #36]	; (80046e0 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046be:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <HAL_RCC_ClockConfig+0x1c8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fd fa40 	bl	8001b48 <HAL_InitTick>

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40023c00 	.word	0x40023c00
 80046d8:	40023800 	.word	0x40023800
 80046dc:	08007190 	.word	0x08007190
 80046e0:	20000000 	.word	0x20000000
 80046e4:	20000004 	.word	0x20000004

080046e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ec:	b094      	sub	sp, #80	; 0x50
 80046ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	647b      	str	r3, [r7, #68]	; 0x44
 80046f4:	2300      	movs	r3, #0
 80046f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f8:	2300      	movs	r3, #0
 80046fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004700:	4b79      	ldr	r3, [pc, #484]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 030c 	and.w	r3, r3, #12
 8004708:	2b08      	cmp	r3, #8
 800470a:	d00d      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x40>
 800470c:	2b08      	cmp	r3, #8
 800470e:	f200 80e1 	bhi.w	80048d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_RCC_GetSysClockFreq+0x34>
 8004716:	2b04      	cmp	r3, #4
 8004718:	d003      	beq.n	8004722 <HAL_RCC_GetSysClockFreq+0x3a>
 800471a:	e0db      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800471c:	4b73      	ldr	r3, [pc, #460]	; (80048ec <HAL_RCC_GetSysClockFreq+0x204>)
 800471e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004720:	e0db      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004722:	4b73      	ldr	r3, [pc, #460]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004724:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004726:	e0d8      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004728:	4b6f      	ldr	r3, [pc, #444]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004730:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004732:	4b6d      	ldr	r3, [pc, #436]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d063      	beq.n	8004806 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800473e:	4b6a      	ldr	r3, [pc, #424]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	099b      	lsrs	r3, r3, #6
 8004744:	2200      	movs	r2, #0
 8004746:	63bb      	str	r3, [r7, #56]	; 0x38
 8004748:	63fa      	str	r2, [r7, #60]	; 0x3c
 800474a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
 8004752:	2300      	movs	r3, #0
 8004754:	637b      	str	r3, [r7, #52]	; 0x34
 8004756:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800475a:	4622      	mov	r2, r4
 800475c:	462b      	mov	r3, r5
 800475e:	f04f 0000 	mov.w	r0, #0
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	0159      	lsls	r1, r3, #5
 8004768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800476c:	0150      	lsls	r0, r2, #5
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4621      	mov	r1, r4
 8004774:	1a51      	subs	r1, r2, r1
 8004776:	6139      	str	r1, [r7, #16]
 8004778:	4629      	mov	r1, r5
 800477a:	eb63 0301 	sbc.w	r3, r3, r1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800478c:	4659      	mov	r1, fp
 800478e:	018b      	lsls	r3, r1, #6
 8004790:	4651      	mov	r1, sl
 8004792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004796:	4651      	mov	r1, sl
 8004798:	018a      	lsls	r2, r1, #6
 800479a:	4651      	mov	r1, sl
 800479c:	ebb2 0801 	subs.w	r8, r2, r1
 80047a0:	4659      	mov	r1, fp
 80047a2:	eb63 0901 	sbc.w	r9, r3, r1
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ba:	4690      	mov	r8, r2
 80047bc:	4699      	mov	r9, r3
 80047be:	4623      	mov	r3, r4
 80047c0:	eb18 0303 	adds.w	r3, r8, r3
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	462b      	mov	r3, r5
 80047c8:	eb49 0303 	adc.w	r3, r9, r3
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047da:	4629      	mov	r1, r5
 80047dc:	024b      	lsls	r3, r1, #9
 80047de:	4621      	mov	r1, r4
 80047e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047e4:	4621      	mov	r1, r4
 80047e6:	024a      	lsls	r2, r1, #9
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ee:	2200      	movs	r2, #0
 80047f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047f8:	f7fb fd3a 	bl	8000270 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4613      	mov	r3, r2
 8004802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004804:	e058      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004806:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	099b      	lsrs	r3, r3, #6
 800480c:	2200      	movs	r2, #0
 800480e:	4618      	mov	r0, r3
 8004810:	4611      	mov	r1, r2
 8004812:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004816:	623b      	str	r3, [r7, #32]
 8004818:	2300      	movs	r3, #0
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
 800481c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004820:	4642      	mov	r2, r8
 8004822:	464b      	mov	r3, r9
 8004824:	f04f 0000 	mov.w	r0, #0
 8004828:	f04f 0100 	mov.w	r1, #0
 800482c:	0159      	lsls	r1, r3, #5
 800482e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004832:	0150      	lsls	r0, r2, #5
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4641      	mov	r1, r8
 800483a:	ebb2 0a01 	subs.w	sl, r2, r1
 800483e:	4649      	mov	r1, r9
 8004840:	eb63 0b01 	sbc.w	fp, r3, r1
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004850:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004854:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004858:	ebb2 040a 	subs.w	r4, r2, sl
 800485c:	eb63 050b 	sbc.w	r5, r3, fp
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	00eb      	lsls	r3, r5, #3
 800486a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800486e:	00e2      	lsls	r2, r4, #3
 8004870:	4614      	mov	r4, r2
 8004872:	461d      	mov	r5, r3
 8004874:	4643      	mov	r3, r8
 8004876:	18e3      	adds	r3, r4, r3
 8004878:	603b      	str	r3, [r7, #0]
 800487a:	464b      	mov	r3, r9
 800487c:	eb45 0303 	adc.w	r3, r5, r3
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800488e:	4629      	mov	r1, r5
 8004890:	028b      	lsls	r3, r1, #10
 8004892:	4621      	mov	r1, r4
 8004894:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004898:	4621      	mov	r1, r4
 800489a:	028a      	lsls	r2, r1, #10
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048a2:	2200      	movs	r2, #0
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	61fa      	str	r2, [r7, #28]
 80048a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ac:	f7fb fce0 	bl	8000270 <__aeabi_uldivmod>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4613      	mov	r3, r2
 80048b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	3301      	adds	r3, #1
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048d2:	e002      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <HAL_RCC_GetSysClockFreq+0x204>)
 80048d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3750      	adds	r7, #80	; 0x50
 80048e0:	46bd      	mov	sp, r7
 80048e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800
 80048ec:	00f42400 	.word	0x00f42400
 80048f0:	007a1200 	.word	0x007a1200

080048f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048f8:	4b03      	ldr	r3, [pc, #12]	; (8004908 <HAL_RCC_GetHCLKFreq+0x14>)
 80048fa:	681b      	ldr	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000000 	.word	0x20000000

0800490c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004910:	f7ff fff0 	bl	80048f4 <HAL_RCC_GetHCLKFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	0a9b      	lsrs	r3, r3, #10
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4903      	ldr	r1, [pc, #12]	; (8004930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004922:	5ccb      	ldrb	r3, [r1, r3]
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004928:	4618      	mov	r0, r3
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40023800 	.word	0x40023800
 8004930:	080071a0 	.word	0x080071a0

08004934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004938:	f7ff ffdc 	bl	80048f4 <HAL_RCC_GetHCLKFreq>
 800493c:	4602      	mov	r2, r0
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	0b5b      	lsrs	r3, r3, #13
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	4903      	ldr	r1, [pc, #12]	; (8004958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800494a:	5ccb      	ldrb	r3, [r1, r3]
 800494c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004950:	4618      	mov	r0, r3
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40023800 	.word	0x40023800
 8004958:	080071a0 	.word	0x080071a0

0800495c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e041      	b.n	80049f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fc fd00 	bl	8001388 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f000 faec 	bl	8004f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d109      	bne.n	8004a20 <HAL_TIM_PWM_Start+0x24>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	bf14      	ite	ne
 8004a18:	2301      	movne	r3, #1
 8004a1a:	2300      	moveq	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e022      	b.n	8004a66 <HAL_TIM_PWM_Start+0x6a>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d109      	bne.n	8004a3a <HAL_TIM_PWM_Start+0x3e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	bf14      	ite	ne
 8004a32:	2301      	movne	r3, #1
 8004a34:	2300      	moveq	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	e015      	b.n	8004a66 <HAL_TIM_PWM_Start+0x6a>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d109      	bne.n	8004a54 <HAL_TIM_PWM_Start+0x58>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	bf14      	ite	ne
 8004a4c:	2301      	movne	r3, #1
 8004a4e:	2300      	moveq	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e008      	b.n	8004a66 <HAL_TIM_PWM_Start+0x6a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e07c      	b.n	8004b68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Start+0x82>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a7c:	e013      	b.n	8004aa6 <HAL_TIM_PWM_Start+0xaa>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d104      	bne.n	8004a8e <HAL_TIM_PWM_Start+0x92>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a8c:	e00b      	b.n	8004aa6 <HAL_TIM_PWM_Start+0xaa>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Start+0xa2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a9c:	e003      	b.n	8004aa6 <HAL_TIM_PWM_Start+0xaa>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	6839      	ldr	r1, [r7, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fcb2 	bl	8005418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a2d      	ldr	r2, [pc, #180]	; (8004b70 <HAL_TIM_PWM_Start+0x174>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <HAL_TIM_PWM_Start+0xcc>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2c      	ldr	r2, [pc, #176]	; (8004b74 <HAL_TIM_PWM_Start+0x178>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d101      	bne.n	8004acc <HAL_TIM_PWM_Start+0xd0>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <HAL_TIM_PWM_Start+0xd2>
 8004acc:	2300      	movs	r3, #0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ae0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a22      	ldr	r2, [pc, #136]	; (8004b70 <HAL_TIM_PWM_Start+0x174>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d022      	beq.n	8004b32 <HAL_TIM_PWM_Start+0x136>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d01d      	beq.n	8004b32 <HAL_TIM_PWM_Start+0x136>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1f      	ldr	r2, [pc, #124]	; (8004b78 <HAL_TIM_PWM_Start+0x17c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d018      	beq.n	8004b32 <HAL_TIM_PWM_Start+0x136>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1d      	ldr	r2, [pc, #116]	; (8004b7c <HAL_TIM_PWM_Start+0x180>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d013      	beq.n	8004b32 <HAL_TIM_PWM_Start+0x136>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <HAL_TIM_PWM_Start+0x184>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00e      	beq.n	8004b32 <HAL_TIM_PWM_Start+0x136>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <HAL_TIM_PWM_Start+0x178>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d009      	beq.n	8004b32 <HAL_TIM_PWM_Start+0x136>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <HAL_TIM_PWM_Start+0x188>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d004      	beq.n	8004b32 <HAL_TIM_PWM_Start+0x136>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a16      	ldr	r2, [pc, #88]	; (8004b88 <HAL_TIM_PWM_Start+0x18c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d111      	bne.n	8004b56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b06      	cmp	r3, #6
 8004b42:	d010      	beq.n	8004b66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b54:	e007      	b.n	8004b66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0201 	orr.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40010000 	.word	0x40010000
 8004b74:	40010400 	.word	0x40010400
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40001800 	.word	0x40001800

08004b8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e097      	b.n	8004cd0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d106      	bne.n	8004bba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7fc fb69 	bl	800128c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bd0:	f023 0307 	bic.w	r3, r3, #7
 8004bd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f000 f9c9 	bl	8004f78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004c2c:	f023 030c 	bic.w	r3, r3, #12
 8004c30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	011a      	lsls	r2, r3, #4
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	031b      	lsls	r3, r3, #12
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cf0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cf8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d00:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d110      	bne.n	8004d2a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d102      	bne.n	8004d14 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d0e:	7b7b      	ldrb	r3, [r7, #13]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d001      	beq.n	8004d18 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e069      	b.n	8004dec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d28:	e031      	b.n	8004d8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d110      	bne.n	8004d52 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d30:	7bbb      	ldrb	r3, [r7, #14]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d102      	bne.n	8004d3c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d36:	7b3b      	ldrb	r3, [r7, #12]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d001      	beq.n	8004d40 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e055      	b.n	8004dec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d50:	e01d      	b.n	8004d8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d108      	bne.n	8004d6a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d58:	7bbb      	ldrb	r3, [r7, #14]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d105      	bne.n	8004d6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d5e:	7b7b      	ldrb	r3, [r7, #13]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d102      	bne.n	8004d6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d64:	7b3b      	ldrb	r3, [r7, #12]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d001      	beq.n	8004d6e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e03e      	b.n	8004dec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2202      	movs	r2, #2
 8004d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_TIM_Encoder_Start+0xc4>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d008      	beq.n	8004dac <HAL_TIM_Encoder_Start+0xd4>
 8004d9a:	e00f      	b.n	8004dbc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2201      	movs	r2, #1
 8004da2:	2100      	movs	r1, #0
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fb37 	bl	8005418 <TIM_CCxChannelCmd>
      break;
 8004daa:	e016      	b.n	8004dda <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2201      	movs	r2, #1
 8004db2:	2104      	movs	r1, #4
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fb2f 	bl	8005418 <TIM_CCxChannelCmd>
      break;
 8004dba:	e00e      	b.n	8004dda <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fb27 	bl	8005418 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	2104      	movs	r1, #4
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fb20 	bl	8005418 <TIM_CCxChannelCmd>
      break;
 8004dd8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0201 	orr.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e0ae      	b.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b0c      	cmp	r3, #12
 8004e1e:	f200 809f 	bhi.w	8004f60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e22:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e5d 	.word	0x08004e5d
 8004e2c:	08004f61 	.word	0x08004f61
 8004e30:	08004f61 	.word	0x08004f61
 8004e34:	08004f61 	.word	0x08004f61
 8004e38:	08004e9d 	.word	0x08004e9d
 8004e3c:	08004f61 	.word	0x08004f61
 8004e40:	08004f61 	.word	0x08004f61
 8004e44:	08004f61 	.word	0x08004f61
 8004e48:	08004edf 	.word	0x08004edf
 8004e4c:	08004f61 	.word	0x08004f61
 8004e50:	08004f61 	.word	0x08004f61
 8004e54:	08004f61 	.word	0x08004f61
 8004e58:	08004f1f 	.word	0x08004f1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f928 	bl	80050b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0208 	orr.w	r2, r2, #8
 8004e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0204 	bic.w	r2, r2, #4
 8004e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6999      	ldr	r1, [r3, #24]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	619a      	str	r2, [r3, #24]
      break;
 8004e9a:	e064      	b.n	8004f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 f978 	bl	8005198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6999      	ldr	r1, [r3, #24]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	021a      	lsls	r2, r3, #8
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	619a      	str	r2, [r3, #24]
      break;
 8004edc:	e043      	b.n	8004f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 f9cd 	bl	8005284 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69da      	ldr	r2, [r3, #28]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0208 	orr.w	r2, r2, #8
 8004ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0204 	bic.w	r2, r2, #4
 8004f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69d9      	ldr	r1, [r3, #28]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	61da      	str	r2, [r3, #28]
      break;
 8004f1c:	e023      	b.n	8004f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fa21 	bl	800536c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69d9      	ldr	r1, [r3, #28]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	021a      	lsls	r2, r3, #8
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	61da      	str	r2, [r3, #28]
      break;
 8004f5e:	e002      	b.n	8004f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	75fb      	strb	r3, [r7, #23]
      break;
 8004f64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a40      	ldr	r2, [pc, #256]	; (800508c <TIM_Base_SetConfig+0x114>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f96:	d00f      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a3d      	ldr	r2, [pc, #244]	; (8005090 <TIM_Base_SetConfig+0x118>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a3c      	ldr	r2, [pc, #240]	; (8005094 <TIM_Base_SetConfig+0x11c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d007      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3b      	ldr	r2, [pc, #236]	; (8005098 <TIM_Base_SetConfig+0x120>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a3a      	ldr	r2, [pc, #232]	; (800509c <TIM_Base_SetConfig+0x124>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d108      	bne.n	8004fca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a2f      	ldr	r2, [pc, #188]	; (800508c <TIM_Base_SetConfig+0x114>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d02b      	beq.n	800502a <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd8:	d027      	beq.n	800502a <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2c      	ldr	r2, [pc, #176]	; (8005090 <TIM_Base_SetConfig+0x118>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d023      	beq.n	800502a <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2b      	ldr	r2, [pc, #172]	; (8005094 <TIM_Base_SetConfig+0x11c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d01f      	beq.n	800502a <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <TIM_Base_SetConfig+0x120>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d01b      	beq.n	800502a <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a29      	ldr	r2, [pc, #164]	; (800509c <TIM_Base_SetConfig+0x124>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d017      	beq.n	800502a <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a28      	ldr	r2, [pc, #160]	; (80050a0 <TIM_Base_SetConfig+0x128>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a27      	ldr	r2, [pc, #156]	; (80050a4 <TIM_Base_SetConfig+0x12c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00f      	beq.n	800502a <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a26      	ldr	r2, [pc, #152]	; (80050a8 <TIM_Base_SetConfig+0x130>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00b      	beq.n	800502a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a25      	ldr	r2, [pc, #148]	; (80050ac <TIM_Base_SetConfig+0x134>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d007      	beq.n	800502a <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a24      	ldr	r2, [pc, #144]	; (80050b0 <TIM_Base_SetConfig+0x138>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d003      	beq.n	800502a <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a23      	ldr	r2, [pc, #140]	; (80050b4 <TIM_Base_SetConfig+0x13c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d108      	bne.n	800503c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a0a      	ldr	r2, [pc, #40]	; (800508c <TIM_Base_SetConfig+0x114>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_Base_SetConfig+0xf8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a0c      	ldr	r2, [pc, #48]	; (800509c <TIM_Base_SetConfig+0x124>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d103      	bne.n	8005078 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	615a      	str	r2, [r3, #20]
}
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40010000 	.word	0x40010000
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40010400 	.word	0x40010400
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40014400 	.word	0x40014400
 80050a8:	40014800 	.word	0x40014800
 80050ac:	40001800 	.word	0x40001800
 80050b0:	40001c00 	.word	0x40001c00
 80050b4:	40002000 	.word	0x40002000

080050b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f023 0201 	bic.w	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0303 	bic.w	r3, r3, #3
 80050ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f023 0302 	bic.w	r3, r3, #2
 8005100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a20      	ldr	r2, [pc, #128]	; (8005190 <TIM_OC1_SetConfig+0xd8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_OC1_SetConfig+0x64>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <TIM_OC1_SetConfig+0xdc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d10c      	bne.n	8005136 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f023 0308 	bic.w	r3, r3, #8
 8005122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f023 0304 	bic.w	r3, r3, #4
 8005134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a15      	ldr	r2, [pc, #84]	; (8005190 <TIM_OC1_SetConfig+0xd8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <TIM_OC1_SetConfig+0x8e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a14      	ldr	r2, [pc, #80]	; (8005194 <TIM_OC1_SetConfig+0xdc>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d111      	bne.n	800516a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800514c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	621a      	str	r2, [r3, #32]
}
 8005184:	bf00      	nop
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	40010000 	.word	0x40010000
 8005194:	40010400 	.word	0x40010400

08005198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0210 	bic.w	r2, r3, #16
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0320 	bic.w	r3, r3, #32
 80051e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a22      	ldr	r2, [pc, #136]	; (800527c <TIM_OC2_SetConfig+0xe4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_OC2_SetConfig+0x68>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a21      	ldr	r2, [pc, #132]	; (8005280 <TIM_OC2_SetConfig+0xe8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d10d      	bne.n	800521c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800521a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a17      	ldr	r2, [pc, #92]	; (800527c <TIM_OC2_SetConfig+0xe4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC2_SetConfig+0x94>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a16      	ldr	r2, [pc, #88]	; (8005280 <TIM_OC2_SetConfig+0xe8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d113      	bne.n	8005254 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800523a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	621a      	str	r2, [r3, #32]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000
 8005280:	40010400 	.word	0x40010400

08005284 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0303 	bic.w	r3, r3, #3
 80052ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a21      	ldr	r2, [pc, #132]	; (8005364 <TIM_OC3_SetConfig+0xe0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d003      	beq.n	80052ea <TIM_OC3_SetConfig+0x66>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a20      	ldr	r2, [pc, #128]	; (8005368 <TIM_OC3_SetConfig+0xe4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d10d      	bne.n	8005306 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a16      	ldr	r2, [pc, #88]	; (8005364 <TIM_OC3_SetConfig+0xe0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d003      	beq.n	8005316 <TIM_OC3_SetConfig+0x92>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a15      	ldr	r2, [pc, #84]	; (8005368 <TIM_OC3_SetConfig+0xe4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d113      	bne.n	800533e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800531c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	621a      	str	r2, [r3, #32]
}
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40010000 	.word	0x40010000
 8005368:	40010400 	.word	0x40010400

0800536c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	021b      	lsls	r3, r3, #8
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	031b      	lsls	r3, r3, #12
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a12      	ldr	r2, [pc, #72]	; (8005410 <TIM_OC4_SetConfig+0xa4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d003      	beq.n	80053d4 <TIM_OC4_SetConfig+0x68>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a11      	ldr	r2, [pc, #68]	; (8005414 <TIM_OC4_SetConfig+0xa8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d109      	bne.n	80053e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	019b      	lsls	r3, r3, #6
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40010000 	.word	0x40010000
 8005414:	40010400 	.word	0x40010400

08005418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f003 031f 	and.w	r3, r3, #31
 800542a:	2201      	movs	r2, #1
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1a      	ldr	r2, [r3, #32]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	43db      	mvns	r3, r3
 800543a:	401a      	ands	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a1a      	ldr	r2, [r3, #32]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	fa01 f303 	lsl.w	r3, r1, r3
 8005450:	431a      	orrs	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	621a      	str	r2, [r3, #32]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005478:	2302      	movs	r3, #2
 800547a:	e05a      	b.n	8005532 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a21      	ldr	r2, [pc, #132]	; (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d022      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c8:	d01d      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d018      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1a      	ldr	r2, [pc, #104]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00e      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a18      	ldr	r2, [pc, #96]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d009      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a17      	ldr	r2, [pc, #92]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d004      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a15      	ldr	r2, [pc, #84]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d10c      	bne.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800550c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	4313      	orrs	r3, r2
 8005516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40010000 	.word	0x40010000
 8005544:	40000400 	.word	0x40000400
 8005548:	40000800 	.word	0x40000800
 800554c:	40000c00 	.word	0x40000c00
 8005550:	40010400 	.word	0x40010400
 8005554:	40014000 	.word	0x40014000
 8005558:	40001800 	.word	0x40001800

0800555c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e03f      	b.n	80055ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fb ff5c 	bl	8001440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2224      	movs	r2, #36	; 0x24
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800559e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f829 	bl	80055f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695a      	ldr	r2, [r3, #20]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055fc:	b0c0      	sub	sp, #256	; 0x100
 80055fe:	af00      	add	r7, sp, #0
 8005600:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005614:	68d9      	ldr	r1, [r3, #12]
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	ea40 0301 	orr.w	r3, r0, r1
 8005620:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	431a      	orrs	r2, r3
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	431a      	orrs	r2, r3
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005650:	f021 010c 	bic.w	r1, r1, #12
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800565e:	430b      	orrs	r3, r1
 8005660:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005672:	6999      	ldr	r1, [r3, #24]
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	ea40 0301 	orr.w	r3, r0, r1
 800567e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4b8f      	ldr	r3, [pc, #572]	; (80058c4 <UART_SetConfig+0x2cc>)
 8005688:	429a      	cmp	r2, r3
 800568a:	d005      	beq.n	8005698 <UART_SetConfig+0xa0>
 800568c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4b8d      	ldr	r3, [pc, #564]	; (80058c8 <UART_SetConfig+0x2d0>)
 8005694:	429a      	cmp	r2, r3
 8005696:	d104      	bne.n	80056a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005698:	f7ff f94c 	bl	8004934 <HAL_RCC_GetPCLK2Freq>
 800569c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056a0:	e003      	b.n	80056aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056a2:	f7ff f933 	bl	800490c <HAL_RCC_GetPCLK1Freq>
 80056a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b4:	f040 810c 	bne.w	80058d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056bc:	2200      	movs	r2, #0
 80056be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056ca:	4622      	mov	r2, r4
 80056cc:	462b      	mov	r3, r5
 80056ce:	1891      	adds	r1, r2, r2
 80056d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80056d2:	415b      	adcs	r3, r3
 80056d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056da:	4621      	mov	r1, r4
 80056dc:	eb12 0801 	adds.w	r8, r2, r1
 80056e0:	4629      	mov	r1, r5
 80056e2:	eb43 0901 	adc.w	r9, r3, r1
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056fa:	4690      	mov	r8, r2
 80056fc:	4699      	mov	r9, r3
 80056fe:	4623      	mov	r3, r4
 8005700:	eb18 0303 	adds.w	r3, r8, r3
 8005704:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005708:	462b      	mov	r3, r5
 800570a:	eb49 0303 	adc.w	r3, r9, r3
 800570e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800571e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005722:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005726:	460b      	mov	r3, r1
 8005728:	18db      	adds	r3, r3, r3
 800572a:	653b      	str	r3, [r7, #80]	; 0x50
 800572c:	4613      	mov	r3, r2
 800572e:	eb42 0303 	adc.w	r3, r2, r3
 8005732:	657b      	str	r3, [r7, #84]	; 0x54
 8005734:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005738:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800573c:	f7fa fd98 	bl	8000270 <__aeabi_uldivmod>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4b61      	ldr	r3, [pc, #388]	; (80058cc <UART_SetConfig+0x2d4>)
 8005746:	fba3 2302 	umull	r2, r3, r3, r2
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	011c      	lsls	r4, r3, #4
 800574e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005752:	2200      	movs	r2, #0
 8005754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005758:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800575c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005760:	4642      	mov	r2, r8
 8005762:	464b      	mov	r3, r9
 8005764:	1891      	adds	r1, r2, r2
 8005766:	64b9      	str	r1, [r7, #72]	; 0x48
 8005768:	415b      	adcs	r3, r3
 800576a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800576c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005770:	4641      	mov	r1, r8
 8005772:	eb12 0a01 	adds.w	sl, r2, r1
 8005776:	4649      	mov	r1, r9
 8005778:	eb43 0b01 	adc.w	fp, r3, r1
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	f04f 0300 	mov.w	r3, #0
 8005784:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005788:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800578c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005790:	4692      	mov	sl, r2
 8005792:	469b      	mov	fp, r3
 8005794:	4643      	mov	r3, r8
 8005796:	eb1a 0303 	adds.w	r3, sl, r3
 800579a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800579e:	464b      	mov	r3, r9
 80057a0:	eb4b 0303 	adc.w	r3, fp, r3
 80057a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057bc:	460b      	mov	r3, r1
 80057be:	18db      	adds	r3, r3, r3
 80057c0:	643b      	str	r3, [r7, #64]	; 0x40
 80057c2:	4613      	mov	r3, r2
 80057c4:	eb42 0303 	adc.w	r3, r2, r3
 80057c8:	647b      	str	r3, [r7, #68]	; 0x44
 80057ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057d2:	f7fa fd4d 	bl	8000270 <__aeabi_uldivmod>
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	4611      	mov	r1, r2
 80057dc:	4b3b      	ldr	r3, [pc, #236]	; (80058cc <UART_SetConfig+0x2d4>)
 80057de:	fba3 2301 	umull	r2, r3, r3, r1
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	2264      	movs	r2, #100	; 0x64
 80057e6:	fb02 f303 	mul.w	r3, r2, r3
 80057ea:	1acb      	subs	r3, r1, r3
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057f2:	4b36      	ldr	r3, [pc, #216]	; (80058cc <UART_SetConfig+0x2d4>)
 80057f4:	fba3 2302 	umull	r2, r3, r3, r2
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005800:	441c      	add	r4, r3
 8005802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005806:	2200      	movs	r2, #0
 8005808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800580c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005810:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005814:	4642      	mov	r2, r8
 8005816:	464b      	mov	r3, r9
 8005818:	1891      	adds	r1, r2, r2
 800581a:	63b9      	str	r1, [r7, #56]	; 0x38
 800581c:	415b      	adcs	r3, r3
 800581e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005824:	4641      	mov	r1, r8
 8005826:	1851      	adds	r1, r2, r1
 8005828:	6339      	str	r1, [r7, #48]	; 0x30
 800582a:	4649      	mov	r1, r9
 800582c:	414b      	adcs	r3, r1
 800582e:	637b      	str	r3, [r7, #52]	; 0x34
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800583c:	4659      	mov	r1, fp
 800583e:	00cb      	lsls	r3, r1, #3
 8005840:	4651      	mov	r1, sl
 8005842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005846:	4651      	mov	r1, sl
 8005848:	00ca      	lsls	r2, r1, #3
 800584a:	4610      	mov	r0, r2
 800584c:	4619      	mov	r1, r3
 800584e:	4603      	mov	r3, r0
 8005850:	4642      	mov	r2, r8
 8005852:	189b      	adds	r3, r3, r2
 8005854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005858:	464b      	mov	r3, r9
 800585a:	460a      	mov	r2, r1
 800585c:	eb42 0303 	adc.w	r3, r2, r3
 8005860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005870:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005874:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005878:	460b      	mov	r3, r1
 800587a:	18db      	adds	r3, r3, r3
 800587c:	62bb      	str	r3, [r7, #40]	; 0x28
 800587e:	4613      	mov	r3, r2
 8005880:	eb42 0303 	adc.w	r3, r2, r3
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800588a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800588e:	f7fa fcef 	bl	8000270 <__aeabi_uldivmod>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <UART_SetConfig+0x2d4>)
 8005898:	fba3 1302 	umull	r1, r3, r3, r2
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	2164      	movs	r1, #100	; 0x64
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	3332      	adds	r3, #50	; 0x32
 80058aa:	4a08      	ldr	r2, [pc, #32]	; (80058cc <UART_SetConfig+0x2d4>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	f003 0207 	and.w	r2, r3, #7
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4422      	add	r2, r4
 80058be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058c0:	e105      	b.n	8005ace <UART_SetConfig+0x4d6>
 80058c2:	bf00      	nop
 80058c4:	40011000 	.word	0x40011000
 80058c8:	40011400 	.word	0x40011400
 80058cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058d4:	2200      	movs	r2, #0
 80058d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058e2:	4642      	mov	r2, r8
 80058e4:	464b      	mov	r3, r9
 80058e6:	1891      	adds	r1, r2, r2
 80058e8:	6239      	str	r1, [r7, #32]
 80058ea:	415b      	adcs	r3, r3
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
 80058ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058f2:	4641      	mov	r1, r8
 80058f4:	1854      	adds	r4, r2, r1
 80058f6:	4649      	mov	r1, r9
 80058f8:	eb43 0501 	adc.w	r5, r3, r1
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	00eb      	lsls	r3, r5, #3
 8005906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800590a:	00e2      	lsls	r2, r4, #3
 800590c:	4614      	mov	r4, r2
 800590e:	461d      	mov	r5, r3
 8005910:	4643      	mov	r3, r8
 8005912:	18e3      	adds	r3, r4, r3
 8005914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005918:	464b      	mov	r3, r9
 800591a:	eb45 0303 	adc.w	r3, r5, r3
 800591e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800592e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005932:	f04f 0200 	mov.w	r2, #0
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800593e:	4629      	mov	r1, r5
 8005940:	008b      	lsls	r3, r1, #2
 8005942:	4621      	mov	r1, r4
 8005944:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005948:	4621      	mov	r1, r4
 800594a:	008a      	lsls	r2, r1, #2
 800594c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005950:	f7fa fc8e 	bl	8000270 <__aeabi_uldivmod>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4b60      	ldr	r3, [pc, #384]	; (8005adc <UART_SetConfig+0x4e4>)
 800595a:	fba3 2302 	umull	r2, r3, r3, r2
 800595e:	095b      	lsrs	r3, r3, #5
 8005960:	011c      	lsls	r4, r3, #4
 8005962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005966:	2200      	movs	r2, #0
 8005968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800596c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005970:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005974:	4642      	mov	r2, r8
 8005976:	464b      	mov	r3, r9
 8005978:	1891      	adds	r1, r2, r2
 800597a:	61b9      	str	r1, [r7, #24]
 800597c:	415b      	adcs	r3, r3
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005984:	4641      	mov	r1, r8
 8005986:	1851      	adds	r1, r2, r1
 8005988:	6139      	str	r1, [r7, #16]
 800598a:	4649      	mov	r1, r9
 800598c:	414b      	adcs	r3, r1
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800599c:	4659      	mov	r1, fp
 800599e:	00cb      	lsls	r3, r1, #3
 80059a0:	4651      	mov	r1, sl
 80059a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059a6:	4651      	mov	r1, sl
 80059a8:	00ca      	lsls	r2, r1, #3
 80059aa:	4610      	mov	r0, r2
 80059ac:	4619      	mov	r1, r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	4642      	mov	r2, r8
 80059b2:	189b      	adds	r3, r3, r2
 80059b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059b8:	464b      	mov	r3, r9
 80059ba:	460a      	mov	r2, r1
 80059bc:	eb42 0303 	adc.w	r3, r2, r3
 80059c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80059ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059dc:	4649      	mov	r1, r9
 80059de:	008b      	lsls	r3, r1, #2
 80059e0:	4641      	mov	r1, r8
 80059e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059e6:	4641      	mov	r1, r8
 80059e8:	008a      	lsls	r2, r1, #2
 80059ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059ee:	f7fa fc3f 	bl	8000270 <__aeabi_uldivmod>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4b39      	ldr	r3, [pc, #228]	; (8005adc <UART_SetConfig+0x4e4>)
 80059f8:	fba3 1302 	umull	r1, r3, r3, r2
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	2164      	movs	r1, #100	; 0x64
 8005a00:	fb01 f303 	mul.w	r3, r1, r3
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	3332      	adds	r3, #50	; 0x32
 8005a0a:	4a34      	ldr	r2, [pc, #208]	; (8005adc <UART_SetConfig+0x4e4>)
 8005a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a16:	441c      	add	r4, r3
 8005a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a20:	677a      	str	r2, [r7, #116]	; 0x74
 8005a22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a26:	4642      	mov	r2, r8
 8005a28:	464b      	mov	r3, r9
 8005a2a:	1891      	adds	r1, r2, r2
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	415b      	adcs	r3, r3
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a36:	4641      	mov	r1, r8
 8005a38:	1851      	adds	r1, r2, r1
 8005a3a:	6039      	str	r1, [r7, #0]
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	414b      	adcs	r3, r1
 8005a40:	607b      	str	r3, [r7, #4]
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	f04f 0300 	mov.w	r3, #0
 8005a4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a4e:	4659      	mov	r1, fp
 8005a50:	00cb      	lsls	r3, r1, #3
 8005a52:	4651      	mov	r1, sl
 8005a54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a58:	4651      	mov	r1, sl
 8005a5a:	00ca      	lsls	r2, r1, #3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4603      	mov	r3, r0
 8005a62:	4642      	mov	r2, r8
 8005a64:	189b      	adds	r3, r3, r2
 8005a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a68:	464b      	mov	r3, r9
 8005a6a:	460a      	mov	r2, r1
 8005a6c:	eb42 0303 	adc.w	r3, r2, r3
 8005a70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	663b      	str	r3, [r7, #96]	; 0x60
 8005a7c:	667a      	str	r2, [r7, #100]	; 0x64
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	008b      	lsls	r3, r1, #2
 8005a8e:	4641      	mov	r1, r8
 8005a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a94:	4641      	mov	r1, r8
 8005a96:	008a      	lsls	r2, r1, #2
 8005a98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a9c:	f7fa fbe8 	bl	8000270 <__aeabi_uldivmod>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <UART_SetConfig+0x4e4>)
 8005aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	2164      	movs	r1, #100	; 0x64
 8005aae:	fb01 f303 	mul.w	r3, r1, r3
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	3332      	adds	r3, #50	; 0x32
 8005ab8:	4a08      	ldr	r2, [pc, #32]	; (8005adc <UART_SetConfig+0x4e4>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	095b      	lsrs	r3, r3, #5
 8005ac0:	f003 020f 	and.w	r2, r3, #15
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4422      	add	r2, r4
 8005acc:	609a      	str	r2, [r3, #8]
}
 8005ace:	bf00      	nop
 8005ad0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ada:	bf00      	nop
 8005adc:	51eb851f 	.word	0x51eb851f

08005ae0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	f107 001c 	add.w	r0, r7, #28
 8005aee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d122      	bne.n	8005b3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d105      	bne.n	8005b32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 faa2 	bl	800607c <USB_CoreReset>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73fb      	strb	r3, [r7, #15]
 8005b3c:	e01a      	b.n	8005b74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fa96 	bl	800607c <USB_CoreReset>
 8005b50:	4603      	mov	r3, r0
 8005b52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38
 8005b66:	e005      	b.n	8005b74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d10b      	bne.n	8005b92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f043 0206 	orr.w	r2, r3, #6
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f043 0220 	orr.w	r2, r3, #32
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b9e:	b004      	add	sp, #16
 8005ba0:	4770      	bx	lr

08005ba2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f023 0201 	bic.w	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d115      	bne.n	8005c12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	f7fb fff8 	bl	8001be8 <HAL_Delay>
      ms++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fa2e 	bl	8006060 <USB_GetMode>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d01e      	beq.n	8005c48 <USB_SetCurrentMode+0x84>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b31      	cmp	r3, #49	; 0x31
 8005c0e:	d9f0      	bls.n	8005bf2 <USB_SetCurrentMode+0x2e>
 8005c10:	e01a      	b.n	8005c48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d115      	bne.n	8005c44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c24:	2001      	movs	r0, #1
 8005c26:	f7fb ffdf 	bl	8001be8 <HAL_Delay>
      ms++;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fa15 	bl	8006060 <USB_GetMode>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <USB_SetCurrentMode+0x84>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b31      	cmp	r3, #49	; 0x31
 8005c40:	d9f0      	bls.n	8005c24 <USB_SetCurrentMode+0x60>
 8005c42:	e001      	b.n	8005c48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e005      	b.n	8005c54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b32      	cmp	r3, #50	; 0x32
 8005c4c:	d101      	bne.n	8005c52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b086      	sub	sp, #24
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c76:	2300      	movs	r3, #0
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	e009      	b.n	8005c90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	3340      	adds	r3, #64	; 0x40
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	2200      	movs	r2, #0
 8005c88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b0e      	cmp	r3, #14
 8005c94:	d9f2      	bls.n	8005c7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d11c      	bne.n	8005cd6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005caa:	f043 0302 	orr.w	r3, r3, #2
 8005cae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	639a      	str	r2, [r3, #56]	; 0x38
 8005cd4:	e00b      	b.n	8005cee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d00:	4619      	mov	r1, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d08:	461a      	mov	r2, r3
 8005d0a:	680b      	ldr	r3, [r1, #0]
 8005d0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d10c      	bne.n	8005d2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d104      	bne.n	8005d24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f965 	bl	8005fec <USB_SetDevSpeed>
 8005d22:	e008      	b.n	8005d36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d24:	2101      	movs	r1, #1
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f960 	bl	8005fec <USB_SetDevSpeed>
 8005d2c:	e003      	b.n	8005d36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d2e:	2103      	movs	r1, #3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f95b 	bl	8005fec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d36:	2110      	movs	r1, #16
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f8f3 	bl	8005f24 <USB_FlushTxFifo>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f91f 	bl	8005f8c <USB_FlushRxFifo>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5e:	461a      	mov	r2, r3
 8005d60:	2300      	movs	r3, #0
 8005d62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	461a      	mov	r2, r3
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	e043      	b.n	8005e0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d98:	d118      	bne.n	8005dcc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dac:	461a      	mov	r2, r3
 8005dae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	e013      	b.n	8005dde <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	e008      	b.n	8005dde <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	461a      	mov	r2, r3
 8005dec:	2300      	movs	r3, #0
 8005dee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	3301      	adds	r3, #1
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d3b7      	bcc.n	8005d82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	e043      	b.n	8005ea0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e2e:	d118      	bne.n	8005e62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	461a      	mov	r2, r3
 8005e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e013      	b.n	8005e74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	e008      	b.n	8005e74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	461a      	mov	r2, r3
 8005e70:	2300      	movs	r3, #0
 8005e72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e80:	461a      	mov	r2, r3
 8005e82:	2300      	movs	r3, #0
 8005e84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e92:	461a      	mov	r2, r3
 8005e94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d3b7      	bcc.n	8005e18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ec8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d105      	bne.n	8005edc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	f043 0210 	orr.w	r2, r3, #16
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699a      	ldr	r2, [r3, #24]
 8005ee0:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <USB_DevInit+0x2c4>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f043 0208 	orr.w	r2, r3, #8
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d107      	bne.n	8005f10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f08:	f043 0304 	orr.w	r3, r3, #4
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f1c:	b004      	add	sp, #16
 8005f1e:	4770      	bx	lr
 8005f20:	803c3800 	.word	0x803c3800

08005f24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3301      	adds	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <USB_FlushTxFifo+0x64>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d901      	bls.n	8005f44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e01b      	b.n	8005f7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	daf2      	bge.n	8005f32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	019b      	lsls	r3, r3, #6
 8005f54:	f043 0220 	orr.w	r2, r3, #32
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4a08      	ldr	r2, [pc, #32]	; (8005f88 <USB_FlushTxFifo+0x64>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e006      	b.n	8005f7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d0f0      	beq.n	8005f5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	00030d40 	.word	0x00030d40

08005f8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4a11      	ldr	r2, [pc, #68]	; (8005fe8 <USB_FlushRxFifo+0x5c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d901      	bls.n	8005faa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e018      	b.n	8005fdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	daf2      	bge.n	8005f98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2210      	movs	r2, #16
 8005fba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4a08      	ldr	r2, [pc, #32]	; (8005fe8 <USB_FlushRxFifo+0x5c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d901      	bls.n	8005fce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e006      	b.n	8005fdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0310 	and.w	r3, r3, #16
 8005fd6:	2b10      	cmp	r3, #16
 8005fd8:	d0f0      	beq.n	8005fbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	00030d40 	.word	0x00030d40

08005fec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800600c:	4313      	orrs	r3, r2
 800600e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006038:	f023 0303 	bic.w	r3, r3, #3
 800603c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800604c:	f043 0302 	orr.w	r3, r3, #2
 8006050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f003 0301 	and.w	r3, r3, #1
}
 8006070:	4618      	mov	r0, r3
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3301      	adds	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4a13      	ldr	r2, [pc, #76]	; (80060e0 <USB_CoreReset+0x64>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d901      	bls.n	800609a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e01b      	b.n	80060d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	daf2      	bge.n	8006088 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f043 0201 	orr.w	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3301      	adds	r3, #1
 80060b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4a09      	ldr	r2, [pc, #36]	; (80060e0 <USB_CoreReset+0x64>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d901      	bls.n	80060c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e006      	b.n	80060d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d0f0      	beq.n	80060b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	00030d40 	.word	0x00030d40

080060e4 <__errno>:
 80060e4:	4b01      	ldr	r3, [pc, #4]	; (80060ec <__errno+0x8>)
 80060e6:	6818      	ldr	r0, [r3, #0]
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	2000000c 	.word	0x2000000c

080060f0 <__libc_init_array>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	4d0d      	ldr	r5, [pc, #52]	; (8006128 <__libc_init_array+0x38>)
 80060f4:	4c0d      	ldr	r4, [pc, #52]	; (800612c <__libc_init_array+0x3c>)
 80060f6:	1b64      	subs	r4, r4, r5
 80060f8:	10a4      	asrs	r4, r4, #2
 80060fa:	2600      	movs	r6, #0
 80060fc:	42a6      	cmp	r6, r4
 80060fe:	d109      	bne.n	8006114 <__libc_init_array+0x24>
 8006100:	4d0b      	ldr	r5, [pc, #44]	; (8006130 <__libc_init_array+0x40>)
 8006102:	4c0c      	ldr	r4, [pc, #48]	; (8006134 <__libc_init_array+0x44>)
 8006104:	f000 ffae 	bl	8007064 <_init>
 8006108:	1b64      	subs	r4, r4, r5
 800610a:	10a4      	asrs	r4, r4, #2
 800610c:	2600      	movs	r6, #0
 800610e:	42a6      	cmp	r6, r4
 8006110:	d105      	bne.n	800611e <__libc_init_array+0x2e>
 8006112:	bd70      	pop	{r4, r5, r6, pc}
 8006114:	f855 3b04 	ldr.w	r3, [r5], #4
 8006118:	4798      	blx	r3
 800611a:	3601      	adds	r6, #1
 800611c:	e7ee      	b.n	80060fc <__libc_init_array+0xc>
 800611e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006122:	4798      	blx	r3
 8006124:	3601      	adds	r6, #1
 8006126:	e7f2      	b.n	800610e <__libc_init_array+0x1e>
 8006128:	08007248 	.word	0x08007248
 800612c:	08007248 	.word	0x08007248
 8006130:	08007248 	.word	0x08007248
 8006134:	0800724c 	.word	0x0800724c

08006138 <memset>:
 8006138:	4402      	add	r2, r0
 800613a:	4603      	mov	r3, r0
 800613c:	4293      	cmp	r3, r2
 800613e:	d100      	bne.n	8006142 <memset+0xa>
 8006140:	4770      	bx	lr
 8006142:	f803 1b01 	strb.w	r1, [r3], #1
 8006146:	e7f9      	b.n	800613c <memset+0x4>

08006148 <iprintf>:
 8006148:	b40f      	push	{r0, r1, r2, r3}
 800614a:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <iprintf+0x2c>)
 800614c:	b513      	push	{r0, r1, r4, lr}
 800614e:	681c      	ldr	r4, [r3, #0]
 8006150:	b124      	cbz	r4, 800615c <iprintf+0x14>
 8006152:	69a3      	ldr	r3, [r4, #24]
 8006154:	b913      	cbnz	r3, 800615c <iprintf+0x14>
 8006156:	4620      	mov	r0, r4
 8006158:	f000 f866 	bl	8006228 <__sinit>
 800615c:	ab05      	add	r3, sp, #20
 800615e:	9a04      	ldr	r2, [sp, #16]
 8006160:	68a1      	ldr	r1, [r4, #8]
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	4620      	mov	r0, r4
 8006166:	f000 f9bd 	bl	80064e4 <_vfiprintf_r>
 800616a:	b002      	add	sp, #8
 800616c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006170:	b004      	add	sp, #16
 8006172:	4770      	bx	lr
 8006174:	2000000c 	.word	0x2000000c

08006178 <std>:
 8006178:	2300      	movs	r3, #0
 800617a:	b510      	push	{r4, lr}
 800617c:	4604      	mov	r4, r0
 800617e:	e9c0 3300 	strd	r3, r3, [r0]
 8006182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006186:	6083      	str	r3, [r0, #8]
 8006188:	8181      	strh	r1, [r0, #12]
 800618a:	6643      	str	r3, [r0, #100]	; 0x64
 800618c:	81c2      	strh	r2, [r0, #14]
 800618e:	6183      	str	r3, [r0, #24]
 8006190:	4619      	mov	r1, r3
 8006192:	2208      	movs	r2, #8
 8006194:	305c      	adds	r0, #92	; 0x5c
 8006196:	f7ff ffcf 	bl	8006138 <memset>
 800619a:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <std+0x38>)
 800619c:	6263      	str	r3, [r4, #36]	; 0x24
 800619e:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <std+0x3c>)
 80061a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80061a2:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <std+0x40>)
 80061a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061a6:	4b05      	ldr	r3, [pc, #20]	; (80061bc <std+0x44>)
 80061a8:	6224      	str	r4, [r4, #32]
 80061aa:	6323      	str	r3, [r4, #48]	; 0x30
 80061ac:	bd10      	pop	{r4, pc}
 80061ae:	bf00      	nop
 80061b0:	08006a8d 	.word	0x08006a8d
 80061b4:	08006aaf 	.word	0x08006aaf
 80061b8:	08006ae7 	.word	0x08006ae7
 80061bc:	08006b0b 	.word	0x08006b0b

080061c0 <_cleanup_r>:
 80061c0:	4901      	ldr	r1, [pc, #4]	; (80061c8 <_cleanup_r+0x8>)
 80061c2:	f000 b8af 	b.w	8006324 <_fwalk_reent>
 80061c6:	bf00      	nop
 80061c8:	08006de5 	.word	0x08006de5

080061cc <__sfmoreglue>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	2268      	movs	r2, #104	; 0x68
 80061d0:	1e4d      	subs	r5, r1, #1
 80061d2:	4355      	muls	r5, r2
 80061d4:	460e      	mov	r6, r1
 80061d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061da:	f000 f8e5 	bl	80063a8 <_malloc_r>
 80061de:	4604      	mov	r4, r0
 80061e0:	b140      	cbz	r0, 80061f4 <__sfmoreglue+0x28>
 80061e2:	2100      	movs	r1, #0
 80061e4:	e9c0 1600 	strd	r1, r6, [r0]
 80061e8:	300c      	adds	r0, #12
 80061ea:	60a0      	str	r0, [r4, #8]
 80061ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061f0:	f7ff ffa2 	bl	8006138 <memset>
 80061f4:	4620      	mov	r0, r4
 80061f6:	bd70      	pop	{r4, r5, r6, pc}

080061f8 <__sfp_lock_acquire>:
 80061f8:	4801      	ldr	r0, [pc, #4]	; (8006200 <__sfp_lock_acquire+0x8>)
 80061fa:	f000 b8b3 	b.w	8006364 <__retarget_lock_acquire_recursive>
 80061fe:	bf00      	nop
 8006200:	2000088d 	.word	0x2000088d

08006204 <__sfp_lock_release>:
 8006204:	4801      	ldr	r0, [pc, #4]	; (800620c <__sfp_lock_release+0x8>)
 8006206:	f000 b8ae 	b.w	8006366 <__retarget_lock_release_recursive>
 800620a:	bf00      	nop
 800620c:	2000088d 	.word	0x2000088d

08006210 <__sinit_lock_acquire>:
 8006210:	4801      	ldr	r0, [pc, #4]	; (8006218 <__sinit_lock_acquire+0x8>)
 8006212:	f000 b8a7 	b.w	8006364 <__retarget_lock_acquire_recursive>
 8006216:	bf00      	nop
 8006218:	2000088e 	.word	0x2000088e

0800621c <__sinit_lock_release>:
 800621c:	4801      	ldr	r0, [pc, #4]	; (8006224 <__sinit_lock_release+0x8>)
 800621e:	f000 b8a2 	b.w	8006366 <__retarget_lock_release_recursive>
 8006222:	bf00      	nop
 8006224:	2000088e 	.word	0x2000088e

08006228 <__sinit>:
 8006228:	b510      	push	{r4, lr}
 800622a:	4604      	mov	r4, r0
 800622c:	f7ff fff0 	bl	8006210 <__sinit_lock_acquire>
 8006230:	69a3      	ldr	r3, [r4, #24]
 8006232:	b11b      	cbz	r3, 800623c <__sinit+0x14>
 8006234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006238:	f7ff bff0 	b.w	800621c <__sinit_lock_release>
 800623c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006240:	6523      	str	r3, [r4, #80]	; 0x50
 8006242:	4b13      	ldr	r3, [pc, #76]	; (8006290 <__sinit+0x68>)
 8006244:	4a13      	ldr	r2, [pc, #76]	; (8006294 <__sinit+0x6c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	62a2      	str	r2, [r4, #40]	; 0x28
 800624a:	42a3      	cmp	r3, r4
 800624c:	bf04      	itt	eq
 800624e:	2301      	moveq	r3, #1
 8006250:	61a3      	streq	r3, [r4, #24]
 8006252:	4620      	mov	r0, r4
 8006254:	f000 f820 	bl	8006298 <__sfp>
 8006258:	6060      	str	r0, [r4, #4]
 800625a:	4620      	mov	r0, r4
 800625c:	f000 f81c 	bl	8006298 <__sfp>
 8006260:	60a0      	str	r0, [r4, #8]
 8006262:	4620      	mov	r0, r4
 8006264:	f000 f818 	bl	8006298 <__sfp>
 8006268:	2200      	movs	r2, #0
 800626a:	60e0      	str	r0, [r4, #12]
 800626c:	2104      	movs	r1, #4
 800626e:	6860      	ldr	r0, [r4, #4]
 8006270:	f7ff ff82 	bl	8006178 <std>
 8006274:	68a0      	ldr	r0, [r4, #8]
 8006276:	2201      	movs	r2, #1
 8006278:	2109      	movs	r1, #9
 800627a:	f7ff ff7d 	bl	8006178 <std>
 800627e:	68e0      	ldr	r0, [r4, #12]
 8006280:	2202      	movs	r2, #2
 8006282:	2112      	movs	r1, #18
 8006284:	f7ff ff78 	bl	8006178 <std>
 8006288:	2301      	movs	r3, #1
 800628a:	61a3      	str	r3, [r4, #24]
 800628c:	e7d2      	b.n	8006234 <__sinit+0xc>
 800628e:	bf00      	nop
 8006290:	080071a8 	.word	0x080071a8
 8006294:	080061c1 	.word	0x080061c1

08006298 <__sfp>:
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	4607      	mov	r7, r0
 800629c:	f7ff ffac 	bl	80061f8 <__sfp_lock_acquire>
 80062a0:	4b1e      	ldr	r3, [pc, #120]	; (800631c <__sfp+0x84>)
 80062a2:	681e      	ldr	r6, [r3, #0]
 80062a4:	69b3      	ldr	r3, [r6, #24]
 80062a6:	b913      	cbnz	r3, 80062ae <__sfp+0x16>
 80062a8:	4630      	mov	r0, r6
 80062aa:	f7ff ffbd 	bl	8006228 <__sinit>
 80062ae:	3648      	adds	r6, #72	; 0x48
 80062b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	d503      	bpl.n	80062c0 <__sfp+0x28>
 80062b8:	6833      	ldr	r3, [r6, #0]
 80062ba:	b30b      	cbz	r3, 8006300 <__sfp+0x68>
 80062bc:	6836      	ldr	r6, [r6, #0]
 80062be:	e7f7      	b.n	80062b0 <__sfp+0x18>
 80062c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062c4:	b9d5      	cbnz	r5, 80062fc <__sfp+0x64>
 80062c6:	4b16      	ldr	r3, [pc, #88]	; (8006320 <__sfp+0x88>)
 80062c8:	60e3      	str	r3, [r4, #12]
 80062ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062ce:	6665      	str	r5, [r4, #100]	; 0x64
 80062d0:	f000 f847 	bl	8006362 <__retarget_lock_init_recursive>
 80062d4:	f7ff ff96 	bl	8006204 <__sfp_lock_release>
 80062d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062e0:	6025      	str	r5, [r4, #0]
 80062e2:	61a5      	str	r5, [r4, #24]
 80062e4:	2208      	movs	r2, #8
 80062e6:	4629      	mov	r1, r5
 80062e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062ec:	f7ff ff24 	bl	8006138 <memset>
 80062f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062f8:	4620      	mov	r0, r4
 80062fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062fc:	3468      	adds	r4, #104	; 0x68
 80062fe:	e7d9      	b.n	80062b4 <__sfp+0x1c>
 8006300:	2104      	movs	r1, #4
 8006302:	4638      	mov	r0, r7
 8006304:	f7ff ff62 	bl	80061cc <__sfmoreglue>
 8006308:	4604      	mov	r4, r0
 800630a:	6030      	str	r0, [r6, #0]
 800630c:	2800      	cmp	r0, #0
 800630e:	d1d5      	bne.n	80062bc <__sfp+0x24>
 8006310:	f7ff ff78 	bl	8006204 <__sfp_lock_release>
 8006314:	230c      	movs	r3, #12
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	e7ee      	b.n	80062f8 <__sfp+0x60>
 800631a:	bf00      	nop
 800631c:	080071a8 	.word	0x080071a8
 8006320:	ffff0001 	.word	0xffff0001

08006324 <_fwalk_reent>:
 8006324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006328:	4606      	mov	r6, r0
 800632a:	4688      	mov	r8, r1
 800632c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006330:	2700      	movs	r7, #0
 8006332:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006336:	f1b9 0901 	subs.w	r9, r9, #1
 800633a:	d505      	bpl.n	8006348 <_fwalk_reent+0x24>
 800633c:	6824      	ldr	r4, [r4, #0]
 800633e:	2c00      	cmp	r4, #0
 8006340:	d1f7      	bne.n	8006332 <_fwalk_reent+0xe>
 8006342:	4638      	mov	r0, r7
 8006344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006348:	89ab      	ldrh	r3, [r5, #12]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d907      	bls.n	800635e <_fwalk_reent+0x3a>
 800634e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006352:	3301      	adds	r3, #1
 8006354:	d003      	beq.n	800635e <_fwalk_reent+0x3a>
 8006356:	4629      	mov	r1, r5
 8006358:	4630      	mov	r0, r6
 800635a:	47c0      	blx	r8
 800635c:	4307      	orrs	r7, r0
 800635e:	3568      	adds	r5, #104	; 0x68
 8006360:	e7e9      	b.n	8006336 <_fwalk_reent+0x12>

08006362 <__retarget_lock_init_recursive>:
 8006362:	4770      	bx	lr

08006364 <__retarget_lock_acquire_recursive>:
 8006364:	4770      	bx	lr

08006366 <__retarget_lock_release_recursive>:
 8006366:	4770      	bx	lr

08006368 <sbrk_aligned>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	4e0e      	ldr	r6, [pc, #56]	; (80063a4 <sbrk_aligned+0x3c>)
 800636c:	460c      	mov	r4, r1
 800636e:	6831      	ldr	r1, [r6, #0]
 8006370:	4605      	mov	r5, r0
 8006372:	b911      	cbnz	r1, 800637a <sbrk_aligned+0x12>
 8006374:	f000 fb7a 	bl	8006a6c <_sbrk_r>
 8006378:	6030      	str	r0, [r6, #0]
 800637a:	4621      	mov	r1, r4
 800637c:	4628      	mov	r0, r5
 800637e:	f000 fb75 	bl	8006a6c <_sbrk_r>
 8006382:	1c43      	adds	r3, r0, #1
 8006384:	d00a      	beq.n	800639c <sbrk_aligned+0x34>
 8006386:	1cc4      	adds	r4, r0, #3
 8006388:	f024 0403 	bic.w	r4, r4, #3
 800638c:	42a0      	cmp	r0, r4
 800638e:	d007      	beq.n	80063a0 <sbrk_aligned+0x38>
 8006390:	1a21      	subs	r1, r4, r0
 8006392:	4628      	mov	r0, r5
 8006394:	f000 fb6a 	bl	8006a6c <_sbrk_r>
 8006398:	3001      	adds	r0, #1
 800639a:	d101      	bne.n	80063a0 <sbrk_aligned+0x38>
 800639c:	f04f 34ff 	mov.w	r4, #4294967295
 80063a0:	4620      	mov	r0, r4
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	20000894 	.word	0x20000894

080063a8 <_malloc_r>:
 80063a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ac:	1ccd      	adds	r5, r1, #3
 80063ae:	f025 0503 	bic.w	r5, r5, #3
 80063b2:	3508      	adds	r5, #8
 80063b4:	2d0c      	cmp	r5, #12
 80063b6:	bf38      	it	cc
 80063b8:	250c      	movcc	r5, #12
 80063ba:	2d00      	cmp	r5, #0
 80063bc:	4607      	mov	r7, r0
 80063be:	db01      	blt.n	80063c4 <_malloc_r+0x1c>
 80063c0:	42a9      	cmp	r1, r5
 80063c2:	d905      	bls.n	80063d0 <_malloc_r+0x28>
 80063c4:	230c      	movs	r3, #12
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	2600      	movs	r6, #0
 80063ca:	4630      	mov	r0, r6
 80063cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063d0:	4e2e      	ldr	r6, [pc, #184]	; (800648c <_malloc_r+0xe4>)
 80063d2:	f000 fdbb 	bl	8006f4c <__malloc_lock>
 80063d6:	6833      	ldr	r3, [r6, #0]
 80063d8:	461c      	mov	r4, r3
 80063da:	bb34      	cbnz	r4, 800642a <_malloc_r+0x82>
 80063dc:	4629      	mov	r1, r5
 80063de:	4638      	mov	r0, r7
 80063e0:	f7ff ffc2 	bl	8006368 <sbrk_aligned>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	4604      	mov	r4, r0
 80063e8:	d14d      	bne.n	8006486 <_malloc_r+0xde>
 80063ea:	6834      	ldr	r4, [r6, #0]
 80063ec:	4626      	mov	r6, r4
 80063ee:	2e00      	cmp	r6, #0
 80063f0:	d140      	bne.n	8006474 <_malloc_r+0xcc>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	4631      	mov	r1, r6
 80063f6:	4638      	mov	r0, r7
 80063f8:	eb04 0803 	add.w	r8, r4, r3
 80063fc:	f000 fb36 	bl	8006a6c <_sbrk_r>
 8006400:	4580      	cmp	r8, r0
 8006402:	d13a      	bne.n	800647a <_malloc_r+0xd2>
 8006404:	6821      	ldr	r1, [r4, #0]
 8006406:	3503      	adds	r5, #3
 8006408:	1a6d      	subs	r5, r5, r1
 800640a:	f025 0503 	bic.w	r5, r5, #3
 800640e:	3508      	adds	r5, #8
 8006410:	2d0c      	cmp	r5, #12
 8006412:	bf38      	it	cc
 8006414:	250c      	movcc	r5, #12
 8006416:	4629      	mov	r1, r5
 8006418:	4638      	mov	r0, r7
 800641a:	f7ff ffa5 	bl	8006368 <sbrk_aligned>
 800641e:	3001      	adds	r0, #1
 8006420:	d02b      	beq.n	800647a <_malloc_r+0xd2>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	442b      	add	r3, r5
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	e00e      	b.n	8006448 <_malloc_r+0xa0>
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	1b52      	subs	r2, r2, r5
 800642e:	d41e      	bmi.n	800646e <_malloc_r+0xc6>
 8006430:	2a0b      	cmp	r2, #11
 8006432:	d916      	bls.n	8006462 <_malloc_r+0xba>
 8006434:	1961      	adds	r1, r4, r5
 8006436:	42a3      	cmp	r3, r4
 8006438:	6025      	str	r5, [r4, #0]
 800643a:	bf18      	it	ne
 800643c:	6059      	strne	r1, [r3, #4]
 800643e:	6863      	ldr	r3, [r4, #4]
 8006440:	bf08      	it	eq
 8006442:	6031      	streq	r1, [r6, #0]
 8006444:	5162      	str	r2, [r4, r5]
 8006446:	604b      	str	r3, [r1, #4]
 8006448:	4638      	mov	r0, r7
 800644a:	f104 060b 	add.w	r6, r4, #11
 800644e:	f000 fd83 	bl	8006f58 <__malloc_unlock>
 8006452:	f026 0607 	bic.w	r6, r6, #7
 8006456:	1d23      	adds	r3, r4, #4
 8006458:	1af2      	subs	r2, r6, r3
 800645a:	d0b6      	beq.n	80063ca <_malloc_r+0x22>
 800645c:	1b9b      	subs	r3, r3, r6
 800645e:	50a3      	str	r3, [r4, r2]
 8006460:	e7b3      	b.n	80063ca <_malloc_r+0x22>
 8006462:	6862      	ldr	r2, [r4, #4]
 8006464:	42a3      	cmp	r3, r4
 8006466:	bf0c      	ite	eq
 8006468:	6032      	streq	r2, [r6, #0]
 800646a:	605a      	strne	r2, [r3, #4]
 800646c:	e7ec      	b.n	8006448 <_malloc_r+0xa0>
 800646e:	4623      	mov	r3, r4
 8006470:	6864      	ldr	r4, [r4, #4]
 8006472:	e7b2      	b.n	80063da <_malloc_r+0x32>
 8006474:	4634      	mov	r4, r6
 8006476:	6876      	ldr	r6, [r6, #4]
 8006478:	e7b9      	b.n	80063ee <_malloc_r+0x46>
 800647a:	230c      	movs	r3, #12
 800647c:	603b      	str	r3, [r7, #0]
 800647e:	4638      	mov	r0, r7
 8006480:	f000 fd6a 	bl	8006f58 <__malloc_unlock>
 8006484:	e7a1      	b.n	80063ca <_malloc_r+0x22>
 8006486:	6025      	str	r5, [r4, #0]
 8006488:	e7de      	b.n	8006448 <_malloc_r+0xa0>
 800648a:	bf00      	nop
 800648c:	20000890 	.word	0x20000890

08006490 <__sfputc_r>:
 8006490:	6893      	ldr	r3, [r2, #8]
 8006492:	3b01      	subs	r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	b410      	push	{r4}
 8006498:	6093      	str	r3, [r2, #8]
 800649a:	da08      	bge.n	80064ae <__sfputc_r+0x1e>
 800649c:	6994      	ldr	r4, [r2, #24]
 800649e:	42a3      	cmp	r3, r4
 80064a0:	db01      	blt.n	80064a6 <__sfputc_r+0x16>
 80064a2:	290a      	cmp	r1, #10
 80064a4:	d103      	bne.n	80064ae <__sfputc_r+0x1e>
 80064a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064aa:	f000 bb33 	b.w	8006b14 <__swbuf_r>
 80064ae:	6813      	ldr	r3, [r2, #0]
 80064b0:	1c58      	adds	r0, r3, #1
 80064b2:	6010      	str	r0, [r2, #0]
 80064b4:	7019      	strb	r1, [r3, #0]
 80064b6:	4608      	mov	r0, r1
 80064b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064bc:	4770      	bx	lr

080064be <__sfputs_r>:
 80064be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c0:	4606      	mov	r6, r0
 80064c2:	460f      	mov	r7, r1
 80064c4:	4614      	mov	r4, r2
 80064c6:	18d5      	adds	r5, r2, r3
 80064c8:	42ac      	cmp	r4, r5
 80064ca:	d101      	bne.n	80064d0 <__sfputs_r+0x12>
 80064cc:	2000      	movs	r0, #0
 80064ce:	e007      	b.n	80064e0 <__sfputs_r+0x22>
 80064d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d4:	463a      	mov	r2, r7
 80064d6:	4630      	mov	r0, r6
 80064d8:	f7ff ffda 	bl	8006490 <__sfputc_r>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d1f3      	bne.n	80064c8 <__sfputs_r+0xa>
 80064e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064e4 <_vfiprintf_r>:
 80064e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e8:	460d      	mov	r5, r1
 80064ea:	b09d      	sub	sp, #116	; 0x74
 80064ec:	4614      	mov	r4, r2
 80064ee:	4698      	mov	r8, r3
 80064f0:	4606      	mov	r6, r0
 80064f2:	b118      	cbz	r0, 80064fc <_vfiprintf_r+0x18>
 80064f4:	6983      	ldr	r3, [r0, #24]
 80064f6:	b90b      	cbnz	r3, 80064fc <_vfiprintf_r+0x18>
 80064f8:	f7ff fe96 	bl	8006228 <__sinit>
 80064fc:	4b89      	ldr	r3, [pc, #548]	; (8006724 <_vfiprintf_r+0x240>)
 80064fe:	429d      	cmp	r5, r3
 8006500:	d11b      	bne.n	800653a <_vfiprintf_r+0x56>
 8006502:	6875      	ldr	r5, [r6, #4]
 8006504:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006506:	07d9      	lsls	r1, r3, #31
 8006508:	d405      	bmi.n	8006516 <_vfiprintf_r+0x32>
 800650a:	89ab      	ldrh	r3, [r5, #12]
 800650c:	059a      	lsls	r2, r3, #22
 800650e:	d402      	bmi.n	8006516 <_vfiprintf_r+0x32>
 8006510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006512:	f7ff ff27 	bl	8006364 <__retarget_lock_acquire_recursive>
 8006516:	89ab      	ldrh	r3, [r5, #12]
 8006518:	071b      	lsls	r3, r3, #28
 800651a:	d501      	bpl.n	8006520 <_vfiprintf_r+0x3c>
 800651c:	692b      	ldr	r3, [r5, #16]
 800651e:	b9eb      	cbnz	r3, 800655c <_vfiprintf_r+0x78>
 8006520:	4629      	mov	r1, r5
 8006522:	4630      	mov	r0, r6
 8006524:	f000 fb5a 	bl	8006bdc <__swsetup_r>
 8006528:	b1c0      	cbz	r0, 800655c <_vfiprintf_r+0x78>
 800652a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800652c:	07dc      	lsls	r4, r3, #31
 800652e:	d50e      	bpl.n	800654e <_vfiprintf_r+0x6a>
 8006530:	f04f 30ff 	mov.w	r0, #4294967295
 8006534:	b01d      	add	sp, #116	; 0x74
 8006536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653a:	4b7b      	ldr	r3, [pc, #492]	; (8006728 <_vfiprintf_r+0x244>)
 800653c:	429d      	cmp	r5, r3
 800653e:	d101      	bne.n	8006544 <_vfiprintf_r+0x60>
 8006540:	68b5      	ldr	r5, [r6, #8]
 8006542:	e7df      	b.n	8006504 <_vfiprintf_r+0x20>
 8006544:	4b79      	ldr	r3, [pc, #484]	; (800672c <_vfiprintf_r+0x248>)
 8006546:	429d      	cmp	r5, r3
 8006548:	bf08      	it	eq
 800654a:	68f5      	ldreq	r5, [r6, #12]
 800654c:	e7da      	b.n	8006504 <_vfiprintf_r+0x20>
 800654e:	89ab      	ldrh	r3, [r5, #12]
 8006550:	0598      	lsls	r0, r3, #22
 8006552:	d4ed      	bmi.n	8006530 <_vfiprintf_r+0x4c>
 8006554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006556:	f7ff ff06 	bl	8006366 <__retarget_lock_release_recursive>
 800655a:	e7e9      	b.n	8006530 <_vfiprintf_r+0x4c>
 800655c:	2300      	movs	r3, #0
 800655e:	9309      	str	r3, [sp, #36]	; 0x24
 8006560:	2320      	movs	r3, #32
 8006562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006566:	f8cd 800c 	str.w	r8, [sp, #12]
 800656a:	2330      	movs	r3, #48	; 0x30
 800656c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006730 <_vfiprintf_r+0x24c>
 8006570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006574:	f04f 0901 	mov.w	r9, #1
 8006578:	4623      	mov	r3, r4
 800657a:	469a      	mov	sl, r3
 800657c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006580:	b10a      	cbz	r2, 8006586 <_vfiprintf_r+0xa2>
 8006582:	2a25      	cmp	r2, #37	; 0x25
 8006584:	d1f9      	bne.n	800657a <_vfiprintf_r+0x96>
 8006586:	ebba 0b04 	subs.w	fp, sl, r4
 800658a:	d00b      	beq.n	80065a4 <_vfiprintf_r+0xc0>
 800658c:	465b      	mov	r3, fp
 800658e:	4622      	mov	r2, r4
 8006590:	4629      	mov	r1, r5
 8006592:	4630      	mov	r0, r6
 8006594:	f7ff ff93 	bl	80064be <__sfputs_r>
 8006598:	3001      	adds	r0, #1
 800659a:	f000 80aa 	beq.w	80066f2 <_vfiprintf_r+0x20e>
 800659e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065a0:	445a      	add	r2, fp
 80065a2:	9209      	str	r2, [sp, #36]	; 0x24
 80065a4:	f89a 3000 	ldrb.w	r3, [sl]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 80a2 	beq.w	80066f2 <_vfiprintf_r+0x20e>
 80065ae:	2300      	movs	r3, #0
 80065b0:	f04f 32ff 	mov.w	r2, #4294967295
 80065b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065b8:	f10a 0a01 	add.w	sl, sl, #1
 80065bc:	9304      	str	r3, [sp, #16]
 80065be:	9307      	str	r3, [sp, #28]
 80065c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065c4:	931a      	str	r3, [sp, #104]	; 0x68
 80065c6:	4654      	mov	r4, sl
 80065c8:	2205      	movs	r2, #5
 80065ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ce:	4858      	ldr	r0, [pc, #352]	; (8006730 <_vfiprintf_r+0x24c>)
 80065d0:	f7f9 fdfe 	bl	80001d0 <memchr>
 80065d4:	9a04      	ldr	r2, [sp, #16]
 80065d6:	b9d8      	cbnz	r0, 8006610 <_vfiprintf_r+0x12c>
 80065d8:	06d1      	lsls	r1, r2, #27
 80065da:	bf44      	itt	mi
 80065dc:	2320      	movmi	r3, #32
 80065de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065e2:	0713      	lsls	r3, r2, #28
 80065e4:	bf44      	itt	mi
 80065e6:	232b      	movmi	r3, #43	; 0x2b
 80065e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065ec:	f89a 3000 	ldrb.w	r3, [sl]
 80065f0:	2b2a      	cmp	r3, #42	; 0x2a
 80065f2:	d015      	beq.n	8006620 <_vfiprintf_r+0x13c>
 80065f4:	9a07      	ldr	r2, [sp, #28]
 80065f6:	4654      	mov	r4, sl
 80065f8:	2000      	movs	r0, #0
 80065fa:	f04f 0c0a 	mov.w	ip, #10
 80065fe:	4621      	mov	r1, r4
 8006600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006604:	3b30      	subs	r3, #48	; 0x30
 8006606:	2b09      	cmp	r3, #9
 8006608:	d94e      	bls.n	80066a8 <_vfiprintf_r+0x1c4>
 800660a:	b1b0      	cbz	r0, 800663a <_vfiprintf_r+0x156>
 800660c:	9207      	str	r2, [sp, #28]
 800660e:	e014      	b.n	800663a <_vfiprintf_r+0x156>
 8006610:	eba0 0308 	sub.w	r3, r0, r8
 8006614:	fa09 f303 	lsl.w	r3, r9, r3
 8006618:	4313      	orrs	r3, r2
 800661a:	9304      	str	r3, [sp, #16]
 800661c:	46a2      	mov	sl, r4
 800661e:	e7d2      	b.n	80065c6 <_vfiprintf_r+0xe2>
 8006620:	9b03      	ldr	r3, [sp, #12]
 8006622:	1d19      	adds	r1, r3, #4
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	9103      	str	r1, [sp, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	bfbb      	ittet	lt
 800662c:	425b      	neglt	r3, r3
 800662e:	f042 0202 	orrlt.w	r2, r2, #2
 8006632:	9307      	strge	r3, [sp, #28]
 8006634:	9307      	strlt	r3, [sp, #28]
 8006636:	bfb8      	it	lt
 8006638:	9204      	strlt	r2, [sp, #16]
 800663a:	7823      	ldrb	r3, [r4, #0]
 800663c:	2b2e      	cmp	r3, #46	; 0x2e
 800663e:	d10c      	bne.n	800665a <_vfiprintf_r+0x176>
 8006640:	7863      	ldrb	r3, [r4, #1]
 8006642:	2b2a      	cmp	r3, #42	; 0x2a
 8006644:	d135      	bne.n	80066b2 <_vfiprintf_r+0x1ce>
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	1d1a      	adds	r2, r3, #4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	9203      	str	r2, [sp, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	bfb8      	it	lt
 8006652:	f04f 33ff 	movlt.w	r3, #4294967295
 8006656:	3402      	adds	r4, #2
 8006658:	9305      	str	r3, [sp, #20]
 800665a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006740 <_vfiprintf_r+0x25c>
 800665e:	7821      	ldrb	r1, [r4, #0]
 8006660:	2203      	movs	r2, #3
 8006662:	4650      	mov	r0, sl
 8006664:	f7f9 fdb4 	bl	80001d0 <memchr>
 8006668:	b140      	cbz	r0, 800667c <_vfiprintf_r+0x198>
 800666a:	2340      	movs	r3, #64	; 0x40
 800666c:	eba0 000a 	sub.w	r0, r0, sl
 8006670:	fa03 f000 	lsl.w	r0, r3, r0
 8006674:	9b04      	ldr	r3, [sp, #16]
 8006676:	4303      	orrs	r3, r0
 8006678:	3401      	adds	r4, #1
 800667a:	9304      	str	r3, [sp, #16]
 800667c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006680:	482c      	ldr	r0, [pc, #176]	; (8006734 <_vfiprintf_r+0x250>)
 8006682:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006686:	2206      	movs	r2, #6
 8006688:	f7f9 fda2 	bl	80001d0 <memchr>
 800668c:	2800      	cmp	r0, #0
 800668e:	d03f      	beq.n	8006710 <_vfiprintf_r+0x22c>
 8006690:	4b29      	ldr	r3, [pc, #164]	; (8006738 <_vfiprintf_r+0x254>)
 8006692:	bb1b      	cbnz	r3, 80066dc <_vfiprintf_r+0x1f8>
 8006694:	9b03      	ldr	r3, [sp, #12]
 8006696:	3307      	adds	r3, #7
 8006698:	f023 0307 	bic.w	r3, r3, #7
 800669c:	3308      	adds	r3, #8
 800669e:	9303      	str	r3, [sp, #12]
 80066a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a2:	443b      	add	r3, r7
 80066a4:	9309      	str	r3, [sp, #36]	; 0x24
 80066a6:	e767      	b.n	8006578 <_vfiprintf_r+0x94>
 80066a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80066ac:	460c      	mov	r4, r1
 80066ae:	2001      	movs	r0, #1
 80066b0:	e7a5      	b.n	80065fe <_vfiprintf_r+0x11a>
 80066b2:	2300      	movs	r3, #0
 80066b4:	3401      	adds	r4, #1
 80066b6:	9305      	str	r3, [sp, #20]
 80066b8:	4619      	mov	r1, r3
 80066ba:	f04f 0c0a 	mov.w	ip, #10
 80066be:	4620      	mov	r0, r4
 80066c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066c4:	3a30      	subs	r2, #48	; 0x30
 80066c6:	2a09      	cmp	r2, #9
 80066c8:	d903      	bls.n	80066d2 <_vfiprintf_r+0x1ee>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0c5      	beq.n	800665a <_vfiprintf_r+0x176>
 80066ce:	9105      	str	r1, [sp, #20]
 80066d0:	e7c3      	b.n	800665a <_vfiprintf_r+0x176>
 80066d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80066d6:	4604      	mov	r4, r0
 80066d8:	2301      	movs	r3, #1
 80066da:	e7f0      	b.n	80066be <_vfiprintf_r+0x1da>
 80066dc:	ab03      	add	r3, sp, #12
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	462a      	mov	r2, r5
 80066e2:	4b16      	ldr	r3, [pc, #88]	; (800673c <_vfiprintf_r+0x258>)
 80066e4:	a904      	add	r1, sp, #16
 80066e6:	4630      	mov	r0, r6
 80066e8:	f3af 8000 	nop.w
 80066ec:	4607      	mov	r7, r0
 80066ee:	1c78      	adds	r0, r7, #1
 80066f0:	d1d6      	bne.n	80066a0 <_vfiprintf_r+0x1bc>
 80066f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066f4:	07d9      	lsls	r1, r3, #31
 80066f6:	d405      	bmi.n	8006704 <_vfiprintf_r+0x220>
 80066f8:	89ab      	ldrh	r3, [r5, #12]
 80066fa:	059a      	lsls	r2, r3, #22
 80066fc:	d402      	bmi.n	8006704 <_vfiprintf_r+0x220>
 80066fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006700:	f7ff fe31 	bl	8006366 <__retarget_lock_release_recursive>
 8006704:	89ab      	ldrh	r3, [r5, #12]
 8006706:	065b      	lsls	r3, r3, #25
 8006708:	f53f af12 	bmi.w	8006530 <_vfiprintf_r+0x4c>
 800670c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800670e:	e711      	b.n	8006534 <_vfiprintf_r+0x50>
 8006710:	ab03      	add	r3, sp, #12
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	462a      	mov	r2, r5
 8006716:	4b09      	ldr	r3, [pc, #36]	; (800673c <_vfiprintf_r+0x258>)
 8006718:	a904      	add	r1, sp, #16
 800671a:	4630      	mov	r0, r6
 800671c:	f000 f880 	bl	8006820 <_printf_i>
 8006720:	e7e4      	b.n	80066ec <_vfiprintf_r+0x208>
 8006722:	bf00      	nop
 8006724:	080071cc 	.word	0x080071cc
 8006728:	080071ec 	.word	0x080071ec
 800672c:	080071ac 	.word	0x080071ac
 8006730:	0800720c 	.word	0x0800720c
 8006734:	08007216 	.word	0x08007216
 8006738:	00000000 	.word	0x00000000
 800673c:	080064bf 	.word	0x080064bf
 8006740:	08007212 	.word	0x08007212

08006744 <_printf_common>:
 8006744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006748:	4616      	mov	r6, r2
 800674a:	4699      	mov	r9, r3
 800674c:	688a      	ldr	r2, [r1, #8]
 800674e:	690b      	ldr	r3, [r1, #16]
 8006750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006754:	4293      	cmp	r3, r2
 8006756:	bfb8      	it	lt
 8006758:	4613      	movlt	r3, r2
 800675a:	6033      	str	r3, [r6, #0]
 800675c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006760:	4607      	mov	r7, r0
 8006762:	460c      	mov	r4, r1
 8006764:	b10a      	cbz	r2, 800676a <_printf_common+0x26>
 8006766:	3301      	adds	r3, #1
 8006768:	6033      	str	r3, [r6, #0]
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	0699      	lsls	r1, r3, #26
 800676e:	bf42      	ittt	mi
 8006770:	6833      	ldrmi	r3, [r6, #0]
 8006772:	3302      	addmi	r3, #2
 8006774:	6033      	strmi	r3, [r6, #0]
 8006776:	6825      	ldr	r5, [r4, #0]
 8006778:	f015 0506 	ands.w	r5, r5, #6
 800677c:	d106      	bne.n	800678c <_printf_common+0x48>
 800677e:	f104 0a19 	add.w	sl, r4, #25
 8006782:	68e3      	ldr	r3, [r4, #12]
 8006784:	6832      	ldr	r2, [r6, #0]
 8006786:	1a9b      	subs	r3, r3, r2
 8006788:	42ab      	cmp	r3, r5
 800678a:	dc26      	bgt.n	80067da <_printf_common+0x96>
 800678c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006790:	1e13      	subs	r3, r2, #0
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	bf18      	it	ne
 8006796:	2301      	movne	r3, #1
 8006798:	0692      	lsls	r2, r2, #26
 800679a:	d42b      	bmi.n	80067f4 <_printf_common+0xb0>
 800679c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067a0:	4649      	mov	r1, r9
 80067a2:	4638      	mov	r0, r7
 80067a4:	47c0      	blx	r8
 80067a6:	3001      	adds	r0, #1
 80067a8:	d01e      	beq.n	80067e8 <_printf_common+0xa4>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	68e5      	ldr	r5, [r4, #12]
 80067ae:	6832      	ldr	r2, [r6, #0]
 80067b0:	f003 0306 	and.w	r3, r3, #6
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	bf08      	it	eq
 80067b8:	1aad      	subeq	r5, r5, r2
 80067ba:	68a3      	ldr	r3, [r4, #8]
 80067bc:	6922      	ldr	r2, [r4, #16]
 80067be:	bf0c      	ite	eq
 80067c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067c4:	2500      	movne	r5, #0
 80067c6:	4293      	cmp	r3, r2
 80067c8:	bfc4      	itt	gt
 80067ca:	1a9b      	subgt	r3, r3, r2
 80067cc:	18ed      	addgt	r5, r5, r3
 80067ce:	2600      	movs	r6, #0
 80067d0:	341a      	adds	r4, #26
 80067d2:	42b5      	cmp	r5, r6
 80067d4:	d11a      	bne.n	800680c <_printf_common+0xc8>
 80067d6:	2000      	movs	r0, #0
 80067d8:	e008      	b.n	80067ec <_printf_common+0xa8>
 80067da:	2301      	movs	r3, #1
 80067dc:	4652      	mov	r2, sl
 80067de:	4649      	mov	r1, r9
 80067e0:	4638      	mov	r0, r7
 80067e2:	47c0      	blx	r8
 80067e4:	3001      	adds	r0, #1
 80067e6:	d103      	bne.n	80067f0 <_printf_common+0xac>
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f0:	3501      	adds	r5, #1
 80067f2:	e7c6      	b.n	8006782 <_printf_common+0x3e>
 80067f4:	18e1      	adds	r1, r4, r3
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	2030      	movs	r0, #48	; 0x30
 80067fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067fe:	4422      	add	r2, r4
 8006800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006808:	3302      	adds	r3, #2
 800680a:	e7c7      	b.n	800679c <_printf_common+0x58>
 800680c:	2301      	movs	r3, #1
 800680e:	4622      	mov	r2, r4
 8006810:	4649      	mov	r1, r9
 8006812:	4638      	mov	r0, r7
 8006814:	47c0      	blx	r8
 8006816:	3001      	adds	r0, #1
 8006818:	d0e6      	beq.n	80067e8 <_printf_common+0xa4>
 800681a:	3601      	adds	r6, #1
 800681c:	e7d9      	b.n	80067d2 <_printf_common+0x8e>
	...

08006820 <_printf_i>:
 8006820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006824:	7e0f      	ldrb	r7, [r1, #24]
 8006826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006828:	2f78      	cmp	r7, #120	; 0x78
 800682a:	4691      	mov	r9, r2
 800682c:	4680      	mov	r8, r0
 800682e:	460c      	mov	r4, r1
 8006830:	469a      	mov	sl, r3
 8006832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006836:	d807      	bhi.n	8006848 <_printf_i+0x28>
 8006838:	2f62      	cmp	r7, #98	; 0x62
 800683a:	d80a      	bhi.n	8006852 <_printf_i+0x32>
 800683c:	2f00      	cmp	r7, #0
 800683e:	f000 80d8 	beq.w	80069f2 <_printf_i+0x1d2>
 8006842:	2f58      	cmp	r7, #88	; 0x58
 8006844:	f000 80a3 	beq.w	800698e <_printf_i+0x16e>
 8006848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800684c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006850:	e03a      	b.n	80068c8 <_printf_i+0xa8>
 8006852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006856:	2b15      	cmp	r3, #21
 8006858:	d8f6      	bhi.n	8006848 <_printf_i+0x28>
 800685a:	a101      	add	r1, pc, #4	; (adr r1, 8006860 <_printf_i+0x40>)
 800685c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006860:	080068b9 	.word	0x080068b9
 8006864:	080068cd 	.word	0x080068cd
 8006868:	08006849 	.word	0x08006849
 800686c:	08006849 	.word	0x08006849
 8006870:	08006849 	.word	0x08006849
 8006874:	08006849 	.word	0x08006849
 8006878:	080068cd 	.word	0x080068cd
 800687c:	08006849 	.word	0x08006849
 8006880:	08006849 	.word	0x08006849
 8006884:	08006849 	.word	0x08006849
 8006888:	08006849 	.word	0x08006849
 800688c:	080069d9 	.word	0x080069d9
 8006890:	080068fd 	.word	0x080068fd
 8006894:	080069bb 	.word	0x080069bb
 8006898:	08006849 	.word	0x08006849
 800689c:	08006849 	.word	0x08006849
 80068a0:	080069fb 	.word	0x080069fb
 80068a4:	08006849 	.word	0x08006849
 80068a8:	080068fd 	.word	0x080068fd
 80068ac:	08006849 	.word	0x08006849
 80068b0:	08006849 	.word	0x08006849
 80068b4:	080069c3 	.word	0x080069c3
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	1d1a      	adds	r2, r3, #4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	602a      	str	r2, [r5, #0]
 80068c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0a3      	b.n	8006a14 <_printf_i+0x1f4>
 80068cc:	6820      	ldr	r0, [r4, #0]
 80068ce:	6829      	ldr	r1, [r5, #0]
 80068d0:	0606      	lsls	r6, r0, #24
 80068d2:	f101 0304 	add.w	r3, r1, #4
 80068d6:	d50a      	bpl.n	80068ee <_printf_i+0xce>
 80068d8:	680e      	ldr	r6, [r1, #0]
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	2e00      	cmp	r6, #0
 80068de:	da03      	bge.n	80068e8 <_printf_i+0xc8>
 80068e0:	232d      	movs	r3, #45	; 0x2d
 80068e2:	4276      	negs	r6, r6
 80068e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068e8:	485e      	ldr	r0, [pc, #376]	; (8006a64 <_printf_i+0x244>)
 80068ea:	230a      	movs	r3, #10
 80068ec:	e019      	b.n	8006922 <_printf_i+0x102>
 80068ee:	680e      	ldr	r6, [r1, #0]
 80068f0:	602b      	str	r3, [r5, #0]
 80068f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068f6:	bf18      	it	ne
 80068f8:	b236      	sxthne	r6, r6
 80068fa:	e7ef      	b.n	80068dc <_printf_i+0xbc>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	6820      	ldr	r0, [r4, #0]
 8006900:	1d19      	adds	r1, r3, #4
 8006902:	6029      	str	r1, [r5, #0]
 8006904:	0601      	lsls	r1, r0, #24
 8006906:	d501      	bpl.n	800690c <_printf_i+0xec>
 8006908:	681e      	ldr	r6, [r3, #0]
 800690a:	e002      	b.n	8006912 <_printf_i+0xf2>
 800690c:	0646      	lsls	r6, r0, #25
 800690e:	d5fb      	bpl.n	8006908 <_printf_i+0xe8>
 8006910:	881e      	ldrh	r6, [r3, #0]
 8006912:	4854      	ldr	r0, [pc, #336]	; (8006a64 <_printf_i+0x244>)
 8006914:	2f6f      	cmp	r7, #111	; 0x6f
 8006916:	bf0c      	ite	eq
 8006918:	2308      	moveq	r3, #8
 800691a:	230a      	movne	r3, #10
 800691c:	2100      	movs	r1, #0
 800691e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006922:	6865      	ldr	r5, [r4, #4]
 8006924:	60a5      	str	r5, [r4, #8]
 8006926:	2d00      	cmp	r5, #0
 8006928:	bfa2      	ittt	ge
 800692a:	6821      	ldrge	r1, [r4, #0]
 800692c:	f021 0104 	bicge.w	r1, r1, #4
 8006930:	6021      	strge	r1, [r4, #0]
 8006932:	b90e      	cbnz	r6, 8006938 <_printf_i+0x118>
 8006934:	2d00      	cmp	r5, #0
 8006936:	d04d      	beq.n	80069d4 <_printf_i+0x1b4>
 8006938:	4615      	mov	r5, r2
 800693a:	fbb6 f1f3 	udiv	r1, r6, r3
 800693e:	fb03 6711 	mls	r7, r3, r1, r6
 8006942:	5dc7      	ldrb	r7, [r0, r7]
 8006944:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006948:	4637      	mov	r7, r6
 800694a:	42bb      	cmp	r3, r7
 800694c:	460e      	mov	r6, r1
 800694e:	d9f4      	bls.n	800693a <_printf_i+0x11a>
 8006950:	2b08      	cmp	r3, #8
 8006952:	d10b      	bne.n	800696c <_printf_i+0x14c>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	07de      	lsls	r6, r3, #31
 8006958:	d508      	bpl.n	800696c <_printf_i+0x14c>
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	6861      	ldr	r1, [r4, #4]
 800695e:	4299      	cmp	r1, r3
 8006960:	bfde      	ittt	le
 8006962:	2330      	movle	r3, #48	; 0x30
 8006964:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006968:	f105 35ff 	addle.w	r5, r5, #4294967295
 800696c:	1b52      	subs	r2, r2, r5
 800696e:	6122      	str	r2, [r4, #16]
 8006970:	f8cd a000 	str.w	sl, [sp]
 8006974:	464b      	mov	r3, r9
 8006976:	aa03      	add	r2, sp, #12
 8006978:	4621      	mov	r1, r4
 800697a:	4640      	mov	r0, r8
 800697c:	f7ff fee2 	bl	8006744 <_printf_common>
 8006980:	3001      	adds	r0, #1
 8006982:	d14c      	bne.n	8006a1e <_printf_i+0x1fe>
 8006984:	f04f 30ff 	mov.w	r0, #4294967295
 8006988:	b004      	add	sp, #16
 800698a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698e:	4835      	ldr	r0, [pc, #212]	; (8006a64 <_printf_i+0x244>)
 8006990:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006994:	6829      	ldr	r1, [r5, #0]
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	f851 6b04 	ldr.w	r6, [r1], #4
 800699c:	6029      	str	r1, [r5, #0]
 800699e:	061d      	lsls	r5, r3, #24
 80069a0:	d514      	bpl.n	80069cc <_printf_i+0x1ac>
 80069a2:	07df      	lsls	r7, r3, #31
 80069a4:	bf44      	itt	mi
 80069a6:	f043 0320 	orrmi.w	r3, r3, #32
 80069aa:	6023      	strmi	r3, [r4, #0]
 80069ac:	b91e      	cbnz	r6, 80069b6 <_printf_i+0x196>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	f023 0320 	bic.w	r3, r3, #32
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	2310      	movs	r3, #16
 80069b8:	e7b0      	b.n	800691c <_printf_i+0xfc>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	f043 0320 	orr.w	r3, r3, #32
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	2378      	movs	r3, #120	; 0x78
 80069c4:	4828      	ldr	r0, [pc, #160]	; (8006a68 <_printf_i+0x248>)
 80069c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069ca:	e7e3      	b.n	8006994 <_printf_i+0x174>
 80069cc:	0659      	lsls	r1, r3, #25
 80069ce:	bf48      	it	mi
 80069d0:	b2b6      	uxthmi	r6, r6
 80069d2:	e7e6      	b.n	80069a2 <_printf_i+0x182>
 80069d4:	4615      	mov	r5, r2
 80069d6:	e7bb      	b.n	8006950 <_printf_i+0x130>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	6826      	ldr	r6, [r4, #0]
 80069dc:	6961      	ldr	r1, [r4, #20]
 80069de:	1d18      	adds	r0, r3, #4
 80069e0:	6028      	str	r0, [r5, #0]
 80069e2:	0635      	lsls	r5, r6, #24
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	d501      	bpl.n	80069ec <_printf_i+0x1cc>
 80069e8:	6019      	str	r1, [r3, #0]
 80069ea:	e002      	b.n	80069f2 <_printf_i+0x1d2>
 80069ec:	0670      	lsls	r0, r6, #25
 80069ee:	d5fb      	bpl.n	80069e8 <_printf_i+0x1c8>
 80069f0:	8019      	strh	r1, [r3, #0]
 80069f2:	2300      	movs	r3, #0
 80069f4:	6123      	str	r3, [r4, #16]
 80069f6:	4615      	mov	r5, r2
 80069f8:	e7ba      	b.n	8006970 <_printf_i+0x150>
 80069fa:	682b      	ldr	r3, [r5, #0]
 80069fc:	1d1a      	adds	r2, r3, #4
 80069fe:	602a      	str	r2, [r5, #0]
 8006a00:	681d      	ldr	r5, [r3, #0]
 8006a02:	6862      	ldr	r2, [r4, #4]
 8006a04:	2100      	movs	r1, #0
 8006a06:	4628      	mov	r0, r5
 8006a08:	f7f9 fbe2 	bl	80001d0 <memchr>
 8006a0c:	b108      	cbz	r0, 8006a12 <_printf_i+0x1f2>
 8006a0e:	1b40      	subs	r0, r0, r5
 8006a10:	6060      	str	r0, [r4, #4]
 8006a12:	6863      	ldr	r3, [r4, #4]
 8006a14:	6123      	str	r3, [r4, #16]
 8006a16:	2300      	movs	r3, #0
 8006a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a1c:	e7a8      	b.n	8006970 <_printf_i+0x150>
 8006a1e:	6923      	ldr	r3, [r4, #16]
 8006a20:	462a      	mov	r2, r5
 8006a22:	4649      	mov	r1, r9
 8006a24:	4640      	mov	r0, r8
 8006a26:	47d0      	blx	sl
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d0ab      	beq.n	8006984 <_printf_i+0x164>
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	079b      	lsls	r3, r3, #30
 8006a30:	d413      	bmi.n	8006a5a <_printf_i+0x23a>
 8006a32:	68e0      	ldr	r0, [r4, #12]
 8006a34:	9b03      	ldr	r3, [sp, #12]
 8006a36:	4298      	cmp	r0, r3
 8006a38:	bfb8      	it	lt
 8006a3a:	4618      	movlt	r0, r3
 8006a3c:	e7a4      	b.n	8006988 <_printf_i+0x168>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4632      	mov	r2, r6
 8006a42:	4649      	mov	r1, r9
 8006a44:	4640      	mov	r0, r8
 8006a46:	47d0      	blx	sl
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d09b      	beq.n	8006984 <_printf_i+0x164>
 8006a4c:	3501      	adds	r5, #1
 8006a4e:	68e3      	ldr	r3, [r4, #12]
 8006a50:	9903      	ldr	r1, [sp, #12]
 8006a52:	1a5b      	subs	r3, r3, r1
 8006a54:	42ab      	cmp	r3, r5
 8006a56:	dcf2      	bgt.n	8006a3e <_printf_i+0x21e>
 8006a58:	e7eb      	b.n	8006a32 <_printf_i+0x212>
 8006a5a:	2500      	movs	r5, #0
 8006a5c:	f104 0619 	add.w	r6, r4, #25
 8006a60:	e7f5      	b.n	8006a4e <_printf_i+0x22e>
 8006a62:	bf00      	nop
 8006a64:	0800721d 	.word	0x0800721d
 8006a68:	0800722e 	.word	0x0800722e

08006a6c <_sbrk_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d06      	ldr	r5, [pc, #24]	; (8006a88 <_sbrk_r+0x1c>)
 8006a70:	2300      	movs	r3, #0
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	f7fa fe0c 	bl	8001694 <_sbrk>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_sbrk_r+0x1a>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_sbrk_r+0x1a>
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	20000898 	.word	0x20000898

08006a8c <__sread>:
 8006a8c:	b510      	push	{r4, lr}
 8006a8e:	460c      	mov	r4, r1
 8006a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a94:	f000 fab2 	bl	8006ffc <_read_r>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	bfab      	itete	ge
 8006a9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006aa0:	181b      	addge	r3, r3, r0
 8006aa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006aa6:	bfac      	ite	ge
 8006aa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006aaa:	81a3      	strhlt	r3, [r4, #12]
 8006aac:	bd10      	pop	{r4, pc}

08006aae <__swrite>:
 8006aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab2:	461f      	mov	r7, r3
 8006ab4:	898b      	ldrh	r3, [r1, #12]
 8006ab6:	05db      	lsls	r3, r3, #23
 8006ab8:	4605      	mov	r5, r0
 8006aba:	460c      	mov	r4, r1
 8006abc:	4616      	mov	r6, r2
 8006abe:	d505      	bpl.n	8006acc <__swrite+0x1e>
 8006ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f000 f9c8 	bl	8006e5c <_lseek_r>
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ad6:	81a3      	strh	r3, [r4, #12]
 8006ad8:	4632      	mov	r2, r6
 8006ada:	463b      	mov	r3, r7
 8006adc:	4628      	mov	r0, r5
 8006ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae2:	f000 b869 	b.w	8006bb8 <_write_r>

08006ae6 <__sseek>:
 8006ae6:	b510      	push	{r4, lr}
 8006ae8:	460c      	mov	r4, r1
 8006aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aee:	f000 f9b5 	bl	8006e5c <_lseek_r>
 8006af2:	1c43      	adds	r3, r0, #1
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	bf15      	itete	ne
 8006af8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006afa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006afe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b02:	81a3      	strheq	r3, [r4, #12]
 8006b04:	bf18      	it	ne
 8006b06:	81a3      	strhne	r3, [r4, #12]
 8006b08:	bd10      	pop	{r4, pc}

08006b0a <__sclose>:
 8006b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b0e:	f000 b8d3 	b.w	8006cb8 <_close_r>
	...

08006b14 <__swbuf_r>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	460e      	mov	r6, r1
 8006b18:	4614      	mov	r4, r2
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	b118      	cbz	r0, 8006b26 <__swbuf_r+0x12>
 8006b1e:	6983      	ldr	r3, [r0, #24]
 8006b20:	b90b      	cbnz	r3, 8006b26 <__swbuf_r+0x12>
 8006b22:	f7ff fb81 	bl	8006228 <__sinit>
 8006b26:	4b21      	ldr	r3, [pc, #132]	; (8006bac <__swbuf_r+0x98>)
 8006b28:	429c      	cmp	r4, r3
 8006b2a:	d12b      	bne.n	8006b84 <__swbuf_r+0x70>
 8006b2c:	686c      	ldr	r4, [r5, #4]
 8006b2e:	69a3      	ldr	r3, [r4, #24]
 8006b30:	60a3      	str	r3, [r4, #8]
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	071a      	lsls	r2, r3, #28
 8006b36:	d52f      	bpl.n	8006b98 <__swbuf_r+0x84>
 8006b38:	6923      	ldr	r3, [r4, #16]
 8006b3a:	b36b      	cbz	r3, 8006b98 <__swbuf_r+0x84>
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	6820      	ldr	r0, [r4, #0]
 8006b40:	1ac0      	subs	r0, r0, r3
 8006b42:	6963      	ldr	r3, [r4, #20]
 8006b44:	b2f6      	uxtb	r6, r6
 8006b46:	4283      	cmp	r3, r0
 8006b48:	4637      	mov	r7, r6
 8006b4a:	dc04      	bgt.n	8006b56 <__swbuf_r+0x42>
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f000 f948 	bl	8006de4 <_fflush_r>
 8006b54:	bb30      	cbnz	r0, 8006ba4 <__swbuf_r+0x90>
 8006b56:	68a3      	ldr	r3, [r4, #8]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	60a3      	str	r3, [r4, #8]
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	6022      	str	r2, [r4, #0]
 8006b62:	701e      	strb	r6, [r3, #0]
 8006b64:	6963      	ldr	r3, [r4, #20]
 8006b66:	3001      	adds	r0, #1
 8006b68:	4283      	cmp	r3, r0
 8006b6a:	d004      	beq.n	8006b76 <__swbuf_r+0x62>
 8006b6c:	89a3      	ldrh	r3, [r4, #12]
 8006b6e:	07db      	lsls	r3, r3, #31
 8006b70:	d506      	bpl.n	8006b80 <__swbuf_r+0x6c>
 8006b72:	2e0a      	cmp	r6, #10
 8006b74:	d104      	bne.n	8006b80 <__swbuf_r+0x6c>
 8006b76:	4621      	mov	r1, r4
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f000 f933 	bl	8006de4 <_fflush_r>
 8006b7e:	b988      	cbnz	r0, 8006ba4 <__swbuf_r+0x90>
 8006b80:	4638      	mov	r0, r7
 8006b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b84:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <__swbuf_r+0x9c>)
 8006b86:	429c      	cmp	r4, r3
 8006b88:	d101      	bne.n	8006b8e <__swbuf_r+0x7a>
 8006b8a:	68ac      	ldr	r4, [r5, #8]
 8006b8c:	e7cf      	b.n	8006b2e <__swbuf_r+0x1a>
 8006b8e:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <__swbuf_r+0xa0>)
 8006b90:	429c      	cmp	r4, r3
 8006b92:	bf08      	it	eq
 8006b94:	68ec      	ldreq	r4, [r5, #12]
 8006b96:	e7ca      	b.n	8006b2e <__swbuf_r+0x1a>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f000 f81e 	bl	8006bdc <__swsetup_r>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d0cb      	beq.n	8006b3c <__swbuf_r+0x28>
 8006ba4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ba8:	e7ea      	b.n	8006b80 <__swbuf_r+0x6c>
 8006baa:	bf00      	nop
 8006bac:	080071cc 	.word	0x080071cc
 8006bb0:	080071ec 	.word	0x080071ec
 8006bb4:	080071ac 	.word	0x080071ac

08006bb8 <_write_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4d07      	ldr	r5, [pc, #28]	; (8006bd8 <_write_r+0x20>)
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	4608      	mov	r0, r1
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	602a      	str	r2, [r5, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f7fa fd13 	bl	80015f2 <_write>
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d102      	bne.n	8006bd6 <_write_r+0x1e>
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	b103      	cbz	r3, 8006bd6 <_write_r+0x1e>
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	20000898 	.word	0x20000898

08006bdc <__swsetup_r>:
 8006bdc:	4b32      	ldr	r3, [pc, #200]	; (8006ca8 <__swsetup_r+0xcc>)
 8006bde:	b570      	push	{r4, r5, r6, lr}
 8006be0:	681d      	ldr	r5, [r3, #0]
 8006be2:	4606      	mov	r6, r0
 8006be4:	460c      	mov	r4, r1
 8006be6:	b125      	cbz	r5, 8006bf2 <__swsetup_r+0x16>
 8006be8:	69ab      	ldr	r3, [r5, #24]
 8006bea:	b913      	cbnz	r3, 8006bf2 <__swsetup_r+0x16>
 8006bec:	4628      	mov	r0, r5
 8006bee:	f7ff fb1b 	bl	8006228 <__sinit>
 8006bf2:	4b2e      	ldr	r3, [pc, #184]	; (8006cac <__swsetup_r+0xd0>)
 8006bf4:	429c      	cmp	r4, r3
 8006bf6:	d10f      	bne.n	8006c18 <__swsetup_r+0x3c>
 8006bf8:	686c      	ldr	r4, [r5, #4]
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c00:	0719      	lsls	r1, r3, #28
 8006c02:	d42c      	bmi.n	8006c5e <__swsetup_r+0x82>
 8006c04:	06dd      	lsls	r5, r3, #27
 8006c06:	d411      	bmi.n	8006c2c <__swsetup_r+0x50>
 8006c08:	2309      	movs	r3, #9
 8006c0a:	6033      	str	r3, [r6, #0]
 8006c0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c10:	81a3      	strh	r3, [r4, #12]
 8006c12:	f04f 30ff 	mov.w	r0, #4294967295
 8006c16:	e03e      	b.n	8006c96 <__swsetup_r+0xba>
 8006c18:	4b25      	ldr	r3, [pc, #148]	; (8006cb0 <__swsetup_r+0xd4>)
 8006c1a:	429c      	cmp	r4, r3
 8006c1c:	d101      	bne.n	8006c22 <__swsetup_r+0x46>
 8006c1e:	68ac      	ldr	r4, [r5, #8]
 8006c20:	e7eb      	b.n	8006bfa <__swsetup_r+0x1e>
 8006c22:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <__swsetup_r+0xd8>)
 8006c24:	429c      	cmp	r4, r3
 8006c26:	bf08      	it	eq
 8006c28:	68ec      	ldreq	r4, [r5, #12]
 8006c2a:	e7e6      	b.n	8006bfa <__swsetup_r+0x1e>
 8006c2c:	0758      	lsls	r0, r3, #29
 8006c2e:	d512      	bpl.n	8006c56 <__swsetup_r+0x7a>
 8006c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c32:	b141      	cbz	r1, 8006c46 <__swsetup_r+0x6a>
 8006c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c38:	4299      	cmp	r1, r3
 8006c3a:	d002      	beq.n	8006c42 <__swsetup_r+0x66>
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	f000 f991 	bl	8006f64 <_free_r>
 8006c42:	2300      	movs	r3, #0
 8006c44:	6363      	str	r3, [r4, #52]	; 0x34
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c4c:	81a3      	strh	r3, [r4, #12]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	6063      	str	r3, [r4, #4]
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	f043 0308 	orr.w	r3, r3, #8
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	6923      	ldr	r3, [r4, #16]
 8006c60:	b94b      	cbnz	r3, 8006c76 <__swsetup_r+0x9a>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6c:	d003      	beq.n	8006c76 <__swsetup_r+0x9a>
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4630      	mov	r0, r6
 8006c72:	f000 f92b 	bl	8006ecc <__smakebuf_r>
 8006c76:	89a0      	ldrh	r0, [r4, #12]
 8006c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c7c:	f010 0301 	ands.w	r3, r0, #1
 8006c80:	d00a      	beq.n	8006c98 <__swsetup_r+0xbc>
 8006c82:	2300      	movs	r3, #0
 8006c84:	60a3      	str	r3, [r4, #8]
 8006c86:	6963      	ldr	r3, [r4, #20]
 8006c88:	425b      	negs	r3, r3
 8006c8a:	61a3      	str	r3, [r4, #24]
 8006c8c:	6923      	ldr	r3, [r4, #16]
 8006c8e:	b943      	cbnz	r3, 8006ca2 <__swsetup_r+0xc6>
 8006c90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c94:	d1ba      	bne.n	8006c0c <__swsetup_r+0x30>
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	0781      	lsls	r1, r0, #30
 8006c9a:	bf58      	it	pl
 8006c9c:	6963      	ldrpl	r3, [r4, #20]
 8006c9e:	60a3      	str	r3, [r4, #8]
 8006ca0:	e7f4      	b.n	8006c8c <__swsetup_r+0xb0>
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e7f7      	b.n	8006c96 <__swsetup_r+0xba>
 8006ca6:	bf00      	nop
 8006ca8:	2000000c 	.word	0x2000000c
 8006cac:	080071cc 	.word	0x080071cc
 8006cb0:	080071ec 	.word	0x080071ec
 8006cb4:	080071ac 	.word	0x080071ac

08006cb8 <_close_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d06      	ldr	r5, [pc, #24]	; (8006cd4 <_close_r+0x1c>)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	602b      	str	r3, [r5, #0]
 8006cc4:	f7fa fcb1 	bl	800162a <_close>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_close_r+0x1a>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_close_r+0x1a>
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	20000898 	.word	0x20000898

08006cd8 <__sflush_r>:
 8006cd8:	898a      	ldrh	r2, [r1, #12]
 8006cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cde:	4605      	mov	r5, r0
 8006ce0:	0710      	lsls	r0, r2, #28
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	d458      	bmi.n	8006d98 <__sflush_r+0xc0>
 8006ce6:	684b      	ldr	r3, [r1, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dc05      	bgt.n	8006cf8 <__sflush_r+0x20>
 8006cec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	dc02      	bgt.n	8006cf8 <__sflush_r+0x20>
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cfa:	2e00      	cmp	r6, #0
 8006cfc:	d0f9      	beq.n	8006cf2 <__sflush_r+0x1a>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d04:	682f      	ldr	r7, [r5, #0]
 8006d06:	602b      	str	r3, [r5, #0]
 8006d08:	d032      	beq.n	8006d70 <__sflush_r+0x98>
 8006d0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	075a      	lsls	r2, r3, #29
 8006d10:	d505      	bpl.n	8006d1e <__sflush_r+0x46>
 8006d12:	6863      	ldr	r3, [r4, #4]
 8006d14:	1ac0      	subs	r0, r0, r3
 8006d16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d18:	b10b      	cbz	r3, 8006d1e <__sflush_r+0x46>
 8006d1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d1c:	1ac0      	subs	r0, r0, r3
 8006d1e:	2300      	movs	r3, #0
 8006d20:	4602      	mov	r2, r0
 8006d22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d24:	6a21      	ldr	r1, [r4, #32]
 8006d26:	4628      	mov	r0, r5
 8006d28:	47b0      	blx	r6
 8006d2a:	1c43      	adds	r3, r0, #1
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	d106      	bne.n	8006d3e <__sflush_r+0x66>
 8006d30:	6829      	ldr	r1, [r5, #0]
 8006d32:	291d      	cmp	r1, #29
 8006d34:	d82c      	bhi.n	8006d90 <__sflush_r+0xb8>
 8006d36:	4a2a      	ldr	r2, [pc, #168]	; (8006de0 <__sflush_r+0x108>)
 8006d38:	40ca      	lsrs	r2, r1
 8006d3a:	07d6      	lsls	r6, r2, #31
 8006d3c:	d528      	bpl.n	8006d90 <__sflush_r+0xb8>
 8006d3e:	2200      	movs	r2, #0
 8006d40:	6062      	str	r2, [r4, #4]
 8006d42:	04d9      	lsls	r1, r3, #19
 8006d44:	6922      	ldr	r2, [r4, #16]
 8006d46:	6022      	str	r2, [r4, #0]
 8006d48:	d504      	bpl.n	8006d54 <__sflush_r+0x7c>
 8006d4a:	1c42      	adds	r2, r0, #1
 8006d4c:	d101      	bne.n	8006d52 <__sflush_r+0x7a>
 8006d4e:	682b      	ldr	r3, [r5, #0]
 8006d50:	b903      	cbnz	r3, 8006d54 <__sflush_r+0x7c>
 8006d52:	6560      	str	r0, [r4, #84]	; 0x54
 8006d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d56:	602f      	str	r7, [r5, #0]
 8006d58:	2900      	cmp	r1, #0
 8006d5a:	d0ca      	beq.n	8006cf2 <__sflush_r+0x1a>
 8006d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d60:	4299      	cmp	r1, r3
 8006d62:	d002      	beq.n	8006d6a <__sflush_r+0x92>
 8006d64:	4628      	mov	r0, r5
 8006d66:	f000 f8fd 	bl	8006f64 <_free_r>
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	6360      	str	r0, [r4, #52]	; 0x34
 8006d6e:	e7c1      	b.n	8006cf4 <__sflush_r+0x1c>
 8006d70:	6a21      	ldr	r1, [r4, #32]
 8006d72:	2301      	movs	r3, #1
 8006d74:	4628      	mov	r0, r5
 8006d76:	47b0      	blx	r6
 8006d78:	1c41      	adds	r1, r0, #1
 8006d7a:	d1c7      	bne.n	8006d0c <__sflush_r+0x34>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0c4      	beq.n	8006d0c <__sflush_r+0x34>
 8006d82:	2b1d      	cmp	r3, #29
 8006d84:	d001      	beq.n	8006d8a <__sflush_r+0xb2>
 8006d86:	2b16      	cmp	r3, #22
 8006d88:	d101      	bne.n	8006d8e <__sflush_r+0xb6>
 8006d8a:	602f      	str	r7, [r5, #0]
 8006d8c:	e7b1      	b.n	8006cf2 <__sflush_r+0x1a>
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d94:	81a3      	strh	r3, [r4, #12]
 8006d96:	e7ad      	b.n	8006cf4 <__sflush_r+0x1c>
 8006d98:	690f      	ldr	r7, [r1, #16]
 8006d9a:	2f00      	cmp	r7, #0
 8006d9c:	d0a9      	beq.n	8006cf2 <__sflush_r+0x1a>
 8006d9e:	0793      	lsls	r3, r2, #30
 8006da0:	680e      	ldr	r6, [r1, #0]
 8006da2:	bf08      	it	eq
 8006da4:	694b      	ldreq	r3, [r1, #20]
 8006da6:	600f      	str	r7, [r1, #0]
 8006da8:	bf18      	it	ne
 8006daa:	2300      	movne	r3, #0
 8006dac:	eba6 0807 	sub.w	r8, r6, r7
 8006db0:	608b      	str	r3, [r1, #8]
 8006db2:	f1b8 0f00 	cmp.w	r8, #0
 8006db6:	dd9c      	ble.n	8006cf2 <__sflush_r+0x1a>
 8006db8:	6a21      	ldr	r1, [r4, #32]
 8006dba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dbc:	4643      	mov	r3, r8
 8006dbe:	463a      	mov	r2, r7
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	47b0      	blx	r6
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	dc06      	bgt.n	8006dd6 <__sflush_r+0xfe>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dce:	81a3      	strh	r3, [r4, #12]
 8006dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd4:	e78e      	b.n	8006cf4 <__sflush_r+0x1c>
 8006dd6:	4407      	add	r7, r0
 8006dd8:	eba8 0800 	sub.w	r8, r8, r0
 8006ddc:	e7e9      	b.n	8006db2 <__sflush_r+0xda>
 8006dde:	bf00      	nop
 8006de0:	20400001 	.word	0x20400001

08006de4 <_fflush_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	690b      	ldr	r3, [r1, #16]
 8006de8:	4605      	mov	r5, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	b913      	cbnz	r3, 8006df4 <_fflush_r+0x10>
 8006dee:	2500      	movs	r5, #0
 8006df0:	4628      	mov	r0, r5
 8006df2:	bd38      	pop	{r3, r4, r5, pc}
 8006df4:	b118      	cbz	r0, 8006dfe <_fflush_r+0x1a>
 8006df6:	6983      	ldr	r3, [r0, #24]
 8006df8:	b90b      	cbnz	r3, 8006dfe <_fflush_r+0x1a>
 8006dfa:	f7ff fa15 	bl	8006228 <__sinit>
 8006dfe:	4b14      	ldr	r3, [pc, #80]	; (8006e50 <_fflush_r+0x6c>)
 8006e00:	429c      	cmp	r4, r3
 8006e02:	d11b      	bne.n	8006e3c <_fflush_r+0x58>
 8006e04:	686c      	ldr	r4, [r5, #4]
 8006e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0ef      	beq.n	8006dee <_fflush_r+0xa>
 8006e0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e10:	07d0      	lsls	r0, r2, #31
 8006e12:	d404      	bmi.n	8006e1e <_fflush_r+0x3a>
 8006e14:	0599      	lsls	r1, r3, #22
 8006e16:	d402      	bmi.n	8006e1e <_fflush_r+0x3a>
 8006e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e1a:	f7ff faa3 	bl	8006364 <__retarget_lock_acquire_recursive>
 8006e1e:	4628      	mov	r0, r5
 8006e20:	4621      	mov	r1, r4
 8006e22:	f7ff ff59 	bl	8006cd8 <__sflush_r>
 8006e26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e28:	07da      	lsls	r2, r3, #31
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	d4e0      	bmi.n	8006df0 <_fflush_r+0xc>
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	059b      	lsls	r3, r3, #22
 8006e32:	d4dd      	bmi.n	8006df0 <_fflush_r+0xc>
 8006e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e36:	f7ff fa96 	bl	8006366 <__retarget_lock_release_recursive>
 8006e3a:	e7d9      	b.n	8006df0 <_fflush_r+0xc>
 8006e3c:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <_fflush_r+0x70>)
 8006e3e:	429c      	cmp	r4, r3
 8006e40:	d101      	bne.n	8006e46 <_fflush_r+0x62>
 8006e42:	68ac      	ldr	r4, [r5, #8]
 8006e44:	e7df      	b.n	8006e06 <_fflush_r+0x22>
 8006e46:	4b04      	ldr	r3, [pc, #16]	; (8006e58 <_fflush_r+0x74>)
 8006e48:	429c      	cmp	r4, r3
 8006e4a:	bf08      	it	eq
 8006e4c:	68ec      	ldreq	r4, [r5, #12]
 8006e4e:	e7da      	b.n	8006e06 <_fflush_r+0x22>
 8006e50:	080071cc 	.word	0x080071cc
 8006e54:	080071ec 	.word	0x080071ec
 8006e58:	080071ac 	.word	0x080071ac

08006e5c <_lseek_r>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	4d07      	ldr	r5, [pc, #28]	; (8006e7c <_lseek_r+0x20>)
 8006e60:	4604      	mov	r4, r0
 8006e62:	4608      	mov	r0, r1
 8006e64:	4611      	mov	r1, r2
 8006e66:	2200      	movs	r2, #0
 8006e68:	602a      	str	r2, [r5, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f7fa fc04 	bl	8001678 <_lseek>
 8006e70:	1c43      	adds	r3, r0, #1
 8006e72:	d102      	bne.n	8006e7a <_lseek_r+0x1e>
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	b103      	cbz	r3, 8006e7a <_lseek_r+0x1e>
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	bd38      	pop	{r3, r4, r5, pc}
 8006e7c:	20000898 	.word	0x20000898

08006e80 <__swhatbuf_r>:
 8006e80:	b570      	push	{r4, r5, r6, lr}
 8006e82:	460e      	mov	r6, r1
 8006e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e88:	2900      	cmp	r1, #0
 8006e8a:	b096      	sub	sp, #88	; 0x58
 8006e8c:	4614      	mov	r4, r2
 8006e8e:	461d      	mov	r5, r3
 8006e90:	da08      	bge.n	8006ea4 <__swhatbuf_r+0x24>
 8006e92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	602a      	str	r2, [r5, #0]
 8006e9a:	061a      	lsls	r2, r3, #24
 8006e9c:	d410      	bmi.n	8006ec0 <__swhatbuf_r+0x40>
 8006e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ea2:	e00e      	b.n	8006ec2 <__swhatbuf_r+0x42>
 8006ea4:	466a      	mov	r2, sp
 8006ea6:	f000 f8bb 	bl	8007020 <_fstat_r>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	dbf1      	blt.n	8006e92 <__swhatbuf_r+0x12>
 8006eae:	9a01      	ldr	r2, [sp, #4]
 8006eb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006eb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006eb8:	425a      	negs	r2, r3
 8006eba:	415a      	adcs	r2, r3
 8006ebc:	602a      	str	r2, [r5, #0]
 8006ebe:	e7ee      	b.n	8006e9e <__swhatbuf_r+0x1e>
 8006ec0:	2340      	movs	r3, #64	; 0x40
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	b016      	add	sp, #88	; 0x58
 8006ec8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ecc <__smakebuf_r>:
 8006ecc:	898b      	ldrh	r3, [r1, #12]
 8006ece:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ed0:	079d      	lsls	r5, r3, #30
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	d507      	bpl.n	8006ee8 <__smakebuf_r+0x1c>
 8006ed8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	6123      	str	r3, [r4, #16]
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	6163      	str	r3, [r4, #20]
 8006ee4:	b002      	add	sp, #8
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
 8006ee8:	ab01      	add	r3, sp, #4
 8006eea:	466a      	mov	r2, sp
 8006eec:	f7ff ffc8 	bl	8006e80 <__swhatbuf_r>
 8006ef0:	9900      	ldr	r1, [sp, #0]
 8006ef2:	4605      	mov	r5, r0
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f7ff fa57 	bl	80063a8 <_malloc_r>
 8006efa:	b948      	cbnz	r0, 8006f10 <__smakebuf_r+0x44>
 8006efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f00:	059a      	lsls	r2, r3, #22
 8006f02:	d4ef      	bmi.n	8006ee4 <__smakebuf_r+0x18>
 8006f04:	f023 0303 	bic.w	r3, r3, #3
 8006f08:	f043 0302 	orr.w	r3, r3, #2
 8006f0c:	81a3      	strh	r3, [r4, #12]
 8006f0e:	e7e3      	b.n	8006ed8 <__smakebuf_r+0xc>
 8006f10:	4b0d      	ldr	r3, [pc, #52]	; (8006f48 <__smakebuf_r+0x7c>)
 8006f12:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	6020      	str	r0, [r4, #0]
 8006f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	9b00      	ldr	r3, [sp, #0]
 8006f20:	6163      	str	r3, [r4, #20]
 8006f22:	9b01      	ldr	r3, [sp, #4]
 8006f24:	6120      	str	r0, [r4, #16]
 8006f26:	b15b      	cbz	r3, 8006f40 <__smakebuf_r+0x74>
 8006f28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f000 f889 	bl	8007044 <_isatty_r>
 8006f32:	b128      	cbz	r0, 8006f40 <__smakebuf_r+0x74>
 8006f34:	89a3      	ldrh	r3, [r4, #12]
 8006f36:	f023 0303 	bic.w	r3, r3, #3
 8006f3a:	f043 0301 	orr.w	r3, r3, #1
 8006f3e:	81a3      	strh	r3, [r4, #12]
 8006f40:	89a0      	ldrh	r0, [r4, #12]
 8006f42:	4305      	orrs	r5, r0
 8006f44:	81a5      	strh	r5, [r4, #12]
 8006f46:	e7cd      	b.n	8006ee4 <__smakebuf_r+0x18>
 8006f48:	080061c1 	.word	0x080061c1

08006f4c <__malloc_lock>:
 8006f4c:	4801      	ldr	r0, [pc, #4]	; (8006f54 <__malloc_lock+0x8>)
 8006f4e:	f7ff ba09 	b.w	8006364 <__retarget_lock_acquire_recursive>
 8006f52:	bf00      	nop
 8006f54:	2000088c 	.word	0x2000088c

08006f58 <__malloc_unlock>:
 8006f58:	4801      	ldr	r0, [pc, #4]	; (8006f60 <__malloc_unlock+0x8>)
 8006f5a:	f7ff ba04 	b.w	8006366 <__retarget_lock_release_recursive>
 8006f5e:	bf00      	nop
 8006f60:	2000088c 	.word	0x2000088c

08006f64 <_free_r>:
 8006f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f66:	2900      	cmp	r1, #0
 8006f68:	d044      	beq.n	8006ff4 <_free_r+0x90>
 8006f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f6e:	9001      	str	r0, [sp, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	f1a1 0404 	sub.w	r4, r1, #4
 8006f76:	bfb8      	it	lt
 8006f78:	18e4      	addlt	r4, r4, r3
 8006f7a:	f7ff ffe7 	bl	8006f4c <__malloc_lock>
 8006f7e:	4a1e      	ldr	r2, [pc, #120]	; (8006ff8 <_free_r+0x94>)
 8006f80:	9801      	ldr	r0, [sp, #4]
 8006f82:	6813      	ldr	r3, [r2, #0]
 8006f84:	b933      	cbnz	r3, 8006f94 <_free_r+0x30>
 8006f86:	6063      	str	r3, [r4, #4]
 8006f88:	6014      	str	r4, [r2, #0]
 8006f8a:	b003      	add	sp, #12
 8006f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f90:	f7ff bfe2 	b.w	8006f58 <__malloc_unlock>
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	d908      	bls.n	8006faa <_free_r+0x46>
 8006f98:	6825      	ldr	r5, [r4, #0]
 8006f9a:	1961      	adds	r1, r4, r5
 8006f9c:	428b      	cmp	r3, r1
 8006f9e:	bf01      	itttt	eq
 8006fa0:	6819      	ldreq	r1, [r3, #0]
 8006fa2:	685b      	ldreq	r3, [r3, #4]
 8006fa4:	1949      	addeq	r1, r1, r5
 8006fa6:	6021      	streq	r1, [r4, #0]
 8006fa8:	e7ed      	b.n	8006f86 <_free_r+0x22>
 8006faa:	461a      	mov	r2, r3
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	b10b      	cbz	r3, 8006fb4 <_free_r+0x50>
 8006fb0:	42a3      	cmp	r3, r4
 8006fb2:	d9fa      	bls.n	8006faa <_free_r+0x46>
 8006fb4:	6811      	ldr	r1, [r2, #0]
 8006fb6:	1855      	adds	r5, r2, r1
 8006fb8:	42a5      	cmp	r5, r4
 8006fba:	d10b      	bne.n	8006fd4 <_free_r+0x70>
 8006fbc:	6824      	ldr	r4, [r4, #0]
 8006fbe:	4421      	add	r1, r4
 8006fc0:	1854      	adds	r4, r2, r1
 8006fc2:	42a3      	cmp	r3, r4
 8006fc4:	6011      	str	r1, [r2, #0]
 8006fc6:	d1e0      	bne.n	8006f8a <_free_r+0x26>
 8006fc8:	681c      	ldr	r4, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	6053      	str	r3, [r2, #4]
 8006fce:	4421      	add	r1, r4
 8006fd0:	6011      	str	r1, [r2, #0]
 8006fd2:	e7da      	b.n	8006f8a <_free_r+0x26>
 8006fd4:	d902      	bls.n	8006fdc <_free_r+0x78>
 8006fd6:	230c      	movs	r3, #12
 8006fd8:	6003      	str	r3, [r0, #0]
 8006fda:	e7d6      	b.n	8006f8a <_free_r+0x26>
 8006fdc:	6825      	ldr	r5, [r4, #0]
 8006fde:	1961      	adds	r1, r4, r5
 8006fe0:	428b      	cmp	r3, r1
 8006fe2:	bf04      	itt	eq
 8006fe4:	6819      	ldreq	r1, [r3, #0]
 8006fe6:	685b      	ldreq	r3, [r3, #4]
 8006fe8:	6063      	str	r3, [r4, #4]
 8006fea:	bf04      	itt	eq
 8006fec:	1949      	addeq	r1, r1, r5
 8006fee:	6021      	streq	r1, [r4, #0]
 8006ff0:	6054      	str	r4, [r2, #4]
 8006ff2:	e7ca      	b.n	8006f8a <_free_r+0x26>
 8006ff4:	b003      	add	sp, #12
 8006ff6:	bd30      	pop	{r4, r5, pc}
 8006ff8:	20000890 	.word	0x20000890

08006ffc <_read_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d07      	ldr	r5, [pc, #28]	; (800701c <_read_r+0x20>)
 8007000:	4604      	mov	r4, r0
 8007002:	4608      	mov	r0, r1
 8007004:	4611      	mov	r1, r2
 8007006:	2200      	movs	r2, #0
 8007008:	602a      	str	r2, [r5, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	f7fa fad4 	bl	80015b8 <_read>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_read_r+0x1e>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_read_r+0x1e>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	20000898 	.word	0x20000898

08007020 <_fstat_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d07      	ldr	r5, [pc, #28]	; (8007040 <_fstat_r+0x20>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	4611      	mov	r1, r2
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	f7fa fb08 	bl	8001642 <_fstat>
 8007032:	1c43      	adds	r3, r0, #1
 8007034:	d102      	bne.n	800703c <_fstat_r+0x1c>
 8007036:	682b      	ldr	r3, [r5, #0]
 8007038:	b103      	cbz	r3, 800703c <_fstat_r+0x1c>
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	bd38      	pop	{r3, r4, r5, pc}
 800703e:	bf00      	nop
 8007040:	20000898 	.word	0x20000898

08007044 <_isatty_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	4d06      	ldr	r5, [pc, #24]	; (8007060 <_isatty_r+0x1c>)
 8007048:	2300      	movs	r3, #0
 800704a:	4604      	mov	r4, r0
 800704c:	4608      	mov	r0, r1
 800704e:	602b      	str	r3, [r5, #0]
 8007050:	f7fa fb07 	bl	8001662 <_isatty>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_isatty_r+0x1a>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_isatty_r+0x1a>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	20000898 	.word	0x20000898

08007064 <_init>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr

08007070 <_fini>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	bf00      	nop
 8007074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007076:	bc08      	pop	{r3}
 8007078:	469e      	mov	lr, r3
 800707a:	4770      	bx	lr
