
micromouse_beta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  08010250  08010250  00020250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801080c  0801080c  000302e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801080c  0801080c  0002080c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010814  08010814  000302e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010814  08010814  00020814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010818  08010818  00020818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  0801081c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302e4  2**0
                  CONTENTS
 10 .bss          00002a28  200002e8  200002e8  000302e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20002d10  20002d10  000302e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fdf1  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004965  00000000  00000000  00050105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d0  00000000  00000000  00054a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017e0  00000000  00000000  00056440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c8d  00000000  00000000  00057c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023108  00000000  00000000  0007d8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d58c2  00000000  00000000  000a09b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00176277  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e10  00000000  00000000  001762c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e8 	.word	0x200002e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010238 	.word	0x08010238

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	08010238 	.word	0x08010238

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <Delay_Init+0x38>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10e      	bne.n	8000f7a <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <Delay_Init+0x38>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <Delay_Init+0x38>)
 8000f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f66:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <Delay_Init+0x3c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <Delay_Init+0x3c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <Delay_Init+0x3c>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6013      	str	r3, [r2, #0]
    }
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000edf0 	.word	0xe000edf0
 8000f88:	e0001000 	.word	0xe0001000
 8000f8c:	00000000 	.word	0x00000000

08000f90 <update_encoder>:
#include "main.h"

double wheel_circumference = 94.2478; //IN MM


void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim){
 8000f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if(!first_time)
 8000fa4:	4b64      	ldr	r3, [pc, #400]	; (8001138 <update_encoder+0x1a8>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d106      	bne.n	8000fba <update_encoder+0x2a>
	{
		encoder_value -> velocity = 0;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 8000fb2:	4b61      	ldr	r3, [pc, #388]	; (8001138 <update_encoder+0x1a8>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
 8000fb8:	e052      	b.n	8001060 <update_encoder+0xd0>
	}

	else
	{
		if(temp_counter == encoder_value -> last_counter_value)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d103      	bne.n	8000fcc <update_encoder+0x3c>
		{
			encoder_value -> velocity = 0;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	801a      	strh	r2, [r3, #0]
 8000fca:	e049      	b.n	8001060 <update_encoder+0xd0>
		}
		else if(temp_counter > encoder_value ->  last_counter_value)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d922      	bls.n	800101c <update_encoder+0x8c>
		{
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0310 	and.w	r3, r3, #16
 8000fe0:	2b10      	cmp	r3, #16
 8000fe2:	d110      	bne.n	8001006 <update_encoder+0x76>
			{
				encoder_value -> velocity = -encoder_value -> last_counter_value -
						(__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	b29a      	uxth	r2, r3
				encoder_value -> velocity = -encoder_value -> last_counter_value -
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	801a      	strh	r2, [r3, #0]
 8001004:	e02c      	b.n	8001060 <update_encoder+0xd0>
			}
			else
			{
				encoder_value -> velocity = temp_counter -  encoder_value -> last_counter_value;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	b29a      	uxth	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	b29b      	uxth	r3, r3
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	b21a      	sxth	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	801a      	strh	r2, [r3, #0]
 800101a:	e021      	b.n	8001060 <update_encoder+0xd0>
			}
		}
		else
		{
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(htim)){
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0310 	and.w	r3, r3, #16
 8001026:	2b10      	cmp	r3, #16
 8001028:	d10a      	bne.n	8001040 <update_encoder+0xb0>
				encoder_value -> velocity = temp_counter - encoder_value -> last_counter_value;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	b29b      	uxth	r3, r3
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	b29b      	uxth	r3, r3
 8001038:	b21a      	sxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	801a      	strh	r2, [r3, #0]
 800103e:	e00f      	b.n	8001060 <update_encoder+0xd0>
			}
			else{
				encoder_value -> velocity = temp_counter +
						(__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value -> last_counter_value);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	b29a      	uxth	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	b29b      	uxth	r3, r3
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	b29a      	uxth	r2, r3
				encoder_value -> velocity = temp_counter +
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	b29b      	uxth	r3, r3
 8001056:	4413      	add	r3, r2
 8001058:	b29b      	uxth	r3, r3
 800105a:	b21a      	sxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	encoder_value -> position += encoder_value -> velocity;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f9b1 1000 	ldrsh.w	r1, [r1]
 800106c:	b209      	sxth	r1, r1
 800106e:	17c8      	asrs	r0, r1, #31
 8001070:	460c      	mov	r4, r1
 8001072:	4605      	mov	r5, r0
 8001074:	eb12 0804 	adds.w	r8, r2, r4
 8001078:	eb43 0905 	adc.w	r9, r3, r5
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	e9c3 8902 	strd	r8, r9, [r3, #8]
	encoder_value -> last_counter_value = temp_counter;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	611a      	str	r2, [r3, #16]

	//Medidas reales
	encoder_value -> position_mm = (double)(encoder_value -> position) / ( (double) 360.0/ wheel_circumference) ;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800108e:	4610      	mov	r0, r2
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff fa83 	bl	800059c <__aeabi_l2d>
 8001096:	4604      	mov	r4, r0
 8001098:	460d      	mov	r5, r1
 800109a:	4b28      	ldr	r3, [pc, #160]	; (800113c <update_encoder+0x1ac>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f04f 0000 	mov.w	r0, #0
 80010a4:	4926      	ldr	r1, [pc, #152]	; (8001140 <update_encoder+0x1b0>)
 80010a6:	f7ff fbd1 	bl	800084c <__aeabi_ddiv>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4620      	mov	r0, r4
 80010b0:	4629      	mov	r1, r5
 80010b2:	f7ff fbcb 	bl	800084c <__aeabi_ddiv>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	encoder_value -> velocity_rpm = (encoder_value -> velocity) * (1000.0/(12.0*29.86))*60.0;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa2c 	bl	8000524 <__aeabi_i2d>
 80010cc:	a318      	add	r3, pc, #96	; (adr r3, 8001130 <update_encoder+0x1a0>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fa91 	bl	80005f8 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <update_encoder+0x1b4>)
 80010e4:	f7ff fa88 	bl	80005f8 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
	encoder_value -> last_position_mm = (double)(encoder_value -> last_counter_value) / ( (double) 360.0/ wheel_circumference) ;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa04 	bl	8000504 <__aeabi_ui2d>
 80010fc:	4604      	mov	r4, r0
 80010fe:	460d      	mov	r5, r1
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <update_encoder+0x1ac>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	490d      	ldr	r1, [pc, #52]	; (8001140 <update_encoder+0x1b0>)
 800110c:	f7ff fb9e 	bl	800084c <__aeabi_ddiv>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4620      	mov	r0, r4
 8001116:	4629      	mov	r1, r5
 8001118:	f7ff fb98 	bl	800084c <__aeabi_ddiv>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001130:	bf123b8e 	.word	0xbf123b8e
 8001134:	4006538f 	.word	0x4006538f
 8001138:	20000304 	.word	0x20000304
 800113c:	20000000 	.word	0x20000000
 8001140:	40768000 	.word	0x40768000
 8001144:	404e0000 	.word	0x404e0000

08001148 <readIR>:
 Wait for a small amount of time (at least 20 us) so the photodiode can react
 Then read the correct receiver
 Lastly turn off the emitter
 */
uint16_t readIR(IR ir)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	uint16_t reading;
	switch (ir) {
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b03      	cmp	r3, #3
 8001156:	d84f      	bhi.n	80011f8 <readIR+0xb0>
 8001158:	a201      	add	r2, pc, #4	; (adr r2, 8001160 <readIR+0x18>)
 800115a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115e:	bf00      	nop
 8001160:	08001193 	.word	0x08001193
 8001164:	080011d7 	.word	0x080011d7
 8001168:	080011b5 	.word	0x080011b5
 800116c:	08001171 	.word	0x08001171
	case IR_RIGHT:
		HAL_GPIO_WritePin(R_Emitter_GPIO_Port, R_Emitter_Pin, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2120      	movs	r1, #32
 8001174:	4823      	ldr	r0, [pc, #140]	; (8001204 <readIR+0xbc>)
 8001176:	f003 fcfb 	bl	8004b70 <HAL_GPIO_WritePin>
		//delayMicroseconds(25);
		reading = analogRead(ir);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f845 	bl	800120c <analogRead>
 8001182:	4603      	mov	r3, r0
 8001184:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(R_Emitter_GPIO_Port, R_Emitter_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2120      	movs	r1, #32
 800118a:	481e      	ldr	r0, [pc, #120]	; (8001204 <readIR+0xbc>)
 800118c:	f003 fcf0 	bl	8004b70 <HAL_GPIO_WritePin>
		break;
 8001190:	e033      	b.n	80011fa <readIR+0xb2>
	case IR_LEFT:
		HAL_GPIO_WritePin(L_Emitter_GPIO_Port, L_Emitter_Pin, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2140      	movs	r1, #64	; 0x40
 8001196:	481b      	ldr	r0, [pc, #108]	; (8001204 <readIR+0xbc>)
 8001198:	f003 fcea 	bl	8004b70 <HAL_GPIO_WritePin>
		//delayMicroseconds(25);
		reading = analogRead(ir);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f834 	bl	800120c <analogRead>
 80011a4:	4603      	mov	r3, r0
 80011a6:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(L_Emitter_GPIO_Port, L_Emitter_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2140      	movs	r1, #64	; 0x40
 80011ac:	4815      	ldr	r0, [pc, #84]	; (8001204 <readIR+0xbc>)
 80011ae:	f003 fcdf 	bl	8004b70 <HAL_GPIO_WritePin>
		break;
 80011b2:	e022      	b.n	80011fa <readIR+0xb2>
	case IR_FRONT_RIGHT:
		HAL_GPIO_WritePin(FR_Emitter_GPIO_Port, FR_Emitter_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2101      	movs	r1, #1
 80011b8:	4813      	ldr	r0, [pc, #76]	; (8001208 <readIR+0xc0>)
 80011ba:	f003 fcd9 	bl	8004b70 <HAL_GPIO_WritePin>
		//delayMicroseconds(25);
		reading = analogRead(ir);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f823 	bl	800120c <analogRead>
 80011c6:	4603      	mov	r3, r0
 80011c8:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(FR_Emitter_GPIO_Port, FR_Emitter_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2101      	movs	r1, #1
 80011ce:	480e      	ldr	r0, [pc, #56]	; (8001208 <readIR+0xc0>)
 80011d0:	f003 fcce 	bl	8004b70 <HAL_GPIO_WritePin>
		break;
 80011d4:	e011      	b.n	80011fa <readIR+0xb2>
	case IR_FRONT_LEFT:
		HAL_GPIO_WritePin(FL_Emitter_GPIO_Port, FL_Emitter_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	480a      	ldr	r0, [pc, #40]	; (8001204 <readIR+0xbc>)
 80011dc:	f003 fcc8 	bl	8004b70 <HAL_GPIO_WritePin>
		//delayMicroseconds(25);
		reading = analogRead(ir);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f812 	bl	800120c <analogRead>
 80011e8:	4603      	mov	r3, r0
 80011ea:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(FL_Emitter_GPIO_Port, FL_Emitter_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <readIR+0xbc>)
 80011f2:	f003 fcbd 	bl	8004b70 <HAL_GPIO_WritePin>
		break;
 80011f6:	e000      	b.n	80011fa <readIR+0xb2>
	default:
		break;
 80011f8:	bf00      	nop
	}
	return reading;
 80011fa:	89fb      	ldrh	r3, [r7, #14]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400

0800120c <analogRead>:
/*
 This function reads the specific channel of the ADC corresponding to the correct IR
 You should not have to edit this function
 */
uint16_t analogRead(IR ir)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0}; //this initializes the IR ADC [Analog to Digital Converter]
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
    ADC_HandleTypeDef *hadc1_ptr = Get_HADC1_Ptr(); //this is a pointer to your hal_adc
 8001224:	f000 fd1c 	bl	8001c60 <Get_HADC1_Ptr>
 8001228:	4603      	mov	r3, r0
 800122a:	61fb      	str	r3, [r7, #28]
    //this pointer will also be used to read the analog value, val = HAL_ADC_GetValue(hadc1_ptr);

    //this picks the IR direction to choose the right ADC.
    switch(ir)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b03      	cmp	r3, #3
 8001230:	d816      	bhi.n	8001260 <analogRead+0x54>
 8001232:	a201      	add	r2, pc, #4	; (adr r2, 8001238 <analogRead+0x2c>)
 8001234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001238:	08001249 	.word	0x08001249
 800123c:	0800124f 	.word	0x0800124f
 8001240:	08001255 	.word	0x08001255
 8001244:	0800125b 	.word	0x0800125b
    {
        case IR_LEFT:
            sConfig.Channel = ADC_CHANNEL_12;
 8001248:	230c      	movs	r3, #12
 800124a:	60fb      	str	r3, [r7, #12]
            break;
 800124c:	e00a      	b.n	8001264 <analogRead+0x58>
        case IR_FRONT_LEFT:
            sConfig.Channel = ADC_CHANNEL_10;
 800124e:	230a      	movs	r3, #10
 8001250:	60fb      	str	r3, [r7, #12]
            break;
 8001252:	e007      	b.n	8001264 <analogRead+0x58>
        case IR_FRONT_RIGHT:
            sConfig.Channel = ADC_CHANNEL_11;
 8001254:	230b      	movs	r3, #11
 8001256:	60fb      	str	r3, [r7, #12]
            break;
 8001258:	e004      	b.n	8001264 <analogRead+0x58>
        case IR_RIGHT:
            sConfig.Channel = ADC_CHANNEL_13;
 800125a:	230d      	movs	r3, #13
 800125c:	60fb      	str	r3, [r7, #12]
            break;
 800125e:	e001      	b.n	8001264 <analogRead+0x58>
        default:
            return 0;
 8001260:	2300      	movs	r3, #0
 8001262:	e032      	b.n	80012ca <analogRead+0xbe>
    }

    sConfig.Rank = 1;
 8001264:	2301      	movs	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

    // make sure everything was set up correctly
    if (HAL_ADC_ConfigChannel(hadc1_ptr, &sConfig) != HAL_OK)
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4619      	mov	r1, r3
 8001272:	69f8      	ldr	r0, [r7, #28]
 8001274:	f002 fb36 	bl	80038e4 <HAL_ADC_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <analogRead+0x76>
    {
        return 0;
 800127e:	2300      	movs	r3, #0
 8001280:	e023      	b.n	80012ca <analogRead+0xbe>
    }

    complete = 0;
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <analogRead+0xc8>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]

    // start filling up the ADC buffer
    HAL_ADC_Start_DMA(hadc1_ptr, (uint32_t*)adc_buf, NUM_SAMPLES);
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	4913      	ldr	r1, [pc, #76]	; (80012d8 <analogRead+0xcc>)
 800128c:	69f8      	ldr	r0, [r7, #28]
 800128e:	f002 f99d 	bl	80035cc <HAL_ADC_Start_DMA>

    // wait for the buffer to become full
    while (complete == 0)
 8001292:	e000      	b.n	8001296 <analogRead+0x8a>
    {
        continue;
 8001294:	bf00      	nop
    while (complete == 0)
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <analogRead+0xc8>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0fa      	beq.n	8001294 <analogRead+0x88>
    }

    uint32_t sum = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    // calculate the sum of the measurements in order to calculate the average
    uint16_t measurement = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 80012a6:	e00a      	b.n	80012be <analogRead+0xb2>
    {
        sum += adc_buf[measurement];
 80012a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012aa:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <analogRead+0xcc>)
 80012ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b0:	461a      	mov	r2, r3
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	4413      	add	r3, r2
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
        ++measurement;
 80012b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012ba:	3301      	adds	r3, #1
 80012bc:	847b      	strh	r3, [r7, #34]	; 0x22
    while(measurement < NUM_SAMPLES) //this takes multiple measurements
 80012be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012c0:	2b7f      	cmp	r3, #127	; 0x7f
 80012c2:	d9f1      	bls.n	80012a8 <analogRead+0x9c>
    }

    return sum/NUM_SAMPLES;
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	09db      	lsrs	r3, r3, #7
 80012c8:	b29b      	uxth	r3, r3
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000408 	.word	0x20000408
 80012d8:	20000308 	.word	0x20000308

080012dc <HAL_ADC_ConvCpltCallback>:

/*
 This function is called when the ADC buffer is filled
 It stops the ADC and changes our "complete" variable to be "true"
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    // stop the ADC
    HAL_ADC_Stop_DMA(hadc);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f002 fa81 	bl	80037ec <HAL_ADC_Stop_DMA>
    complete = 1;
 80012ea:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000408 	.word	0x20000408
 80012fc:	00000000 	.word	0x00000000

08001300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
+  HAL_Init();
 8001306:	f001 ffb5 	bl	8003274 <HAL_Init>

  /* USER CODE BEGIN Init */
  Delay_Init();
 800130a:	f7ff fe1f 	bl	8000f4c <Delay_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130e:	f000 f949 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001312:	f000 fc0d 	bl	8001b30 <MX_GPIO_Init>
  MX_DMA_Init();
 8001316:	f000 fbd5 	bl	8001ac4 <MX_DMA_Init>
  MX_TIM4_Init();
 800131a:	f000 fad7 	bl	80018cc <MX_TIM4_Init>
  MX_TIM1_Init();
 800131e:	f000 fa7d 	bl	800181c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001322:	f000 fb4d 	bl	80019c0 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8001326:	f00b fb39 	bl	800c99c <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 800132a:	f000 fa49 	bl	80017c0 <MX_I2C2_Init>
  MX_ADC1_Init();
 800132e:	f000 f9a3 	bl	8001678 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001332:	f000 f9f3 	bl	800171c <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8001336:	f000 fb9b 	bl	8001a70 <MX_USART2_UART_Init>
  //Inicialización I2C



  // Timers PWM - Motores
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //L_Emitter
 800133a:	2100      	movs	r1, #0
 800133c:	487e      	ldr	r0, [pc, #504]	; (8001538 <main+0x238>)
 800133e:	f006 fc9d 	bl	8007c7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //R_Emitter
 8001342:	2104      	movs	r1, #4
 8001344:	487c      	ldr	r0, [pc, #496]	; (8001538 <main+0x238>)
 8001346:	f006 fc99 	bl	8007c7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //FR_Emitter
 800134a:	2108      	movs	r1, #8
 800134c:	487a      	ldr	r0, [pc, #488]	; (8001538 <main+0x238>)
 800134e:	f006 fc95 	bl	8007c7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //FL_Emitter
 8001352:	210c      	movs	r1, #12
 8001354:	4878      	ldr	r0, [pc, #480]	; (8001538 <main+0x238>)
 8001356:	f006 fc91 	bl	8007c7c <HAL_TIM_PWM_Start>

  // Timers ENCODERS
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800135a:	213c      	movs	r1, #60	; 0x3c
 800135c:	4877      	ldr	r0, [pc, #476]	; (800153c <main+0x23c>)
 800135e:	f006 fdfb 	bl	8007f58 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001362:	213c      	movs	r1, #60	; 0x3c
 8001364:	4876      	ldr	r0, [pc, #472]	; (8001540 <main+0x240>)
 8001366:	f006 fdf7 	bl	8007f58 <HAL_TIM_Encoder_Start>

  //MPU6500
  mpu6500_init();
 800136a:	f000 feb5 	bl	80020d8 <mpu6500_init>
  // vl6180x
  //VL6180X_Init(&hi2c2);


  //Inicialización PID
  PID(&speedMR_PID, &enc_right.position_mm, &speedMR_output, &ref_rightM_RPM, 0.008, 0.0001,  0.0004, _PID_P_ON_E, _PID_CD_DIRECT);
 800136e:	2300      	movs	r3, #0
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2301      	movs	r3, #1
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	ed9f 2b64 	vldr	d2, [pc, #400]	; 8001508 <main+0x208>
 800137a:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8001510 <main+0x210>
 800137e:	ed9f 0b66 	vldr	d0, [pc, #408]	; 8001518 <main+0x218>
 8001382:	4b70      	ldr	r3, [pc, #448]	; (8001544 <main+0x244>)
 8001384:	4a70      	ldr	r2, [pc, #448]	; (8001548 <main+0x248>)
 8001386:	4971      	ldr	r1, [pc, #452]	; (800154c <main+0x24c>)
 8001388:	4871      	ldr	r0, [pc, #452]	; (8001550 <main+0x250>)
 800138a:	f001 f835 	bl	80023f8 <PID>
  PID_SetMode(&speedMR_PID, _PID_MODE_AUTOMATIC);
 800138e:	2101      	movs	r1, #1
 8001390:	486f      	ldr	r0, [pc, #444]	; (8001550 <main+0x250>)
 8001392:	f001 f967 	bl	8002664 <PID_SetMode>
  PID_SetSampleTime(&speedMR_PID, 1);
 8001396:	2101      	movs	r1, #1
 8001398:	486d      	ldr	r0, [pc, #436]	; (8001550 <main+0x250>)
 800139a:	f001 fad7 	bl	800294c <PID_SetSampleTime>
  PID_SetOutputLimits(&speedMR_PID, 0, 1);
 800139e:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8001520 <main+0x220>
 80013a2:	ed9f 0b61 	vldr	d0, [pc, #388]	; 8001528 <main+0x228>
 80013a6:	486a      	ldr	r0, [pc, #424]	; (8001550 <main+0x250>)
 80013a8:	f001 f97a 	bl	80026a0 <PID_SetOutputLimits>

  PID(&speedML_PID, &enc_left.position_mm, &speedML_output,  &ref_leftM_RPM, 0.008, 0.0001, 0.0004, _PID_P_ON_E, _PID_CD_DIRECT);
 80013ac:	2300      	movs	r3, #0
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	2301      	movs	r3, #1
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	ed9f 2b54 	vldr	d2, [pc, #336]	; 8001508 <main+0x208>
 80013b8:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8001510 <main+0x210>
 80013bc:	ed9f 0b56 	vldr	d0, [pc, #344]	; 8001518 <main+0x218>
 80013c0:	4b64      	ldr	r3, [pc, #400]	; (8001554 <main+0x254>)
 80013c2:	4a65      	ldr	r2, [pc, #404]	; (8001558 <main+0x258>)
 80013c4:	4965      	ldr	r1, [pc, #404]	; (800155c <main+0x25c>)
 80013c6:	4866      	ldr	r0, [pc, #408]	; (8001560 <main+0x260>)
 80013c8:	f001 f816 	bl	80023f8 <PID>
  PID_SetMode(&speedML_PID, _PID_MODE_AUTOMATIC);
 80013cc:	2101      	movs	r1, #1
 80013ce:	4864      	ldr	r0, [pc, #400]	; (8001560 <main+0x260>)
 80013d0:	f001 f948 	bl	8002664 <PID_SetMode>
  PID_SetSampleTime(&speedML_PID, 1);
 80013d4:	2101      	movs	r1, #1
 80013d6:	4862      	ldr	r0, [pc, #392]	; (8001560 <main+0x260>)
 80013d8:	f001 fab8 	bl	800294c <PID_SetSampleTime>
  PID_SetOutputLimits(&speedML_PID, 0, 1);
 80013dc:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8001520 <main+0x220>
 80013e0:	ed9f 0b51 	vldr	d0, [pc, #324]	; 8001528 <main+0x228>
 80013e4:	485e      	ldr	r0, [pc, #376]	; (8001560 <main+0x260>)
 80013e6:	f001 f95b 	bl	80026a0 <PID_SetOutputLimits>

  double zero = 0;
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	e9c7 2300 	strd	r2, r3, [r7]
  PID(&speedDifference_PID, &speedDifference, &speedDifference_output,  &zero, 0.008, 0.0001, 0.0004, _PID_P_ON_E, _PID_CD_DIRECT);
 80013f6:	463b      	mov	r3, r7
 80013f8:	2200      	movs	r2, #0
 80013fa:	9201      	str	r2, [sp, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	9200      	str	r2, [sp, #0]
 8001400:	ed9f 2b41 	vldr	d2, [pc, #260]	; 8001508 <main+0x208>
 8001404:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8001510 <main+0x210>
 8001408:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8001518 <main+0x218>
 800140c:	4a55      	ldr	r2, [pc, #340]	; (8001564 <main+0x264>)
 800140e:	4956      	ldr	r1, [pc, #344]	; (8001568 <main+0x268>)
 8001410:	4856      	ldr	r0, [pc, #344]	; (800156c <main+0x26c>)
 8001412:	f000 fff1 	bl	80023f8 <PID>
  PID_SetMode(&speedDifference_PID, _PID_MODE_AUTOMATIC);
 8001416:	2101      	movs	r1, #1
 8001418:	4854      	ldr	r0, [pc, #336]	; (800156c <main+0x26c>)
 800141a:	f001 f923 	bl	8002664 <PID_SetMode>
  PID_SetSampleTime(&speedDifference_PID, 1);
 800141e:	2101      	movs	r1, #1
 8001420:	4852      	ldr	r0, [pc, #328]	; (800156c <main+0x26c>)
 8001422:	f001 fa93 	bl	800294c <PID_SetSampleTime>
  PID_SetOutputLimits(&speedDifference_PID, 0, 1);
 8001426:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8001520 <main+0x220>
 800142a:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 8001528 <main+0x228>
 800142e:	484f      	ldr	r0, [pc, #316]	; (800156c <main+0x26c>)
 8001430:	f001 f936 	bl	80026a0 <PID_SetOutputLimits>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(BLUE_GPIO_Port, BLUE_Pin);
 8001434:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001438:	484d      	ldr	r0, [pc, #308]	; (8001570 <main+0x270>)
 800143a:	f003 fbb2 	bl	8004ba2 <HAL_GPIO_TogglePin>


	/*Lectura IR*/
	right_IR = readIR(IR_RIGHT);
 800143e:	2003      	movs	r0, #3
 8001440:	f7ff fe82 	bl	8001148 <readIR>
 8001444:	4603      	mov	r3, r0
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b4a      	ldr	r3, [pc, #296]	; (8001574 <main+0x274>)
 800144a:	801a      	strh	r2, [r3, #0]
	left_IR = readIR(IR_LEFT);//
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff fe7b 	bl	8001148 <readIR>
 8001452:	4603      	mov	r3, r0
 8001454:	b21a      	sxth	r2, r3
 8001456:	4b48      	ldr	r3, [pc, #288]	; (8001578 <main+0x278>)
 8001458:	801a      	strh	r2, [r3, #0]
	front_left_IR = readIR(IR_FRONT_LEFT);
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff fe74 	bl	8001148 <readIR>
 8001460:	4603      	mov	r3, r0
 8001462:	b21a      	sxth	r2, r3
 8001464:	4b45      	ldr	r3, [pc, #276]	; (800157c <main+0x27c>)
 8001466:	801a      	strh	r2, [r3, #0]
	front_right_IR = readIR(IR_FRONT_RIGHT);
 8001468:	2002      	movs	r0, #2
 800146a:	f7ff fe6d 	bl	8001148 <readIR>
 800146e:	4603      	mov	r3, r0
 8001470:	b21a      	sxth	r2, r3
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <main+0x280>)
 8001474:	801a      	strh	r2, [r3, #0]

	/*Lectura del vl6180x*/
	//tof = VL6180X_readRange();

	//Lectura del MPU
	mpu_data = mpu6500_read();
 8001476:	f000 feab 	bl	80021d0 <mpu6500_read>
 800147a:	4603      	mov	r3, r0
 800147c:	4a41      	ldr	r2, [pc, #260]	; (8001584 <main+0x284>)
 800147e:	6013      	str	r3, [r2, #0]


	//Lectura VOltaje Bateria
	HAL_ADC_Start(&hadc2);
 8001480:	4841      	ldr	r0, [pc, #260]	; (8001588 <main+0x288>)
 8001482:	f001 ffd1 	bl	8003428 <HAL_ADC_Start>
	vBat = HAL_ADC_GetValue(&hadc2) * (7.76/4095.0);
 8001486:	4840      	ldr	r0, [pc, #256]	; (8001588 <main+0x288>)
 8001488:	f002 fa0a 	bl	80038a0 <HAL_ADC_GetValue>
 800148c:	4603      	mov	r3, r0
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f838 	bl	8000504 <__aeabi_ui2d>
 8001494:	a326      	add	r3, pc, #152	; (adr r3, 8001530 <main+0x230>)
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	f7ff f8ad 	bl	80005f8 <__aeabi_dmul>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff fb7f 	bl	8000ba8 <__aeabi_d2f>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a37      	ldr	r2, [pc, #220]	; (800158c <main+0x28c>)
 80014ae:	6013      	str	r3, [r2, #0]


	//Pruebas motores
	if(HAL_GPIO_ReadPin(BOTON1_GPIO_Port, BOTON1_Pin) == 0){
 80014b0:	2102      	movs	r1, #2
 80014b2:	4837      	ldr	r0, [pc, #220]	; (8001590 <main+0x290>)
 80014b4:	f003 fb44 	bl	8004b40 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10e      	bne.n	80014dc <main+0x1dc>
		 ref_rightM_RPM = 360;
 80014be:	4921      	ldr	r1, [pc, #132]	; (8001544 <main+0x244>)
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	4b33      	ldr	r3, [pc, #204]	; (8001594 <main+0x294>)
 80014c6:	e9c1 2300 	strd	r2, r3, [r1]
		 ref_leftM_RPM = 360;
 80014ca:	4922      	ldr	r1, [pc, #136]	; (8001554 <main+0x254>)
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	4b30      	ldr	r3, [pc, #192]	; (8001594 <main+0x294>)
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]

		 enable_motors = 1;
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <main+0x298>)
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
	}


	//USB DATA
	print_sensorData();
 80014dc:	f000 fbca 	bl	8001c74 <print_sensorData>
	//CDC_Transmit_HS(usb_data, strlen(usb_data));
	HAL_UART_Transmit(&huart2, usb_data, strlen (usb_data), 100);
 80014e0:	482e      	ldr	r0, [pc, #184]	; (800159c <main+0x29c>)
 80014e2:	f7fe fe75 	bl	80001d0 <strlen>
 80014e6:	4603      	mov	r3, r0
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	492b      	ldr	r1, [pc, #172]	; (800159c <main+0x29c>)
 80014ee:	482c      	ldr	r0, [pc, #176]	; (80015a0 <main+0x2a0>)
 80014f0:	f007 fb0f 	bl	8008b12 <HAL_UART_Transmit>
	memset(usb_data, '\0', 300);
 80014f4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014f8:	2100      	movs	r1, #0
 80014fa:	4828      	ldr	r0, [pc, #160]	; (800159c <main+0x29c>)
 80014fc:	f00b ff92 	bl	800d424 <memset>
  {
 8001500:	e798      	b.n	8001434 <main+0x134>
 8001502:	bf00      	nop
 8001504:	f3af 8000 	nop.w
 8001508:	eb1c432d 	.word	0xeb1c432d
 800150c:	3f3a36e2 	.word	0x3f3a36e2
 8001510:	eb1c432d 	.word	0xeb1c432d
 8001514:	3f1a36e2 	.word	0x3f1a36e2
 8001518:	d2f1a9fc 	.word	0xd2f1a9fc
 800151c:	3f80624d 	.word	0x3f80624d
 8001520:	00000000 	.word	0x00000000
 8001524:	3ff00000 	.word	0x3ff00000
	...
 8001530:	33870f7b 	.word	0x33870f7b
 8001534:	3f5f0c2e 	.word	0x3f5f0c2e
 8001538:	20000598 	.word	0x20000598
 800153c:	20000550 	.word	0x20000550
 8001540:	200005e0 	.word	0x200005e0
 8001544:	20000008 	.word	0x20000008
 8001548:	20000f50 	.word	0x20000f50
 800154c:	200006f0 	.word	0x200006f0
 8001550:	20000f70 	.word	0x20000f70
 8001554:	20000010 	.word	0x20000010
 8001558:	20000f58 	.word	0x20000f58
 800155c:	20000720 	.word	0x20000720
 8001560:	20000fe0 	.word	0x20000fe0
 8001564:	20000f60 	.word	0x20000f60
 8001568:	20000f48 	.word	0x20000f48
 800156c:	20001050 	.word	0x20001050
 8001570:	40020800 	.word	0x40020800
 8001574:	20000736 	.word	0x20000736
 8001578:	20000734 	.word	0x20000734
 800157c:	20000738 	.word	0x20000738
 8001580:	2000073a 	.word	0x2000073a
 8001584:	20000730 	.word	0x20000730
 8001588:	20000454 	.word	0x20000454
 800158c:	20000740 	.word	0x20000740
 8001590:	40020000 	.word	0x40020000
 8001594:	40768000 	.word	0x40768000
 8001598:	20000f68 	.word	0x20000f68
 800159c:	20000744 	.word	0x20000744
 80015a0:	20000628 	.word	0x20000628

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b094      	sub	sp, #80	; 0x50
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0320 	add.w	r3, r7, #32
 80015ae:	2230      	movs	r2, #48	; 0x30
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f00b ff36 	bl	800d424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <SystemClock_Config+0xcc>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	4a27      	ldr	r2, [pc, #156]	; (8001670 <SystemClock_Config+0xcc>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	; 0x40
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <SystemClock_Config+0xcc>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <SystemClock_Config+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a21      	ldr	r2, [pc, #132]	; (8001674 <SystemClock_Config+0xd0>)
 80015ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <SystemClock_Config+0xd0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001600:	2301      	movs	r3, #1
 8001602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160a:	2302      	movs	r3, #2
 800160c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800160e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001614:	2304      	movs	r3, #4
 8001616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001618:	23a8      	movs	r3, #168	; 0xa8
 800161a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800161c:	2302      	movs	r3, #2
 800161e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001620:	2307      	movs	r3, #7
 8001622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001624:	f107 0320 	add.w	r3, r7, #32
 8001628:	4618      	mov	r0, r3
 800162a:	f005 fe3f 	bl	80072ac <HAL_RCC_OscConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001634:	f000 fc50 	bl	8001ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001638:	230f      	movs	r3, #15
 800163a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163c:	2302      	movs	r3, #2
 800163e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001644:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2105      	movs	r1, #5
 8001656:	4618      	mov	r0, r3
 8001658:	f006 f8a0 	bl	800779c <HAL_RCC_ClockConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001662:	f000 fc39 	bl	8001ed8 <Error_Handler>
  }
}
 8001666:	bf00      	nop
 8001668:	3750      	adds	r7, #80	; 0x50
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000

08001678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800167e:	463b      	mov	r3, r7
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <MX_ADC1_Init+0x98>)
 800168c:	4a21      	ldr	r2, [pc, #132]	; (8001714 <MX_ADC1_Init+0x9c>)
 800168e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <MX_ADC1_Init+0x98>)
 8001692:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001696:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <MX_ADC1_Init+0x98>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <MX_ADC1_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <MX_ADC1_Init+0x98>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <MX_ADC1_Init+0x98>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_ADC1_Init+0x98>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_ADC1_Init+0x98>)
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <MX_ADC1_Init+0xa0>)
 80016bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_ADC1_Init+0x98>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_ADC1_Init+0x98>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_ADC1_Init+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_ADC1_Init+0x98>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <MX_ADC1_Init+0x98>)
 80016da:	f001 fe61 	bl	80033a0 <HAL_ADC_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016e4:	f000 fbf8 	bl	8001ed8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80016e8:	230a      	movs	r3, #10
 80016ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016f4:	463b      	mov	r3, r7
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_ADC1_Init+0x98>)
 80016fa:	f002 f8f3 	bl	80038e4 <HAL_ADC_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001704:	f000 fbe8 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2000040c 	.word	0x2000040c
 8001714:	40012000 	.word	0x40012000
 8001718:	0f000001 	.word	0x0f000001

0800171c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001722:	463b      	mov	r3, r7
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800172e:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <MX_ADC2_Init+0x98>)
 8001730:	4a21      	ldr	r2, [pc, #132]	; (80017b8 <MX_ADC2_Init+0x9c>)
 8001732:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <MX_ADC2_Init+0x98>)
 8001736:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800173a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <MX_ADC2_Init+0x98>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <MX_ADC2_Init+0x98>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_ADC2_Init+0x98>)
 800174a:	2200      	movs	r2, #0
 800174c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <MX_ADC2_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_ADC2_Init+0x98>)
 8001758:	2200      	movs	r2, #0
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_ADC2_Init+0x98>)
 800175e:	4a17      	ldr	r2, [pc, #92]	; (80017bc <MX_ADC2_Init+0xa0>)
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_ADC2_Init+0x98>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_ADC2_Init+0x98>)
 800176a:	2201      	movs	r2, #1
 800176c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_ADC2_Init+0x98>)
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_ADC2_Init+0x98>)
 8001778:	2201      	movs	r2, #1
 800177a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800177c:	480d      	ldr	r0, [pc, #52]	; (80017b4 <MX_ADC2_Init+0x98>)
 800177e:	f001 fe0f 	bl	80033a0 <HAL_ADC_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001788:	f000 fba6 	bl	8001ed8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800178c:	2309      	movs	r3, #9
 800178e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001790:	2301      	movs	r3, #1
 8001792:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001798:	463b      	mov	r3, r7
 800179a:	4619      	mov	r1, r3
 800179c:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_ADC2_Init+0x98>)
 800179e:	f002 f8a1 	bl	80038e4 <HAL_ADC_ConfigChannel>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80017a8:	f000 fb96 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000454 	.word	0x20000454
 80017b8:	40012100 	.word	0x40012100
 80017bc:	0f000001 	.word	0x0f000001

080017c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_I2C2_Init+0x50>)
 80017c6:	4a13      	ldr	r2, [pc, #76]	; (8001814 <MX_I2C2_Init+0x54>)
 80017c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_I2C2_Init+0x50>)
 80017cc:	4a12      	ldr	r2, [pc, #72]	; (8001818 <MX_I2C2_Init+0x58>)
 80017ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_I2C2_Init+0x50>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_I2C2_Init+0x50>)
 80017d8:	2200      	movs	r2, #0
 80017da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_I2C2_Init+0x50>)
 80017de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <MX_I2C2_Init+0x50>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_I2C2_Init+0x50>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <MX_I2C2_Init+0x50>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_I2C2_Init+0x50>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <MX_I2C2_Init+0x50>)
 80017fe:	f003 f9eb 	bl	8004bd8 <HAL_I2C_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001808:	f000 fb66 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200004fc 	.word	0x200004fc
 8001814:	40005800 	.word	0x40005800
 8001818:	00061a80 	.word	0x00061a80

0800181c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	2224      	movs	r2, #36	; 0x24
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f00b fdfa 	bl	800d424 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001838:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <MX_TIM1_Init+0xa8>)
 800183a:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <MX_TIM1_Init+0xac>)
 800183c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <MX_TIM1_Init+0xa8>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <MX_TIM1_Init+0xa8>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800184a:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <MX_TIM1_Init+0xa8>)
 800184c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001850:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001852:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <MX_TIM1_Init+0xa8>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <MX_TIM1_Init+0xa8>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <MX_TIM1_Init+0xa8>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001864:	2303      	movs	r3, #3
 8001866:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800186c:	2301      	movs	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800187c:	2301      	movs	r3, #1
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	4619      	mov	r1, r3
 800188e:	480d      	ldr	r0, [pc, #52]	; (80018c4 <MX_TIM1_Init+0xa8>)
 8001890:	f006 fabc 	bl	8007e0c <HAL_TIM_Encoder_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800189a:	f000 fb1d 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	4619      	mov	r1, r3
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <MX_TIM1_Init+0xa8>)
 80018ac:	f007 f854 	bl	8008958 <HAL_TIMEx_MasterConfigSynchronization>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80018b6:	f000 fb0f 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	3730      	adds	r7, #48	; 0x30
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000550 	.word	0x20000550
 80018c8:	40010000 	.word	0x40010000

080018cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d2:	f107 0320 	add.w	r3, r7, #32
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	615a      	str	r2, [r3, #20]
 80018ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <MX_TIM4_Init+0xec>)
 80018f0:	4a32      	ldr	r2, [pc, #200]	; (80019bc <MX_TIM4_Init+0xf0>)
 80018f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018f4:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <MX_TIM4_Init+0xec>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <MX_TIM4_Init+0xec>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001900:	4b2d      	ldr	r3, [pc, #180]	; (80019b8 <MX_TIM4_Init+0xec>)
 8001902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001906:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001908:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <MX_TIM4_Init+0xec>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <MX_TIM4_Init+0xec>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001914:	4828      	ldr	r0, [pc, #160]	; (80019b8 <MX_TIM4_Init+0xec>)
 8001916:	f006 f961 	bl	8007bdc <HAL_TIM_PWM_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001920:	f000 fada 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800192c:	f107 0320 	add.w	r3, r7, #32
 8001930:	4619      	mov	r1, r3
 8001932:	4821      	ldr	r0, [pc, #132]	; (80019b8 <MX_TIM4_Init+0xec>)
 8001934:	f007 f810 	bl	8008958 <HAL_TIMEx_MasterConfigSynchronization>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800193e:	f000 facb 	bl	8001ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001942:	2360      	movs	r3, #96	; 0x60
 8001944:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2200      	movs	r2, #0
 8001956:	4619      	mov	r1, r3
 8001958:	4817      	ldr	r0, [pc, #92]	; (80019b8 <MX_TIM4_Init+0xec>)
 800195a:	f006 fc93 	bl	8008284 <HAL_TIM_PWM_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001964:	f000 fab8 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2204      	movs	r2, #4
 800196c:	4619      	mov	r1, r3
 800196e:	4812      	ldr	r0, [pc, #72]	; (80019b8 <MX_TIM4_Init+0xec>)
 8001970:	f006 fc88 	bl	8008284 <HAL_TIM_PWM_ConfigChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800197a:	f000 faad 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2208      	movs	r2, #8
 8001982:	4619      	mov	r1, r3
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <MX_TIM4_Init+0xec>)
 8001986:	f006 fc7d 	bl	8008284 <HAL_TIM_PWM_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001990:	f000 faa2 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	220c      	movs	r2, #12
 8001998:	4619      	mov	r1, r3
 800199a:	4807      	ldr	r0, [pc, #28]	; (80019b8 <MX_TIM4_Init+0xec>)
 800199c:	f006 fc72 	bl	8008284 <HAL_TIM_PWM_ConfigChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80019a6:	f000 fa97 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019aa:	4803      	ldr	r0, [pc, #12]	; (80019b8 <MX_TIM4_Init+0xec>)
 80019ac:	f001 f9cc 	bl	8002d48 <HAL_TIM_MspPostInit>

}
 80019b0:	bf00      	nop
 80019b2:	3728      	adds	r7, #40	; 0x28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000598 	.word	0x20000598
 80019bc:	40000800 	.word	0x40000800

080019c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	; 0x30
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	2224      	movs	r2, #36	; 0x24
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f00b fd28 	bl	800d424 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <MX_TIM8_Init+0xa8>)
 80019de:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <MX_TIM8_Init+0xac>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019e2:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <MX_TIM8_Init+0xa8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <MX_TIM8_Init+0xa8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <MX_TIM8_Init+0xa8>)
 80019f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <MX_TIM8_Init+0xa8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <MX_TIM8_Init+0xa8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <MX_TIM8_Init+0xa8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a10:	2301      	movs	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a20:	2301      	movs	r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	4619      	mov	r1, r3
 8001a32:	480d      	ldr	r0, [pc, #52]	; (8001a68 <MX_TIM8_Init+0xa8>)
 8001a34:	f006 f9ea 	bl	8007e0c <HAL_TIM_Encoder_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001a3e:	f000 fa4b 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4806      	ldr	r0, [pc, #24]	; (8001a68 <MX_TIM8_Init+0xa8>)
 8001a50:	f006 ff82 	bl	8008958 <HAL_TIMEx_MasterConfigSynchronization>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001a5a:	f000 fa3d 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	3730      	adds	r7, #48	; 0x30
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200005e0 	.word	0x200005e0
 8001a6c:	40010400 	.word	0x40010400

08001a70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <MX_USART2_UART_Init+0x50>)
 8001a78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a96:	220c      	movs	r2, #12
 8001a98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_USART2_UART_Init+0x4c>)
 8001aa8:	f006 ffe6 	bl	8008a78 <HAL_UART_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ab2:	f000 fa11 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000628 	.word	0x20000628
 8001ac0:	40004400 	.word	0x40004400

08001ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <MX_DMA_Init+0x68>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <MX_DMA_Init+0x68>)
 8001ad4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <MX_DMA_Init+0x68>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <MX_DMA_Init+0x68>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a0f      	ldr	r2, [pc, #60]	; (8001b2c <MX_DMA_Init+0x68>)
 8001af0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <MX_DMA_Init+0x68>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2011      	movs	r0, #17
 8001b08:	f002 fa67 	bl	8003fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001b0c:	2011      	movs	r0, #17
 8001b0e:	f002 fa80 	bl	8004012 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2038      	movs	r0, #56	; 0x38
 8001b18:	f002 fa5f 	bl	8003fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b1c:	2038      	movs	r0, #56	; 0x38
 8001b1e:	f002 fa78 	bl	8004012 <HAL_NVIC_EnableIRQ>

}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800

08001b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <MX_GPIO_Init+0x120>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a40      	ldr	r2, [pc, #256]	; (8001c50 <MX_GPIO_Init+0x120>)
 8001b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b3e      	ldr	r3, [pc, #248]	; (8001c50 <MX_GPIO_Init+0x120>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <MX_GPIO_Init+0x120>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a39      	ldr	r2, [pc, #228]	; (8001c50 <MX_GPIO_Init+0x120>)
 8001b6c:	f043 0304 	orr.w	r3, r3, #4
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <MX_GPIO_Init+0x120>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <MX_GPIO_Init+0x120>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a32      	ldr	r2, [pc, #200]	; (8001c50 <MX_GPIO_Init+0x120>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <MX_GPIO_Init+0x120>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	4b2c      	ldr	r3, [pc, #176]	; (8001c50 <MX_GPIO_Init+0x120>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <MX_GPIO_Init+0x120>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <MX_GPIO_Init+0x120>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_Emitter_Pin|L_Emitter_Pin|FL_Emitter_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	21e0      	movs	r1, #224	; 0xe0
 8001bba:	4826      	ldr	r0, [pc, #152]	; (8001c54 <MX_GPIO_Init+0x124>)
 8001bbc:	f002 ffd8 	bl	8004b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FR_Emitter_GPIO_Port, FR_Emitter_Pin, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4824      	ldr	r0, [pc, #144]	; (8001c58 <MX_GPIO_Init+0x128>)
 8001bc6:	f002 ffd3 	bl	8004b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd0:	4822      	ldr	r0, [pc, #136]	; (8001c5c <MX_GPIO_Init+0x12c>)
 8001bd2:	f002 ffcd 	bl	8004b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOTON1_Pin BOTON2_Pin */
  GPIO_InitStruct.Pin = BOTON1_Pin|BOTON2_Pin;
 8001bd6:	f640 0302 	movw	r3, #2050	; 0x802
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	481a      	ldr	r0, [pc, #104]	; (8001c54 <MX_GPIO_Init+0x124>)
 8001bec:	f002 fe0c 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_Emitter_Pin L_Emitter_Pin FL_Emitter_Pin */
  GPIO_InitStruct.Pin = R_Emitter_Pin|L_Emitter_Pin|FL_Emitter_Pin;
 8001bf0:	23e0      	movs	r3, #224	; 0xe0
 8001bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4813      	ldr	r0, [pc, #76]	; (8001c54 <MX_GPIO_Init+0x124>)
 8001c08:	f002 fdfe 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pin : FR_Emitter_Pin */
  GPIO_InitStruct.Pin = FR_Emitter_Pin;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FR_Emitter_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_GPIO_Init+0x128>)
 8001c24:	f002 fdf0 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin;
 8001c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4806      	ldr	r0, [pc, #24]	; (8001c5c <MX_GPIO_Init+0x12c>)
 8001c42:	f002 fde1 	bl	8004808 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c46:	bf00      	nop
 8001c48:	3728      	adds	r7, #40	; 0x28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020000 	.word	0x40020000
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	40020800 	.word	0x40020800

08001c60 <Get_HADC1_Ptr>:

/* USER CODE BEGIN 4 */
ADC_HandleTypeDef* Get_HADC1_Ptr(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
    return &hadc1;
 8001c64:	4b02      	ldr	r3, [pc, #8]	; (8001c70 <Get_HADC1_Ptr+0x10>)
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	2000040c 	.word	0x2000040c

08001c74 <print_sensorData>:
	sprintf(text_buffer, "%d", HAL_GetTick());
	strncat(usb_data, text_buffer, strlen(text_buffer));
}


void print_sensorData(){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	sprintf(text_buffer, "\n\n L: %d, ", left_IR);
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <print_sensorData+0x20c>)
 8001c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4980      	ldr	r1, [pc, #512]	; (8001e84 <print_sensorData+0x210>)
 8001c82:	4881      	ldr	r0, [pc, #516]	; (8001e88 <print_sensorData+0x214>)
 8001c84:	f00c f858 	bl	800dd38 <siprintf>
	strncat(usb_data, text_buffer, strlen(text_buffer));
 8001c88:	487f      	ldr	r0, [pc, #508]	; (8001e88 <print_sensorData+0x214>)
 8001c8a:	f7fe faa1 	bl	80001d0 <strlen>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	497d      	ldr	r1, [pc, #500]	; (8001e88 <print_sensorData+0x214>)
 8001c94:	487d      	ldr	r0, [pc, #500]	; (8001e8c <print_sensorData+0x218>)
 8001c96:	f00c f86f 	bl	800dd78 <strncat>
	sprintf(text_buffer, "FL: %d, ", front_left_IR);
 8001c9a:	4b7d      	ldr	r3, [pc, #500]	; (8001e90 <print_sensorData+0x21c>)
 8001c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	497c      	ldr	r1, [pc, #496]	; (8001e94 <print_sensorData+0x220>)
 8001ca4:	4878      	ldr	r0, [pc, #480]	; (8001e88 <print_sensorData+0x214>)
 8001ca6:	f00c f847 	bl	800dd38 <siprintf>
	strncat(usb_data, text_buffer, strlen(text_buffer));
 8001caa:	4877      	ldr	r0, [pc, #476]	; (8001e88 <print_sensorData+0x214>)
 8001cac:	f7fe fa90 	bl	80001d0 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4974      	ldr	r1, [pc, #464]	; (8001e88 <print_sensorData+0x214>)
 8001cb6:	4875      	ldr	r0, [pc, #468]	; (8001e8c <print_sensorData+0x218>)
 8001cb8:	f00c f85e 	bl	800dd78 <strncat>
	sprintf(text_buffer, "FR: %d, ", front_right_IR);
 8001cbc:	4b76      	ldr	r3, [pc, #472]	; (8001e98 <print_sensorData+0x224>)
 8001cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4975      	ldr	r1, [pc, #468]	; (8001e9c <print_sensorData+0x228>)
 8001cc6:	4870      	ldr	r0, [pc, #448]	; (8001e88 <print_sensorData+0x214>)
 8001cc8:	f00c f836 	bl	800dd38 <siprintf>
	strncat(usb_data, text_buffer, strlen(text_buffer));
 8001ccc:	486e      	ldr	r0, [pc, #440]	; (8001e88 <print_sensorData+0x214>)
 8001cce:	f7fe fa7f 	bl	80001d0 <strlen>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	496c      	ldr	r1, [pc, #432]	; (8001e88 <print_sensorData+0x214>)
 8001cd8:	486c      	ldr	r0, [pc, #432]	; (8001e8c <print_sensorData+0x218>)
 8001cda:	f00c f84d 	bl	800dd78 <strncat>
	sprintf(text_buffer, "R: %d, ", right_IR);
 8001cde:	4b70      	ldr	r3, [pc, #448]	; (8001ea0 <print_sensorData+0x22c>)
 8001ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	496f      	ldr	r1, [pc, #444]	; (8001ea4 <print_sensorData+0x230>)
 8001ce8:	4867      	ldr	r0, [pc, #412]	; (8001e88 <print_sensorData+0x214>)
 8001cea:	f00c f825 	bl	800dd38 <siprintf>
	strncat(usb_data, text_buffer, strlen(text_buffer));
 8001cee:	4866      	ldr	r0, [pc, #408]	; (8001e88 <print_sensorData+0x214>)
 8001cf0:	f7fe fa6e 	bl	80001d0 <strlen>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4963      	ldr	r1, [pc, #396]	; (8001e88 <print_sensorData+0x214>)
 8001cfa:	4864      	ldr	r0, [pc, #400]	; (8001e8c <print_sensorData+0x218>)
 8001cfc:	f00c f83c 	bl	800dd78 <strncat>
	sprintf(text_buffer, "F: %d \n", tof);
 8001d00:	4b69      	ldr	r3, [pc, #420]	; (8001ea8 <print_sensorData+0x234>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4969      	ldr	r1, [pc, #420]	; (8001eac <print_sensorData+0x238>)
 8001d08:	485f      	ldr	r0, [pc, #380]	; (8001e88 <print_sensorData+0x214>)
 8001d0a:	f00c f815 	bl	800dd38 <siprintf>
	strncat(usb_data, text_buffer, strlen(text_buffer));
 8001d0e:	485e      	ldr	r0, [pc, #376]	; (8001e88 <print_sensorData+0x214>)
 8001d10:	f7fe fa5e 	bl	80001d0 <strlen>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	495b      	ldr	r1, [pc, #364]	; (8001e88 <print_sensorData+0x214>)
 8001d1a:	485c      	ldr	r0, [pc, #368]	; (8001e8c <print_sensorData+0x218>)
 8001d1c:	f00c f82c 	bl	800dd78 <strncat>

	//DATA - MPU
	sprintf(text_buffer, "AX: %f, ",  mpu_data[0]);
 8001d20:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <print_sensorData+0x23c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fc0e 	bl	8000548 <__aeabi_f2d>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4960      	ldr	r1, [pc, #384]	; (8001eb4 <print_sensorData+0x240>)
 8001d32:	4855      	ldr	r0, [pc, #340]	; (8001e88 <print_sensorData+0x214>)
 8001d34:	f00c f800 	bl	800dd38 <siprintf>
	strncat(usb_data, text_buffer, strlen(text_buffer));
 8001d38:	4853      	ldr	r0, [pc, #332]	; (8001e88 <print_sensorData+0x214>)
 8001d3a:	f7fe fa49 	bl	80001d0 <strlen>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	4951      	ldr	r1, [pc, #324]	; (8001e88 <print_sensorData+0x214>)
 8001d44:	4851      	ldr	r0, [pc, #324]	; (8001e8c <print_sensorData+0x218>)
 8001d46:	f00c f817 	bl	800dd78 <strncat>
	sprintf(text_buffer, "AY: %f, ", mpu_data[1]);
 8001d4a:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <print_sensorData+0x23c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fbf8 	bl	8000548 <__aeabi_f2d>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4956      	ldr	r1, [pc, #344]	; (8001eb8 <print_sensorData+0x244>)
 8001d5e:	484a      	ldr	r0, [pc, #296]	; (8001e88 <print_sensorData+0x214>)
 8001d60:	f00b ffea 	bl	800dd38 <siprintf>
	strncat(usb_data, text_buffer, strlen(text_buffer));
 8001d64:	4848      	ldr	r0, [pc, #288]	; (8001e88 <print_sensorData+0x214>)
 8001d66:	f7fe fa33 	bl	80001d0 <strlen>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4946      	ldr	r1, [pc, #280]	; (8001e88 <print_sensorData+0x214>)
 8001d70:	4846      	ldr	r0, [pc, #280]	; (8001e8c <print_sensorData+0x218>)
 8001d72:	f00c f801 	bl	800dd78 <strncat>
	sprintf(text_buffer, "AZ: %f, ", mpu_data[2]);
 8001d76:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <print_sensorData+0x23c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3308      	adds	r3, #8
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fbe2 	bl	8000548 <__aeabi_f2d>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	494c      	ldr	r1, [pc, #304]	; (8001ebc <print_sensorData+0x248>)
 8001d8a:	483f      	ldr	r0, [pc, #252]	; (8001e88 <print_sensorData+0x214>)
 8001d8c:	f00b ffd4 	bl	800dd38 <siprintf>
	strncat(usb_data, text_buffer, strlen(text_buffer));
 8001d90:	483d      	ldr	r0, [pc, #244]	; (8001e88 <print_sensorData+0x214>)
 8001d92:	f7fe fa1d 	bl	80001d0 <strlen>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	493b      	ldr	r1, [pc, #236]	; (8001e88 <print_sensorData+0x214>)
 8001d9c:	483b      	ldr	r0, [pc, #236]	; (8001e8c <print_sensorData+0x218>)
 8001d9e:	f00b ffeb 	bl	800dd78 <strncat>

	sprintf(text_buffer, "T: %f \n", mpu_data[3]);
 8001da2:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <print_sensorData+0x23c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	330c      	adds	r3, #12
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbcc 	bl	8000548 <__aeabi_f2d>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4942      	ldr	r1, [pc, #264]	; (8001ec0 <print_sensorData+0x24c>)
 8001db6:	4834      	ldr	r0, [pc, #208]	; (8001e88 <print_sensorData+0x214>)
 8001db8:	f00b ffbe 	bl	800dd38 <siprintf>
	strncat(usb_data, text_buffer, strlen(text_buffer));
 8001dbc:	4832      	ldr	r0, [pc, #200]	; (8001e88 <print_sensorData+0x214>)
 8001dbe:	f7fe fa07 	bl	80001d0 <strlen>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4930      	ldr	r1, [pc, #192]	; (8001e88 <print_sensorData+0x214>)
 8001dc8:	4830      	ldr	r0, [pc, #192]	; (8001e8c <print_sensorData+0x218>)
 8001dca:	f00b ffd5 	bl	800dd78 <strncat>

	sprintf(text_buffer, "GX: %f, ", mpu_data[4]);
 8001dce:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <print_sensorData+0x23c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3310      	adds	r3, #16
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fbb6 	bl	8000548 <__aeabi_f2d>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4938      	ldr	r1, [pc, #224]	; (8001ec4 <print_sensorData+0x250>)
 8001de2:	4829      	ldr	r0, [pc, #164]	; (8001e88 <print_sensorData+0x214>)
 8001de4:	f00b ffa8 	bl	800dd38 <siprintf>
	strncat(usb_data, text_buffer, strlen(text_buffer));
 8001de8:	4827      	ldr	r0, [pc, #156]	; (8001e88 <print_sensorData+0x214>)
 8001dea:	f7fe f9f1 	bl	80001d0 <strlen>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	4925      	ldr	r1, [pc, #148]	; (8001e88 <print_sensorData+0x214>)
 8001df4:	4825      	ldr	r0, [pc, #148]	; (8001e8c <print_sensorData+0x218>)
 8001df6:	f00b ffbf 	bl	800dd78 <strncat>
	sprintf(text_buffer, "GY: %f, ", mpu_data[5]);
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <print_sensorData+0x23c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3314      	adds	r3, #20
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fba0 	bl	8000548 <__aeabi_f2d>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	492e      	ldr	r1, [pc, #184]	; (8001ec8 <print_sensorData+0x254>)
 8001e0e:	481e      	ldr	r0, [pc, #120]	; (8001e88 <print_sensorData+0x214>)
 8001e10:	f00b ff92 	bl	800dd38 <siprintf>
	strncat(usb_data, text_buffer, strlen(text_buffer));
 8001e14:	481c      	ldr	r0, [pc, #112]	; (8001e88 <print_sensorData+0x214>)
 8001e16:	f7fe f9db 	bl	80001d0 <strlen>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	491a      	ldr	r1, [pc, #104]	; (8001e88 <print_sensorData+0x214>)
 8001e20:	481a      	ldr	r0, [pc, #104]	; (8001e8c <print_sensorData+0x218>)
 8001e22:	f00b ffa9 	bl	800dd78 <strncat>
	sprintf(text_buffer, "GZ: %f, ", mpu_data[6]);
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <print_sensorData+0x23c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb8a 	bl	8000548 <__aeabi_f2d>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4924      	ldr	r1, [pc, #144]	; (8001ecc <print_sensorData+0x258>)
 8001e3a:	4813      	ldr	r0, [pc, #76]	; (8001e88 <print_sensorData+0x214>)
 8001e3c:	f00b ff7c 	bl	800dd38 <siprintf>
	strncat(usb_data, text_buffer, strlen(text_buffer));
 8001e40:	4811      	ldr	r0, [pc, #68]	; (8001e88 <print_sensorData+0x214>)
 8001e42:	f7fe f9c5 	bl	80001d0 <strlen>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	490f      	ldr	r1, [pc, #60]	; (8001e88 <print_sensorData+0x214>)
 8001e4c:	480f      	ldr	r0, [pc, #60]	; (8001e8c <print_sensorData+0x218>)
 8001e4e:	f00b ff93 	bl	800dd78 <strncat>

	//Data Batería
	sprintf(text_buffer, "\n vBat: %f ", vBat);
 8001e52:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <print_sensorData+0x25c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb76 	bl	8000548 <__aeabi_f2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	491c      	ldr	r1, [pc, #112]	; (8001ed4 <print_sensorData+0x260>)
 8001e62:	4809      	ldr	r0, [pc, #36]	; (8001e88 <print_sensorData+0x214>)
 8001e64:	f00b ff68 	bl	800dd38 <siprintf>
	strncat(usb_data, text_buffer, strlen(text_buffer));
 8001e68:	4807      	ldr	r0, [pc, #28]	; (8001e88 <print_sensorData+0x214>)
 8001e6a:	f7fe f9b1 	bl	80001d0 <strlen>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	4905      	ldr	r1, [pc, #20]	; (8001e88 <print_sensorData+0x214>)
 8001e74:	4805      	ldr	r0, [pc, #20]	; (8001e8c <print_sensorData+0x218>)
 8001e76:	f00b ff7f 	bl	800dd78 <strncat>
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000734 	.word	0x20000734
 8001e84:	0801025c 	.word	0x0801025c
 8001e88:	20000870 	.word	0x20000870
 8001e8c:	20000744 	.word	0x20000744
 8001e90:	20000738 	.word	0x20000738
 8001e94:	08010268 	.word	0x08010268
 8001e98:	2000073a 	.word	0x2000073a
 8001e9c:	08010274 	.word	0x08010274
 8001ea0:	20000736 	.word	0x20000736
 8001ea4:	08010280 	.word	0x08010280
 8001ea8:	2000073c 	.word	0x2000073c
 8001eac:	08010288 	.word	0x08010288
 8001eb0:	20000730 	.word	0x20000730
 8001eb4:	08010290 	.word	0x08010290
 8001eb8:	0801029c 	.word	0x0801029c
 8001ebc:	080102a8 	.word	0x080102a8
 8001ec0:	080102b4 	.word	0x080102b4
 8001ec4:	080102bc 	.word	0x080102bc
 8001ec8:	080102c8 	.word	0x080102c8
 8001ecc:	080102d4 	.word	0x080102d4
 8001ed0:	20000740 	.word	0x20000740
 8001ed4:	080102e0 	.word	0x080102e0

08001ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
}
 8001ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <Error_Handler+0x8>
	...

08001ee4 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX) {
 8001eee:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efe:	dd02      	ble.n	8001f06 <limitPWM+0x22>
		return PWM_MAX;
 8001f00:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f04:	e00b      	b.n	8001f1e <limitPWM+0x3a>
	} else if (pwm < -PWM_MAX) {
 8001f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f0a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	d501      	bpl.n	8001f1c <limitPWM+0x38>
		return -PWM_MAX;
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <limitPWM+0x4c>)
 8001f1a:	e000      	b.n	8001f1e <limitPWM+0x3a>
	} else {
		return pwm;
 8001f1c:	687b      	ldr	r3, [r7, #4]
	}
}
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eeb0 0a67 	vmov.f32	s0, s15
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	bf800000 	.word	0xbf800000

08001f34 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8001f3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4a:	db13      	blt.n	8001f74 <setMotorLPWM+0x40>
		TIM4->CCR2 = 0;
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <setMotorLPWM+0x70>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001f52:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f56:	f7ff ffc5 	bl	8001ee4 <limitPWM>
 8001f5a:	eef0 7a40 	vmov.f32	s15, s0
 8001f5e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001fa8 <setMotorLPWM+0x74>
 8001f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <setMotorLPWM+0x70>)
 8001f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f6c:	ee17 2a90 	vmov	r2, s15
 8001f70:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		TIM4->CCR1 = 0;
		TIM4->CCR2 = (uint32_t) (limitPWM(pwm) * -MAX_TIMER_COUNTS);
	}
}
 8001f72:	e012      	b.n	8001f9a <setMotorLPWM+0x66>
		TIM4->CCR1 = 0;
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <setMotorLPWM+0x70>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = (uint32_t) (limitPWM(pwm) * -MAX_TIMER_COUNTS);
 8001f7a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f7e:	f7ff ffb1 	bl	8001ee4 <limitPWM>
 8001f82:	eef0 7a40 	vmov.f32	s15, s0
 8001f86:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001fac <setMotorLPWM+0x78>
 8001f8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <setMotorLPWM+0x70>)
 8001f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f94:	ee17 2a90 	vmov	r2, s15
 8001f98:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40000800 	.word	0x40000800
 8001fa8:	477fff00 	.word	0x477fff00
 8001fac:	c77fff00 	.word	0xc77fff00

08001fb0 <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8001fba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc6:	db13      	blt.n	8001ff0 <setMotorRPWM+0x40>
		TIM4->CCR3 = 0;
 8001fc8:	4b15      	ldr	r3, [pc, #84]	; (8002020 <setMotorRPWM+0x70>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001fce:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fd2:	f7ff ff87 	bl	8001ee4 <limitPWM>
 8001fd6:	eef0 7a40 	vmov.f32	s15, s0
 8001fda:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002024 <setMotorRPWM+0x74>
 8001fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <setMotorRPWM+0x70>)
 8001fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe8:	ee17 2a90 	vmov	r2, s15
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
	} else {
		TIM4->CCR4 = 0;
		TIM4->CCR3 = (uint32_t) (limitPWM(pwm) * -MAX_TIMER_COUNTS);
	}
}
 8001fee:	e012      	b.n	8002016 <setMotorRPWM+0x66>
		TIM4->CCR4 = 0;
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <setMotorRPWM+0x70>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
		TIM4->CCR3 = (uint32_t) (limitPWM(pwm) * -MAX_TIMER_COUNTS);
 8001ff6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ffa:	f7ff ff73 	bl	8001ee4 <limitPWM>
 8001ffe:	eef0 7a40 	vmov.f32	s15, s0
 8002002:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002028 <setMotorRPWM+0x78>
 8002006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <setMotorRPWM+0x70>)
 800200c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002010:	ee17 2a90 	vmov	r2, s15
 8002014:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40000800 	.word	0x40000800
 8002024:	477fff00 	.word	0x477fff00
 8002028:	c77fff00 	.word	0xc77fff00

0800202c <apply_average_filter>:

	for(int i = 0; i < MOVING_AVERAGE_LENGTH; i++){
		instance -> buffer[i] = 0;
	}
}
void apply_average_filter(mov_aver_inst* instance, double input, double *out){
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	ed87 0b00 	vstr	d0, [r7]
 8002038:	60b9      	str	r1, [r7, #8]
	instance -> sum += input - instance->buffer[instance -> counter];
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	e9d3 45cc 	ldrd	r4, r5, [r3, #816]	; 0x330
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002054:	f7fe f918 	bl	8000288 <__aeabi_dsub>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4620      	mov	r0, r4
 800205e:	4629      	mov	r1, r5
 8002060:	f7fe f914 	bl	800028c <__adddf3>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	68f9      	ldr	r1, [r7, #12]
 800206a:	e9c1 23cc 	strd	r2, r3, [r1, #816]	; 0x330
	instance -> buffer[instance -> counter] = input;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	18d1      	adds	r1, r2, r3
 800207a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800207e:	e9c1 2300 	strd	r2, r3, [r1]
	instance -> counter++;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 8002088:	3301      	adds	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320

	if(instance -> counter == MOVING_AVERAGE_LENGTH){
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f8b3 3320 	ldrh.w	r3, [r3, #800]	; 0x320
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d103      	bne.n	80020a4 <apply_average_filter+0x78>
		instance -> counter = 0;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
	}

	instance -> out = instance -> sum / MOVING_AVERAGE_LENGTH;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	e9d3 01cc 	ldrd	r0, r1, [r3, #816]	; 0x330
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <apply_average_filter+0xa8>)
 80020b0:	f7fe fbcc 	bl	800084c <__aeabi_ddiv>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	68f9      	ldr	r1, [r7, #12]
 80020ba:	e9c1 23ca 	strd	r2, r3, [r1, #808]	; 0x328

	*out = instance -> out;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	e9d3 23ca 	ldrd	r2, r3, [r3, #808]	; 0x328
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bdb0      	pop	{r4, r5, r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40590000 	.word	0x40590000

080020d8 <mpu6500_init>:
extern I2C_HandleTypeDef hi2c2;

uint8_t data_buffer[14];
float sensor_data[7];

void mpu6500_init(){
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af04      	add	r7, sp, #16

	  //IS ON
	  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c2, (DEVICE_ADDRESS << 1) + 0, 1, 100);
 80020de:	2364      	movs	r3, #100	; 0x64
 80020e0:	2201      	movs	r2, #1
 80020e2:	21d0      	movs	r1, #208	; 0xd0
 80020e4:	4832      	ldr	r0, [pc, #200]	; (80021b0 <mpu6500_init+0xd8>)
 80020e6:	f003 f9db 	bl	80054a0 <HAL_I2C_IsDeviceReady>
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
	  if(ret == HAL_OK){
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d103      	bne.n	80020fc <mpu6500_init+0x24>
		  printf("MPU6500 connected!");
 80020f4:	482f      	ldr	r0, [pc, #188]	; (80021b4 <mpu6500_init+0xdc>)
 80020f6:	f00b fe07 	bl	800dd08 <iprintf>
 80020fa:	e002      	b.n	8002102 <mpu6500_init+0x2a>
	  }
	  else{
		  printf("MPU6500 not connected, check connections.");
 80020fc:	482e      	ldr	r0, [pc, #184]	; (80021b8 <mpu6500_init+0xe0>)
 80020fe:	f00b fe03 	bl	800dd08 <iprintf>
	  }


	  //WAKE UP!
	  uint8_t temp_reg = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Mem_Write(&hi2c2, (DEVICE_ADDRESS << 1) + 0, PWR_MGMT_1_REG, 1,&temp_reg, 1, 1000);
 8002106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210a:	9302      	str	r3, [sp, #8]
 800210c:	2301      	movs	r3, #1
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	1dbb      	adds	r3, r7, #6
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	2301      	movs	r3, #1
 8002116:	226b      	movs	r2, #107	; 0x6b
 8002118:	21d0      	movs	r1, #208	; 0xd0
 800211a:	4825      	ldr	r0, [pc, #148]	; (80021b0 <mpu6500_init+0xd8>)
 800211c:	f002 fea0 	bl	8004e60 <HAL_I2C_Mem_Write>


	  // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
	  temp_reg = 0x07;
 8002120:	2307      	movs	r3, #7
 8002122:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Mem_Write(&hi2c2,  (DEVICE_ADDRESS << 1) + 0, SMPLRT_DIV , 1, &temp_reg, 1, 1000);
 8002124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	2301      	movs	r3, #1
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	1dbb      	adds	r3, r7, #6
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2301      	movs	r3, #1
 8002134:	2219      	movs	r2, #25
 8002136:	21d0      	movs	r1, #208	; 0xd0
 8002138:	481d      	ldr	r0, [pc, #116]	; (80021b0 <mpu6500_init+0xd8>)
 800213a:	f002 fe91 	bl	8004e60 <HAL_I2C_Mem_Write>


	  // GYRO SENS
	  temp_reg = FS_GYRO_250;
 800213e:	2300      	movs	r3, #0
 8002140:	71bb      	strb	r3, [r7, #6]
	  ret = HAL_I2C_Mem_Write(&hi2c2, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_GYRO, 1, &temp_reg, 1, 100); //+/- 500deg/s
 8002142:	2364      	movs	r3, #100	; 0x64
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	2301      	movs	r3, #1
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	1dbb      	adds	r3, r7, #6
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2301      	movs	r3, #1
 8002150:	221b      	movs	r2, #27
 8002152:	21d0      	movs	r1, #208	; 0xd0
 8002154:	4816      	ldr	r0, [pc, #88]	; (80021b0 <mpu6500_init+0xd8>)
 8002156:	f002 fe83 	bl	8004e60 <HAL_I2C_Mem_Write>
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
	  if(ret == HAL_OK){
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d103      	bne.n	800216c <mpu6500_init+0x94>
		  printf("Setting Gyro sensibility.");
 8002164:	4815      	ldr	r0, [pc, #84]	; (80021bc <mpu6500_init+0xe4>)
 8002166:	f00b fdcf 	bl	800dd08 <iprintf>
 800216a:	e002      	b.n	8002172 <mpu6500_init+0x9a>
	  }
	  else{
		  printf("Unable to write to register 27. Gyro sens failed.");
 800216c:	4814      	ldr	r0, [pc, #80]	; (80021c0 <mpu6500_init+0xe8>)
 800216e:	f00b fdcb 	bl	800dd08 <iprintf>
	  }


	  // ACC SENS
	  temp_reg = FS_ACC_2G;
 8002172:	2300      	movs	r3, #0
 8002174:	71bb      	strb	r3, [r7, #6]
	  ret = HAL_I2C_Mem_Write(&hi2c2, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_ACC, 1, &temp_reg, 1, 100); //+/- 500deg/s
 8002176:	2364      	movs	r3, #100	; 0x64
 8002178:	9302      	str	r3, [sp, #8]
 800217a:	2301      	movs	r3, #1
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	1dbb      	adds	r3, r7, #6
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2301      	movs	r3, #1
 8002184:	221c      	movs	r2, #28
 8002186:	21d0      	movs	r1, #208	; 0xd0
 8002188:	4809      	ldr	r0, [pc, #36]	; (80021b0 <mpu6500_init+0xd8>)
 800218a:	f002 fe69 	bl	8004e60 <HAL_I2C_Mem_Write>
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
	  if(ret == HAL_OK){
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d103      	bne.n	80021a0 <mpu6500_init+0xc8>
		  printf("Setting Accel sensibility.");
 8002198:	480a      	ldr	r0, [pc, #40]	; (80021c4 <mpu6500_init+0xec>)
 800219a:	f00b fdb5 	bl	800dd08 <iprintf>
	  }
	  else{
		  printf("Unable to write to register 28. Accel sens failed.");
	  }
  }
 800219e:	e002      	b.n	80021a6 <mpu6500_init+0xce>
		  printf("Unable to write to register 28. Accel sens failed.");
 80021a0:	4809      	ldr	r0, [pc, #36]	; (80021c8 <mpu6500_init+0xf0>)
 80021a2:	f00b fdb1 	bl	800dd08 <iprintf>
  }
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200004fc 	.word	0x200004fc
 80021b4:	080102ec 	.word	0x080102ec
 80021b8:	08010300 	.word	0x08010300
 80021bc:	0801032c 	.word	0x0801032c
 80021c0:	08010348 	.word	0x08010348
 80021c4:	0801037c 	.word	0x0801037c
 80021c8:	08010398 	.word	0x08010398
 80021cc:	00000000 	.word	0x00000000

080021d0 <mpu6500_read>:


/* Función que realiza la lectura   */
int16_t * mpu6500_read(){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af04      	add	r7, sp, #16

	HAL_I2C_Mem_Read (&hi2c2, (DEVICE_ADDRESS << 1) + 1, GYRO_XOUT_H_REG, 1, data_buffer, 6, 1000);
 80021d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021da:	9302      	str	r3, [sp, #8]
 80021dc:	2306      	movs	r3, #6
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	4b63      	ldr	r3, [pc, #396]	; (8002370 <mpu6500_read+0x1a0>)
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2301      	movs	r3, #1
 80021e6:	2243      	movs	r2, #67	; 0x43
 80021e8:	21d1      	movs	r1, #209	; 0xd1
 80021ea:	4862      	ldr	r0, [pc, #392]	; (8002374 <mpu6500_read+0x1a4>)
 80021ec:	f002 ff32 	bl	8005054 <HAL_I2C_Mem_Read>

	int16_t Accel_X_RAW = (int16_t)(data_buffer[0] << 8 | data_buffer [1]);
 80021f0:	4b5f      	ldr	r3, [pc, #380]	; (8002370 <mpu6500_read+0x1a0>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	b21a      	sxth	r2, r3
 80021f8:	4b5d      	ldr	r3, [pc, #372]	; (8002370 <mpu6500_read+0x1a0>)
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	4313      	orrs	r3, r2
 8002200:	81fb      	strh	r3, [r7, #14]
	int16_t Accel_Y_RAW = (int16_t)(data_buffer[2] << 8 | data_buffer [3]);
 8002202:	4b5b      	ldr	r3, [pc, #364]	; (8002370 <mpu6500_read+0x1a0>)
 8002204:	789b      	ldrb	r3, [r3, #2]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	b21a      	sxth	r2, r3
 800220a:	4b59      	ldr	r3, [pc, #356]	; (8002370 <mpu6500_read+0x1a0>)
 800220c:	78db      	ldrb	r3, [r3, #3]
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	81bb      	strh	r3, [r7, #12]
	int16_t Accel_Z_RAW = (int16_t)(data_buffer[4] << 8 | data_buffer [5]);
 8002214:	4b56      	ldr	r3, [pc, #344]	; (8002370 <mpu6500_read+0x1a0>)
 8002216:	791b      	ldrb	r3, [r3, #4]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	b21a      	sxth	r2, r3
 800221c:	4b54      	ldr	r3, [pc, #336]	; (8002370 <mpu6500_read+0x1a0>)
 800221e:	795b      	ldrb	r3, [r3, #5]
 8002220:	b21b      	sxth	r3, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	817b      	strh	r3, [r7, #10]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	sensor_data[0] = Accel_X_RAW/16384.0;  // get the float g
 8002226:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f97a 	bl	8000524 <__aeabi_i2d>
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	4b50      	ldr	r3, [pc, #320]	; (8002378 <mpu6500_read+0x1a8>)
 8002236:	f7fe fb09 	bl	800084c <__aeabi_ddiv>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	f7fe fcb1 	bl	8000ba8 <__aeabi_d2f>
 8002246:	4603      	mov	r3, r0
 8002248:	4a4c      	ldr	r2, [pc, #304]	; (800237c <mpu6500_read+0x1ac>)
 800224a:	6013      	str	r3, [r2, #0]
	sensor_data[1] = Accel_Y_RAW/16384.0;
 800224c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe f967 	bl	8000524 <__aeabi_i2d>
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	4b47      	ldr	r3, [pc, #284]	; (8002378 <mpu6500_read+0x1a8>)
 800225c:	f7fe faf6 	bl	800084c <__aeabi_ddiv>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f7fe fc9e 	bl	8000ba8 <__aeabi_d2f>
 800226c:	4603      	mov	r3, r0
 800226e:	4a43      	ldr	r2, [pc, #268]	; (800237c <mpu6500_read+0x1ac>)
 8002270:	6053      	str	r3, [r2, #4]
	sensor_data[2]= Accel_Z_RAW/16384.0;
 8002272:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f954 	bl	8000524 <__aeabi_i2d>
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	4b3d      	ldr	r3, [pc, #244]	; (8002378 <mpu6500_read+0x1a8>)
 8002282:	f7fe fae3 	bl	800084c <__aeabi_ddiv>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f7fe fc8b 	bl	8000ba8 <__aeabi_d2f>
 8002292:	4603      	mov	r3, r0
 8002294:	4a39      	ldr	r2, [pc, #228]	; (800237c <mpu6500_read+0x1ac>)
 8002296:	6093      	str	r3, [r2, #8]



	HAL_I2C_Mem_Read (&hi2c2, (DEVICE_ADDRESS << 1) + 1, GYRO_XOUT_H_REG, 1, data_buffer, 6, 1000);
 8002298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229c:	9302      	str	r3, [sp, #8]
 800229e:	2306      	movs	r3, #6
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	4b33      	ldr	r3, [pc, #204]	; (8002370 <mpu6500_read+0x1a0>)
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2301      	movs	r3, #1
 80022a8:	2243      	movs	r2, #67	; 0x43
 80022aa:	21d1      	movs	r1, #209	; 0xd1
 80022ac:	4831      	ldr	r0, [pc, #196]	; (8002374 <mpu6500_read+0x1a4>)
 80022ae:	f002 fed1 	bl	8005054 <HAL_I2C_Mem_Read>

	int16_t Gyro_X_RAW = (int16_t)(data_buffer[0] << 8 | data_buffer [1]);
 80022b2:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <mpu6500_read+0x1a0>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <mpu6500_read+0x1a0>)
 80022bc:	785b      	ldrb	r3, [r3, #1]
 80022be:	b21b      	sxth	r3, r3
 80022c0:	4313      	orrs	r3, r2
 80022c2:	813b      	strh	r3, [r7, #8]
	int16_t Gyro_Y_RAW = (int16_t)(data_buffer[2] << 8 | data_buffer [3]);
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <mpu6500_read+0x1a0>)
 80022c6:	789b      	ldrb	r3, [r3, #2]
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	b21a      	sxth	r2, r3
 80022cc:	4b28      	ldr	r3, [pc, #160]	; (8002370 <mpu6500_read+0x1a0>)
 80022ce:	78db      	ldrb	r3, [r3, #3]
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	80fb      	strh	r3, [r7, #6]
	int16_t Gyro_Z_RAW = (int16_t)(data_buffer[4] << 8 | data_buffer [5]);
 80022d6:	4b26      	ldr	r3, [pc, #152]	; (8002370 <mpu6500_read+0x1a0>)
 80022d8:	791b      	ldrb	r3, [r3, #4]
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	b21a      	sxth	r2, r3
 80022de:	4b24      	ldr	r3, [pc, #144]	; (8002370 <mpu6500_read+0x1a0>)
 80022e0:	795b      	ldrb	r3, [r3, #5]
 80022e2:	b21b      	sxth	r3, r3
 80022e4:	4313      	orrs	r3, r2
 80022e6:	80bb      	strh	r3, [r7, #4]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	sensor_data[4] = Gyro_X_RAW/131.0;
 80022e8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f919 	bl	8000524 <__aeabi_i2d>
 80022f2:	a31d      	add	r3, pc, #116	; (adr r3, 8002368 <mpu6500_read+0x198>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f7fe faa8 	bl	800084c <__aeabi_ddiv>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	f7fe fc50 	bl	8000ba8 <__aeabi_d2f>
 8002308:	4603      	mov	r3, r0
 800230a:	4a1c      	ldr	r2, [pc, #112]	; (800237c <mpu6500_read+0x1ac>)
 800230c:	6113      	str	r3, [r2, #16]
	sensor_data[5] = Gyro_Y_RAW/131.0;
 800230e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe f906 	bl	8000524 <__aeabi_i2d>
 8002318:	a313      	add	r3, pc, #76	; (adr r3, 8002368 <mpu6500_read+0x198>)
 800231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231e:	f7fe fa95 	bl	800084c <__aeabi_ddiv>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	f7fe fc3d 	bl	8000ba8 <__aeabi_d2f>
 800232e:	4603      	mov	r3, r0
 8002330:	4a12      	ldr	r2, [pc, #72]	; (800237c <mpu6500_read+0x1ac>)
 8002332:	6153      	str	r3, [r2, #20]
	sensor_data[6] = Gyro_Z_RAW/131.0;
 8002334:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f8f3 	bl	8000524 <__aeabi_i2d>
 800233e:	a30a      	add	r3, pc, #40	; (adr r3, 8002368 <mpu6500_read+0x198>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe fa82 	bl	800084c <__aeabi_ddiv>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe fc2a 	bl	8000ba8 <__aeabi_d2f>
 8002354:	4603      	mov	r3, r0
 8002356:	4a09      	ldr	r2, [pc, #36]	; (800237c <mpu6500_read+0x1ac>)
 8002358:	6193      	str	r3, [r2, #24]



	return sensor_data;
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <mpu6500_read+0x1ac>)
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	f3af 8000 	nop.w
 8002368:	00000000 	.word	0x00000000
 800236c:	40606000 	.word	0x40606000
 8002370:	200010c0 	.word	0x200010c0
 8002374:	200004fc 	.word	0x200004fc
 8002378:	40d00000 	.word	0x40d00000
 800237c:	200010d0 	.word	0x200010d0

08002380 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	if (uPID->OutputSum > uPID->OutMax)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80023b0:	f7fe fbb2 	bl	8000b18 <__aeabi_dcmpgt>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d006      	beq.n	80023c8 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 80023c6:	e011      	b.n	80023ec <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80023d4:	f7fe fb82 	bl	8000adc <__aeabi_dcmplt>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d100      	bne.n	80023e0 <PID_Init+0x60>
}
 80023de:	e005      	b.n	80023ec <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	0000      	movs	r0, r0
	...

080023f8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6278      	str	r0, [r7, #36]	; 0x24
 8002400:	6239      	str	r1, [r7, #32]
 8002402:	61fa      	str	r2, [r7, #28]
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	ed87 0b04 	vstr	d0, [r7, #16]
 800240a:	ed87 1b02 	vstr	d1, [r7, #8]
 800240e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	6a3a      	ldr	r2, [r7, #32]
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	2200      	movs	r2, #0
 8002428:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800242a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002480 <PID+0x88>
 800242e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002488 <PID+0x90>
 8002432:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002434:	f000 f934 	bl	80026a0 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	2264      	movs	r2, #100	; 0x64
 800243c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 800243e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002442:	4619      	mov	r1, r3
 8002444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002446:	f000 fa41 	bl	80028cc <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800244a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800244e:	4619      	mov	r1, r3
 8002450:	ed97 2b00 	vldr	d2, [r7]
 8002454:	ed97 1b02 	vldr	d1, [r7, #8]
 8002458:	ed97 0b04 	vldr	d0, [r7, #16]
 800245c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800245e:	f000 f98d 	bl	800277c <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002462:	f000 ff6d 	bl	8003340 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	1ad2      	subs	r2, r2, r3
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	605a      	str	r2, [r3, #4]

}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	; 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	f3af 8000 	nop.w
 8002480:	00000000 	.word	0x00000000
 8002484:	406fe000 	.word	0x406fe000
	...

08002490 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b08c      	sub	sp, #48	; 0x30
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	785b      	ldrb	r3, [r3, #1]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <PID_Compute+0x14>
	{
		return _FALSE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e0db      	b.n	800265c <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80024a4:	f000 ff4c 	bl	8003340 <HAL_GetTick>
 80024a8:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	6a3a      	ldr	r2, [r7, #32]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	f0c0 80cd 	bcc.w	800265a <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d8:	f7fd fed6 	bl	8000288 <__aeabi_dsub>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80024ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024ee:	f7fd fecb 	bl	8000288 <__aeabi_dsub>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002506:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800250a:	f7fe f875 	bl	80005f8 <__aeabi_dmul>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4620      	mov	r0, r4
 8002514:	4629      	mov	r1, r5
 8002516:	f7fd feb9 	bl	800028c <__adddf3>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d114      	bne.n	8002556 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800253c:	f7fe f85c 	bl	80005f8 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4620      	mov	r0, r4
 8002546:	4629      	mov	r1, r5
 8002548:	f7fd fe9e 	bl	8000288 <__aeabi_dsub>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002562:	f7fe fad9 	bl	8000b18 <__aeabi_dcmpgt>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002578:	e010      	b.n	800259c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002586:	f7fe faa9 	bl	8000adc <__aeabi_dcmplt>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00b      	beq.n	80025bc <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80025aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025ae:	f7fe f823 	bl	80005f8 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80025ba:	e005      	b.n	80025c8 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80025d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025d8:	f7fe f80e 	bl	80005f8 <__aeabi_dmul>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4620      	mov	r0, r4
 80025e2:	4629      	mov	r1, r5
 80025e4:	f7fd fe50 	bl	8000288 <__aeabi_dsub>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025f0:	f7fd fe4c 	bl	800028c <__adddf3>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002602:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002606:	f7fe fa87 	bl	8000b18 <__aeabi_dcmpgt>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002616:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800261a:	e00e      	b.n	800263a <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002622:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002626:	f7fe fa59 	bl	8000adc <__aeabi_dcmplt>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002636:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }

		*uPID->MyOutput = output;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800263e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002642:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002654:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 800265a:	2300      	movs	r3, #0
	}

}
 800265c:	4618      	mov	r0, r3
 800265e:	3730      	adds	r7, #48	; 0x30
 8002660:	46bd      	mov	sp, r7
 8002662:	bdb0      	pop	{r4, r5, r7, pc}

08002664 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	2b01      	cmp	r3, #1
 8002674:	bf0c      	ite	eq
 8002676:	2301      	moveq	r3, #1
 8002678:	2300      	movne	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d006      	beq.n	8002692 <PID_SetMode+0x2e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	785b      	ldrb	r3, [r3, #1]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff fe77 	bl	8002380 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	705a      	strb	r2, [r3, #1]

}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6178      	str	r0, [r7, #20]
 80026a8:	ed87 0b02 	vstr	d0, [r7, #8]
 80026ac:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80026b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026b8:	f7fe fa24 	bl	8000b04 <__aeabi_dcmpge>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d158      	bne.n	8002774 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 80026c2:	6979      	ldr	r1, [r7, #20]
 80026c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026c8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 80026cc:	6979      	ldr	r1, [r7, #20]
 80026ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026d2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	785b      	ldrb	r3, [r3, #1]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d04b      	beq.n	8002776 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80026ec:	f7fe fa14 	bl	8000b18 <__aeabi_dcmpgt>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d007      	beq.n	8002706 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002700:	e9c1 2300 	strd	r2, r3, [r1]
 8002704:	e012      	b.n	800272c <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002714:	f7fe f9e2 	bl	8000adc <__aeabi_dcmplt>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d006      	beq.n	800272c <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002728:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002738:	f7fe f9ee 	bl	8000b18 <__aeabi_dcmpgt>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d006      	beq.n	8002750 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002748:	6979      	ldr	r1, [r7, #20]
 800274a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800274e:	e012      	b.n	8002776 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800275c:	f7fe f9be 	bl	8000adc <__aeabi_dcmplt>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800276c:	6979      	ldr	r1, [r7, #20]
 800276e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002772:	e000      	b.n	8002776 <PID_SetOutputLimits+0xd6>
		return;
 8002774:	bf00      	nop
		}
		else { }

	}

}
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af00      	add	r7, sp, #0
 8002782:	61f8      	str	r0, [r7, #28]
 8002784:	ed87 0b04 	vstr	d0, [r7, #16]
 8002788:	ed87 1b02 	vstr	d1, [r7, #8]
 800278c:	ed87 2b00 	vstr	d2, [r7]
 8002790:	460b      	mov	r3, r1
 8002792:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027a0:	f7fe f99c 	bl	8000adc <__aeabi_dcmplt>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f040 8089 	bne.w	80028be <PID_SetTunings2+0x142>
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027b8:	f7fe f990 	bl	8000adc <__aeabi_dcmplt>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d17d      	bne.n	80028be <PID_SetTunings2+0x142>
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027ce:	f7fe f985 	bl	8000adc <__aeabi_dcmplt>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d172      	bne.n	80028be <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	7efa      	ldrb	r2, [r7, #27]
 80027dc:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80027de:	7efb      	ldrb	r3, [r7, #27]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80027f0:	69f9      	ldr	r1, [r7, #28]
 80027f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80027fa:	69f9      	ldr	r1, [r7, #28]
 80027fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002800:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8002804:	69f9      	ldr	r1, [r7, #28]
 8002806:	e9d7 2300 	ldrd	r2, r3, [r7]
 800280a:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe76 	bl	8000504 <__aeabi_ui2d>
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <PID_SetTunings2+0x14c>)
 800281e:	f7fe f815 	bl	800084c <__aeabi_ddiv>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 800282a:	69f9      	ldr	r1, [r7, #28]
 800282c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002830:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8002834:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002838:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800283c:	f7fd fedc 	bl	80005f8 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	69f9      	ldr	r1, [r7, #28]
 8002846:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800284a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800284e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002852:	f7fd fffb 	bl	800084c <__aeabi_ddiv>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	69f9      	ldr	r1, [r7, #28]
 800285c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	78db      	ldrb	r3, [r3, #3]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d12b      	bne.n	80028c0 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800286e:	f04f 0000 	mov.w	r0, #0
 8002872:	f04f 0100 	mov.w	r1, #0
 8002876:	f7fd fd07 	bl	8000288 <__aeabi_dsub>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	69f9      	ldr	r1, [r7, #28]
 8002880:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800288a:	f04f 0000 	mov.w	r0, #0
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	f7fd fcf9 	bl	8000288 <__aeabi_dsub>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	69f9      	ldr	r1, [r7, #28]
 800289c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80028a6:	f04f 0000 	mov.w	r0, #0
 80028aa:	f04f 0100 	mov.w	r1, #0
 80028ae:	f7fd fceb 	bl	8000288 <__aeabi_dsub>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	69f9      	ldr	r1, [r7, #28]
 80028b8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80028bc:	e000      	b.n	80028c0 <PID_SetTunings2+0x144>
		return;
 80028be:	bf00      	nop

	}

}
 80028c0:	3728      	adds	r7, #40	; 0x28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	408f4000 	.word	0x408f4000

080028cc <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	785b      	ldrb	r3, [r3, #1]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d02e      	beq.n	800293e <PID_SetControllerDirection+0x72>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	78db      	ldrb	r3, [r3, #3]
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d029      	beq.n	800293e <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80028f0:	f04f 0000 	mov.w	r0, #0
 80028f4:	f04f 0100 	mov.w	r1, #0
 80028f8:	f7fd fcc6 	bl	8000288 <__aeabi_dsub>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800290c:	f04f 0000 	mov.w	r0, #0
 8002910:	f04f 0100 	mov.w	r1, #0
 8002914:	f7fd fcb8 	bl	8000288 <__aeabi_dsub>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002928:	f04f 0000 	mov.w	r0, #0
 800292c:	f04f 0100 	mov.w	r1, #0
 8002930:	f7fd fcaa 	bl	8000288 <__aeabi_dsub>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	70da      	strb	r2, [r3, #3]

}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 800294c:	b5b0      	push	{r4, r5, r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	dd2e      	ble.n	80029ba <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 800295c:	6838      	ldr	r0, [r7, #0]
 800295e:	f7fd fde1 	bl	8000524 <__aeabi_i2d>
 8002962:	4604      	mov	r4, r0
 8002964:	460d      	mov	r5, r1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fdca 	bl	8000504 <__aeabi_ui2d>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4620      	mov	r0, r4
 8002976:	4629      	mov	r1, r5
 8002978:	f7fd ff68 	bl	800084c <__aeabi_ddiv>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800298a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800298e:	f7fd fe33 	bl	80005f8 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80029a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a6:	f7fd ff51 	bl	800084c <__aeabi_ddiv>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]

	}

}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080029c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_MspInit+0x4c>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	4a0f      	ldr	r2, [pc, #60]	; (8002a10 <HAL_MspInit+0x4c>)
 80029d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d8:	6453      	str	r3, [r2, #68]	; 0x44
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <HAL_MspInit+0x4c>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_MspInit+0x4c>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <HAL_MspInit+0x4c>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_MspInit+0x4c>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800

08002a14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08c      	sub	sp, #48	; 0x30
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a46      	ldr	r2, [pc, #280]	; (8002b4c <HAL_ADC_MspInit+0x138>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d158      	bne.n	8002ae8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	4b45      	ldr	r3, [pc, #276]	; (8002b50 <HAL_ADC_MspInit+0x13c>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	4a44      	ldr	r2, [pc, #272]	; (8002b50 <HAL_ADC_MspInit+0x13c>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	6453      	str	r3, [r2, #68]	; 0x44
 8002a46:	4b42      	ldr	r3, [pc, #264]	; (8002b50 <HAL_ADC_MspInit+0x13c>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4e:	61bb      	str	r3, [r7, #24]
 8002a50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	4b3e      	ldr	r3, [pc, #248]	; (8002b50 <HAL_ADC_MspInit+0x13c>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a3d      	ldr	r2, [pc, #244]	; (8002b50 <HAL_ADC_MspInit+0x13c>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_ADC_MspInit+0x13c>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = FL_Reciever_Pin|FR_Reciever_Pin|L_Reciever_Pin|R_Reciever_Pin;
 8002a6e:	230f      	movs	r3, #15
 8002a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a72:	2303      	movs	r3, #3
 8002a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7a:	f107 031c 	add.w	r3, r7, #28
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4834      	ldr	r0, [pc, #208]	; (8002b54 <HAL_ADC_MspInit+0x140>)
 8002a82:	f001 fec1 	bl	8004808 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002a86:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <HAL_ADC_MspInit+0x144>)
 8002a88:	4a34      	ldr	r2, [pc, #208]	; (8002b5c <HAL_ADC_MspInit+0x148>)
 8002a8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a8c:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <HAL_ADC_MspInit+0x144>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <HAL_ADC_MspInit+0x144>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a98:	4b2f      	ldr	r3, [pc, #188]	; (8002b58 <HAL_ADC_MspInit+0x144>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <HAL_ADC_MspInit+0x144>)
 8002aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aa4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002aa6:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <HAL_ADC_MspInit+0x144>)
 8002aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <HAL_ADC_MspInit+0x144>)
 8002ab0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ab4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002ab6:	4b28      	ldr	r3, [pc, #160]	; (8002b58 <HAL_ADC_MspInit+0x144>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002abc:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <HAL_ADC_MspInit+0x144>)
 8002abe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ac2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac4:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_ADC_MspInit+0x144>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002aca:	4823      	ldr	r0, [pc, #140]	; (8002b58 <HAL_ADC_MspInit+0x144>)
 8002acc:	f001 fabc 	bl	8004048 <HAL_DMA_Init>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002ad6:	f7ff f9ff 	bl	8001ed8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_ADC_MspInit+0x144>)
 8002ade:	639a      	str	r2, [r3, #56]	; 0x38
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <HAL_ADC_MspInit+0x144>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002ae6:	e02c      	b.n	8002b42 <HAL_ADC_MspInit+0x12e>
  else if(hadc->Instance==ADC2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <HAL_ADC_MspInit+0x14c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d127      	bne.n	8002b42 <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_ADC_MspInit+0x13c>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <HAL_ADC_MspInit+0x13c>)
 8002afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b00:	6453      	str	r3, [r2, #68]	; 0x44
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_ADC_MspInit+0x13c>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <HAL_ADC_MspInit+0x13c>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_ADC_MspInit+0x13c>)
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_ADC_MspInit+0x13c>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = vBat_Pin;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(vBat_GPIO_Port, &GPIO_InitStruct);
 8002b36:	f107 031c 	add.w	r3, r7, #28
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4809      	ldr	r0, [pc, #36]	; (8002b64 <HAL_ADC_MspInit+0x150>)
 8002b3e:	f001 fe63 	bl	8004808 <HAL_GPIO_Init>
}
 8002b42:	bf00      	nop
 8002b44:	3730      	adds	r7, #48	; 0x30
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40012000 	.word	0x40012000
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40020800 	.word	0x40020800
 8002b58:	2000049c 	.word	0x2000049c
 8002b5c:	40026410 	.word	0x40026410
 8002b60:	40012100 	.word	0x40012100
 8002b64:	40020400 	.word	0x40020400

08002b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a19      	ldr	r2, [pc, #100]	; (8002bec <HAL_I2C_MspInit+0x84>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d12c      	bne.n	8002be4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <HAL_I2C_MspInit+0x88>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_I2C_MspInit+0x88>)
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_I2C_MspInit+0x88>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ba6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bac:	2312      	movs	r3, #18
 8002bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bb8:	2304      	movs	r3, #4
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	480c      	ldr	r0, [pc, #48]	; (8002bf4 <HAL_I2C_MspInit+0x8c>)
 8002bc4:	f001 fe20 	bl	8004808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_I2C_MspInit+0x88>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <HAL_I2C_MspInit+0x88>)
 8002bd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_I2C_MspInit+0x88>)
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002be4:	bf00      	nop
 8002be6:	3728      	adds	r7, #40	; 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40005800 	.word	0x40005800
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40020400 	.word	0x40020400

08002bf8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	; 0x30
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a36      	ldr	r2, [pc, #216]	; (8002cf0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d12d      	bne.n	8002c76 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	4b35      	ldr	r3, [pc, #212]	; (8002cf4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	4a34      	ldr	r2, [pc, #208]	; (8002cf4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2a:	4b32      	ldr	r3, [pc, #200]	; (8002cf4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	4b2e      	ldr	r3, [pc, #184]	; (8002cf4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a2d      	ldr	r2, [pc, #180]	; (8002cf4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c64:	2301      	movs	r3, #1
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c68:	f107 031c 	add.w	r3, r7, #28
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4822      	ldr	r0, [pc, #136]	; (8002cf8 <HAL_TIM_Encoder_MspInit+0x100>)
 8002c70:	f001 fdca 	bl	8004808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002c74:	e038      	b.n	8002ce8 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(htim_encoder->Instance==TIM8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a20      	ldr	r2, [pc, #128]	; (8002cfc <HAL_TIM_Encoder_MspInit+0x104>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d133      	bne.n	8002ce8 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	4a1a      	ldr	r2, [pc, #104]	; (8002cf4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c8a:	f043 0302 	orr.w	r3, r3, #2
 8002c8e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c90:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	4a13      	ldr	r2, [pc, #76]	; (8002cf4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002ca6:	f043 0304 	orr.w	r3, r3, #4
 8002caa:	6313      	str	r3, [r2, #48]	; 0x30
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cb8:	23c0      	movs	r3, #192	; 0xc0
 8002cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ccc:	f107 031c 	add.w	r3, r7, #28
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	480b      	ldr	r0, [pc, #44]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x108>)
 8002cd4:	f001 fd98 	bl	8004808 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	202c      	movs	r0, #44	; 0x2c
 8002cde:	f001 f97c 	bl	8003fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002ce2:	202c      	movs	r0, #44	; 0x2c
 8002ce4:	f001 f995 	bl	8004012 <HAL_NVIC_EnableIRQ>
}
 8002ce8:	bf00      	nop
 8002cea:	3730      	adds	r7, #48	; 0x30
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	40010400 	.word	0x40010400
 8002d00:	40020800 	.word	0x40020800

08002d04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0b      	ldr	r2, [pc, #44]	; (8002d40 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d10d      	bne.n	8002d32 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_TIM_PWM_MspInit+0x40>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <HAL_TIM_PWM_MspInit+0x40>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <HAL_TIM_PWM_MspInit+0x40>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40023800 	.word	0x40023800

08002d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <HAL_TIM_MspPostInit+0x68>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d11e      	bne.n	8002da8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <HAL_TIM_MspPostInit+0x6c>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <HAL_TIM_MspPostInit+0x6c>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <HAL_TIM_MspPostInit+0x6c>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002d86:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002d8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9c:	f107 030c 	add.w	r3, r7, #12
 8002da0:	4619      	mov	r1, r3
 8002da2:	4805      	ldr	r0, [pc, #20]	; (8002db8 <HAL_TIM_MspPostInit+0x70>)
 8002da4:	f001 fd30 	bl	8004808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002da8:	bf00      	nop
 8002daa:	3720      	adds	r7, #32
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40020400 	.word	0x40020400

08002dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a30      	ldr	r2, [pc, #192]	; (8002e9c <HAL_UART_MspInit+0xe0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d15a      	bne.n	8002e94 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	4b2f      	ldr	r3, [pc, #188]	; (8002ea0 <HAL_UART_MspInit+0xe4>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a2e      	ldr	r2, [pc, #184]	; (8002ea0 <HAL_UART_MspInit+0xe4>)
 8002de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40
 8002dee:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <HAL_UART_MspInit+0xe4>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_UART_MspInit+0xe4>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a27      	ldr	r2, [pc, #156]	; (8002ea0 <HAL_UART_MspInit+0xe4>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <HAL_UART_MspInit+0xe4>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e16:	230c      	movs	r3, #12
 8002e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e22:	2303      	movs	r3, #3
 8002e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e26:	2307      	movs	r3, #7
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2a:	f107 0314 	add.w	r3, r7, #20
 8002e2e:	4619      	mov	r1, r3
 8002e30:	481c      	ldr	r0, [pc, #112]	; (8002ea4 <HAL_UART_MspInit+0xe8>)
 8002e32:	f001 fce9 	bl	8004808 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002e36:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <HAL_UART_MspInit+0xec>)
 8002e38:	4a1c      	ldr	r2, [pc, #112]	; (8002eac <HAL_UART_MspInit+0xf0>)
 8002e3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_UART_MspInit+0xec>)
 8002e3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e42:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e44:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <HAL_UART_MspInit+0xec>)
 8002e46:	2240      	movs	r2, #64	; 0x40
 8002e48:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_UART_MspInit+0xec>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e50:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_UART_MspInit+0xec>)
 8002e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e56:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <HAL_UART_MspInit+0xec>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_UART_MspInit+0xec>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8002e64:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_UART_MspInit+0xec>)
 8002e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e6a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_UART_MspInit+0xec>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <HAL_UART_MspInit+0xec>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e78:	480b      	ldr	r0, [pc, #44]	; (8002ea8 <HAL_UART_MspInit+0xec>)
 8002e7a:	f001 f8e5 	bl	8004048 <HAL_DMA_Init>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002e84:	f7ff f828 	bl	8001ed8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <HAL_UART_MspInit+0xec>)
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e8e:	4a06      	ldr	r2, [pc, #24]	; (8002ea8 <HAL_UART_MspInit+0xec>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e94:	bf00      	nop
 8002e96:	3728      	adds	r7, #40	; 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40004400 	.word	0x40004400
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40020000 	.word	0x40020000
 8002ea8:	2000066c 	.word	0x2000066c
 8002eac:	400260a0 	.word	0x400260a0

08002eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002eb4:	e7fe      	b.n	8002eb4 <NMI_Handler+0x4>

08002eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eba:	e7fe      	b.n	8002eba <HardFault_Handler+0x4>

08002ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec0:	e7fe      	b.n	8002ec0 <MemManage_Handler+0x4>

08002ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ec6:	e7fe      	b.n	8002ec6 <BusFault_Handler+0x4>

08002ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <UsageFault_Handler+0x4>

08002ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002efc:	f000 fa0c 	bl	8003318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 8002f00:	f000 f902 	bl	8003108 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002f0c:	4802      	ldr	r0, [pc, #8]	; (8002f18 <DMA1_Stream6_IRQHandler+0x10>)
 8002f0e:	f001 fa11 	bl	8004334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	2000066c 	.word	0x2000066c

08002f1c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002f22:	f005 f8a7 	bl	8008074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	200005e0 	.word	0x200005e0

08002f30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f34:	4802      	ldr	r0, [pc, #8]	; (8002f40 <DMA2_Stream0_IRQHandler+0x10>)
 8002f36:	f001 f9fd 	bl	8004334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000049c 	.word	0x2000049c

08002f44 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002f48:	4802      	ldr	r0, [pc, #8]	; (8002f54 <OTG_HS_IRQHandler+0x10>)
 8002f4a:	f003 f882 	bl	8006052 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200025d4 	.word	0x200025d4

08002f58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return 1;
 8002f5c:	2301      	movs	r3, #1
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <_kill>:

int _kill(int pid, int sig)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f72:	f00a fa1f 	bl	800d3b4 <__errno>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2216      	movs	r2, #22
 8002f7a:	601a      	str	r2, [r3, #0]
  return -1;
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_exit>:

void _exit (int status)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f90:	f04f 31ff 	mov.w	r1, #4294967295
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ffe7 	bl	8002f68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f9a:	e7fe      	b.n	8002f9a <_exit+0x12>

08002f9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	e00a      	b.n	8002fc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fae:	f3af 8000 	nop.w
 8002fb2:	4601      	mov	r1, r0
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	60ba      	str	r2, [r7, #8]
 8002fba:	b2ca      	uxtb	r2, r1
 8002fbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	dbf0      	blt.n	8002fae <_read+0x12>
  }

  return len;
 8002fcc:	687b      	ldr	r3, [r7, #4]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e009      	b.n	8002ffc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	60ba      	str	r2, [r7, #8]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	429a      	cmp	r2, r3
 8003002:	dbf1      	blt.n	8002fe8 <_write+0x12>
  }
  return len;
 8003004:	687b      	ldr	r3, [r7, #4]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <_close>:

int _close(int file)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003036:	605a      	str	r2, [r3, #4]
  return 0;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <_isatty>:

int _isatty(int file)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800304e:	2301      	movs	r3, #1
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003080:	4a14      	ldr	r2, [pc, #80]	; (80030d4 <_sbrk+0x5c>)
 8003082:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <_sbrk+0x60>)
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800308c:	4b13      	ldr	r3, [pc, #76]	; (80030dc <_sbrk+0x64>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d102      	bne.n	800309a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <_sbrk+0x64>)
 8003096:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <_sbrk+0x68>)
 8003098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <_sbrk+0x64>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d207      	bcs.n	80030b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030a8:	f00a f984 	bl	800d3b4 <__errno>
 80030ac:	4603      	mov	r3, r0
 80030ae:	220c      	movs	r2, #12
 80030b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	e009      	b.n	80030cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <_sbrk+0x64>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <_sbrk+0x64>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	4a05      	ldr	r2, [pc, #20]	; (80030dc <_sbrk+0x64>)
 80030c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030ca:	68fb      	ldr	r3, [r7, #12]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20020000 	.word	0x20020000
 80030d8:	00000400 	.word	0x00000400
 80030dc:	200010ec 	.word	0x200010ec
 80030e0:	20002d10 	.word	0x20002d10

080030e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <SystemInit+0x20>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	4a05      	ldr	r2, [pc, #20]	; (8003104 <SystemInit+0x20>)
 80030f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <SysTickFunction>:

#define MAX_CAL_DISTANCE 1000
double PI = 3.14159265358979323846;


void SysTickFunction(void) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
	 * Call you PID update function here.
	 */


	//Medir la velocidad y la posición
	update_encoder(&enc_right, &htim1);
 800310e:	4934      	ldr	r1, [pc, #208]	; (80031e0 <SysTickFunction+0xd8>)
 8003110:	4834      	ldr	r0, [pc, #208]	; (80031e4 <SysTickFunction+0xdc>)
 8003112:	f7fd ff3d 	bl	8000f90 <update_encoder>
	update_encoder(&enc_left, &htim8);
 8003116:	4934      	ldr	r1, [pc, #208]	; (80031e8 <SysTickFunction+0xe0>)
 8003118:	4834      	ldr	r0, [pc, #208]	; (80031ec <SysTickFunction+0xe4>)
 800311a:	f7fd ff39 	bl	8000f90 <update_encoder>

	// Aplicar el filtro
	apply_average_filter(&filter_speedMR, enc_right.velocity_rpm, &vel_rightM_RPM);
 800311e:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <SysTickFunction+0xdc>)
 8003120:	ed93 7b06 	vldr	d7, [r3, #24]
 8003124:	4932      	ldr	r1, [pc, #200]	; (80031f0 <SysTickFunction+0xe8>)
 8003126:	eeb0 0a47 	vmov.f32	s0, s14
 800312a:	eef0 0a67 	vmov.f32	s1, s15
 800312e:	4831      	ldr	r0, [pc, #196]	; (80031f4 <SysTickFunction+0xec>)
 8003130:	f7fe ff7c 	bl	800202c <apply_average_filter>
	apply_average_filter(&filter_speedML, enc_left.velocity_rpm, &vel_leftM_RPM);
 8003134:	4b2d      	ldr	r3, [pc, #180]	; (80031ec <SysTickFunction+0xe4>)
 8003136:	ed93 7b06 	vldr	d7, [r3, #24]
 800313a:	492f      	ldr	r1, [pc, #188]	; (80031f8 <SysTickFunction+0xf0>)
 800313c:	eeb0 0a47 	vmov.f32	s0, s14
 8003140:	eef0 0a67 	vmov.f32	s1, s15
 8003144:	482d      	ldr	r0, [pc, #180]	; (80031fc <SysTickFunction+0xf4>)
 8003146:	f7fe ff71 	bl	800202c <apply_average_filter>

	//Encontrar diferencia
	speedDifference = vel_rightM_RPM - vel_leftM_RPM;
 800314a:	4b29      	ldr	r3, [pc, #164]	; (80031f0 <SysTickFunction+0xe8>)
 800314c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003150:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <SysTickFunction+0xf0>)
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	f7fd f897 	bl	8000288 <__aeabi_dsub>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4928      	ldr	r1, [pc, #160]	; (8003200 <SysTickFunction+0xf8>)
 8003160:	e9c1 2300 	strd	r2, r3, [r1]


	if(enable_motors == 1
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <SysTickFunction+0xfc>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d12c      	bne.n	80031c6 <SysTickFunction+0xbe>
			&& HAL_GetTick() > 10000){
 800316c:	f000 f8e8 	bl	8003340 <HAL_GetTick>
 8003170:	4603      	mov	r3, r0
 8003172:	f242 7210 	movw	r2, #10000	; 0x2710
 8003176:	4293      	cmp	r3, r2
 8003178:	d925      	bls.n	80031c6 <SysTickFunction+0xbe>
		 // PID apply
		 PID_Compute(&speedMR_PID);
 800317a:	4823      	ldr	r0, [pc, #140]	; (8003208 <SysTickFunction+0x100>)
 800317c:	f7ff f988 	bl	8002490 <PID_Compute>
		 PID_Compute(&speedML_PID);
 8003180:	4822      	ldr	r0, [pc, #136]	; (800320c <SysTickFunction+0x104>)
 8003182:	f7ff f985 	bl	8002490 <PID_Compute>
		 PID_Compute(&speedDifference_PID);
 8003186:	4822      	ldr	r0, [pc, #136]	; (8003210 <SysTickFunction+0x108>)
 8003188:	f7ff f982 	bl	8002490 <PID_Compute>


		 //speedMR_output = speedMR_output * 0.015 * ((2*PI)/60);
		 //speedML_output = speedML_output * 0.015 * ((2*PI)/60);

		 double pwm_MR = (speedMR_output);
 800318c:	4b21      	ldr	r3, [pc, #132]	; (8003214 <SysTickFunction+0x10c>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	e9c7 2302 	strd	r2, r3, [r7, #8]
		 double pwm_ML =(speedML_output);
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <SysTickFunction+0x110>)
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	e9c7 2300 	strd	r2, r3, [r7]




		 setMotorRPWM(pwm_MR);
 80031a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031a4:	f7fd fd00 	bl	8000ba8 <__aeabi_d2f>
 80031a8:	4603      	mov	r3, r0
 80031aa:	ee00 3a10 	vmov	s0, r3
 80031ae:	f7fe feff 	bl	8001fb0 <setMotorRPWM>
		 setMotorLPWM(pwm_ML);
 80031b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031b6:	f7fd fcf7 	bl	8000ba8 <__aeabi_d2f>
 80031ba:	4603      	mov	r3, r0
 80031bc:	ee00 3a10 	vmov	s0, r3
 80031c0:	f7fe feb8 	bl	8001f34 <setMotorLPWM>
			&& HAL_GetTick() > 10000){
 80031c4:	e008      	b.n	80031d8 <SysTickFunction+0xd0>
	}
	else{
		 setMotorRPWM(0);
 80031c6:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800321c <SysTickFunction+0x114>
 80031ca:	f7fe fef1 	bl	8001fb0 <setMotorRPWM>
		 setMotorLPWM(0);
 80031ce:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800321c <SysTickFunction+0x114>
 80031d2:	f7fe feaf 	bl	8001f34 <setMotorLPWM>





}
 80031d6:	bf00      	nop
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000550 	.word	0x20000550
 80031e4:	200006d0 	.word	0x200006d0
 80031e8:	200005e0 	.word	0x200005e0
 80031ec:	20000700 	.word	0x20000700
 80031f0:	20000f38 	.word	0x20000f38
 80031f4:	200008c8 	.word	0x200008c8
 80031f8:	20000f40 	.word	0x20000f40
 80031fc:	20000c00 	.word	0x20000c00
 8003200:	20000f48 	.word	0x20000f48
 8003204:	20000f68 	.word	0x20000f68
 8003208:	20000f70 	.word	0x20000f70
 800320c:	20000fe0 	.word	0x20000fe0
 8003210:	20001050 	.word	0x20001050
 8003214:	20000f50 	.word	0x20000f50
 8003218:	20000f58 	.word	0x20000f58
 800321c:	00000000 	.word	0x00000000

08003220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003258 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003224:	480d      	ldr	r0, [pc, #52]	; (800325c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003226:	490e      	ldr	r1, [pc, #56]	; (8003260 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003228:	4a0e      	ldr	r2, [pc, #56]	; (8003264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800322a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800322c:	e002      	b.n	8003234 <LoopCopyDataInit>

0800322e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800322e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003232:	3304      	adds	r3, #4

08003234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003238:	d3f9      	bcc.n	800322e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800323a:	4a0b      	ldr	r2, [pc, #44]	; (8003268 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800323c:	4c0b      	ldr	r4, [pc, #44]	; (800326c <LoopFillZerobss+0x26>)
  movs r3, #0
 800323e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003240:	e001      	b.n	8003246 <LoopFillZerobss>

08003242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003244:	3204      	adds	r2, #4

08003246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003248:	d3fb      	bcc.n	8003242 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800324a:	f7ff ff4b 	bl	80030e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800324e:	f00a f8b7 	bl	800d3c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003252:	f7fe f855 	bl	8001300 <main>
  bx  lr    
 8003256:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800325c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003260:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8003264:	0801081c 	.word	0x0801081c
  ldr r2, =_sbss
 8003268:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 800326c:	20002d10 	.word	0x20002d10

08003270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003270:	e7fe      	b.n	8003270 <ADC_IRQHandler>
	...

08003274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <HAL_Init+0x40>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <HAL_Init+0x40>)
 800327e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_Init+0x40>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_Init+0x40>)
 800328a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800328e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <HAL_Init+0x40>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <HAL_Init+0x40>)
 8003296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800329c:	2003      	movs	r0, #3
 800329e:	f000 fe91 	bl	8003fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032a2:	200f      	movs	r0, #15
 80032a4:	f000 f808 	bl	80032b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032a8:	f7ff fb8c 	bl	80029c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023c00 	.word	0x40023c00

080032b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_InitTick+0x54>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_InitTick+0x58>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80032d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fea9 	bl	800402e <HAL_SYSTICK_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e00e      	b.n	8003304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b0f      	cmp	r3, #15
 80032ea:	d80a      	bhi.n	8003302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ec:	2200      	movs	r2, #0
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	f04f 30ff 	mov.w	r0, #4294967295
 80032f4:	f000 fe71 	bl	8003fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032f8:	4a06      	ldr	r2, [pc, #24]	; (8003314 <HAL_InitTick+0x5c>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	e000      	b.n	8003304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20000018 	.word	0x20000018
 8003310:	20000020 	.word	0x20000020
 8003314:	2000001c 	.word	0x2000001c

08003318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_IncTick+0x20>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_IncTick+0x24>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4413      	add	r3, r2
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_IncTick+0x24>)
 800332a:	6013      	str	r3, [r2, #0]
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000020 	.word	0x20000020
 800333c:	200010f0 	.word	0x200010f0

08003340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return uwTick;
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_GetTick+0x14>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	200010f0 	.word	0x200010f0

08003358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003360:	f7ff ffee 	bl	8003340 <HAL_GetTick>
 8003364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d005      	beq.n	800337e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <HAL_Delay+0x44>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4413      	add	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800337e:	bf00      	nop
 8003380:	f7ff ffde 	bl	8003340 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	429a      	cmp	r2, r3
 800338e:	d8f7      	bhi.n	8003380 <HAL_Delay+0x28>
  {
  }
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000020 	.word	0x20000020

080033a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e033      	b.n	800341e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff fb28 	bl	8002a14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d118      	bne.n	8003410 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033e6:	f023 0302 	bic.w	r3, r3, #2
 80033ea:	f043 0202 	orr.w	r2, r3, #2
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fb98 	bl	8003b28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f023 0303 	bic.w	r3, r3, #3
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
 800340e:	e001      	b.n	8003414 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_ADC_Start+0x1a>
 800343e:	2302      	movs	r3, #2
 8003440:	e0b2      	b.n	80035a8 <HAL_ADC_Start+0x180>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	d018      	beq.n	800348a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003468:	4b52      	ldr	r3, [pc, #328]	; (80035b4 <HAL_ADC_Start+0x18c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a52      	ldr	r2, [pc, #328]	; (80035b8 <HAL_ADC_Start+0x190>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	0c9a      	lsrs	r2, r3, #18
 8003474:	4613      	mov	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4413      	add	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800347c:	e002      	b.n	8003484 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	3b01      	subs	r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f9      	bne.n	800347e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d17a      	bne.n	800358e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d6:	d106      	bne.n	80034e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034dc:	f023 0206 	bic.w	r2, r3, #6
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	645a      	str	r2, [r3, #68]	; 0x44
 80034e4:	e002      	b.n	80034ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034f4:	4b31      	ldr	r3, [pc, #196]	; (80035bc <HAL_ADC_Start+0x194>)
 80034f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003500:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	2b00      	cmp	r3, #0
 800350c:	d12a      	bne.n	8003564 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2b      	ldr	r2, [pc, #172]	; (80035c0 <HAL_ADC_Start+0x198>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d015      	beq.n	8003544 <HAL_ADC_Start+0x11c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a29      	ldr	r2, [pc, #164]	; (80035c4 <HAL_ADC_Start+0x19c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d105      	bne.n	800352e <HAL_ADC_Start+0x106>
 8003522:	4b26      	ldr	r3, [pc, #152]	; (80035bc <HAL_ADC_Start+0x194>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <HAL_ADC_Start+0x1a0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d136      	bne.n	80035a6 <HAL_ADC_Start+0x17e>
 8003538:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_ADC_Start+0x194>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d130      	bne.n	80035a6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d129      	bne.n	80035a6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	e020      	b.n	80035a6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a15      	ldr	r2, [pc, #84]	; (80035c0 <HAL_ADC_Start+0x198>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d11b      	bne.n	80035a6 <HAL_ADC_Start+0x17e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d114      	bne.n	80035a6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	e00b      	b.n	80035a6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f043 0210 	orr.w	r2, r3, #16
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f043 0201 	orr.w	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	20000018 	.word	0x20000018
 80035b8:	431bde83 	.word	0x431bde83
 80035bc:	40012300 	.word	0x40012300
 80035c0:	40012000 	.word	0x40012000
 80035c4:	40012100 	.word	0x40012100
 80035c8:	40012200 	.word	0x40012200

080035cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_Start_DMA+0x1e>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e0e9      	b.n	80037be <HAL_ADC_Start_DMA+0x1f2>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d018      	beq.n	8003632 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003610:	4b6d      	ldr	r3, [pc, #436]	; (80037c8 <HAL_ADC_Start_DMA+0x1fc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a6d      	ldr	r2, [pc, #436]	; (80037cc <HAL_ADC_Start_DMA+0x200>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0c9a      	lsrs	r2, r3, #18
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003624:	e002      	b.n	800362c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	3b01      	subs	r3, #1
 800362a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f9      	bne.n	8003626 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003640:	d107      	bne.n	8003652 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003650:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	f040 80a1 	bne.w	80037a4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d007      	beq.n	8003694 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800368c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a0:	d106      	bne.n	80036b0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f023 0206 	bic.w	r2, r3, #6
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
 80036ae:	e002      	b.n	80036b6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036be:	4b44      	ldr	r3, [pc, #272]	; (80037d0 <HAL_ADC_Start_DMA+0x204>)
 80036c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c6:	4a43      	ldr	r2, [pc, #268]	; (80037d4 <HAL_ADC_Start_DMA+0x208>)
 80036c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ce:	4a42      	ldr	r2, [pc, #264]	; (80037d8 <HAL_ADC_Start_DMA+0x20c>)
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	4a41      	ldr	r2, [pc, #260]	; (80037dc <HAL_ADC_Start_DMA+0x210>)
 80036d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80036e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003702:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	334c      	adds	r3, #76	; 0x4c
 800370e:	4619      	mov	r1, r3
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f000 fd46 	bl	80041a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	2b00      	cmp	r3, #0
 8003722:	d12a      	bne.n	800377a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2d      	ldr	r2, [pc, #180]	; (80037e0 <HAL_ADC_Start_DMA+0x214>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d015      	beq.n	800375a <HAL_ADC_Start_DMA+0x18e>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <HAL_ADC_Start_DMA+0x218>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d105      	bne.n	8003744 <HAL_ADC_Start_DMA+0x178>
 8003738:	4b25      	ldr	r3, [pc, #148]	; (80037d0 <HAL_ADC_Start_DMA+0x204>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a27      	ldr	r2, [pc, #156]	; (80037e8 <HAL_ADC_Start_DMA+0x21c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d136      	bne.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_ADC_Start_DMA+0x204>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d130      	bne.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d129      	bne.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	e020      	b.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <HAL_ADC_Start_DMA+0x214>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d11b      	bne.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d114      	bne.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037a0:	609a      	str	r2, [r3, #8]
 80037a2:	e00b      	b.n	80037bc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f043 0210 	orr.w	r2, r3, #16
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b4:	f043 0201 	orr.w	r2, r3, #1
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000018 	.word	0x20000018
 80037cc:	431bde83 	.word	0x431bde83
 80037d0:	40012300 	.word	0x40012300
 80037d4:	08003d21 	.word	0x08003d21
 80037d8:	08003ddb 	.word	0x08003ddb
 80037dc:	08003df7 	.word	0x08003df7
 80037e0:	40012000 	.word	0x40012000
 80037e4:	40012100 	.word	0x40012100
 80037e8:	40012200 	.word	0x40012200

080037ec <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_ADC_Stop_DMA+0x1a>
 8003802:	2302      	movs	r3, #2
 8003804:	e048      	b.n	8003898 <HAL_ADC_Stop_DMA+0xac>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d130      	bne.n	800388e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800383a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d10f      	bne.n	800386a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fd00 	bl	8004254 <HAL_DMA_Abort>
 8003854:	4603      	mov	r3, r0
 8003856:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003878:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	f043 0201 	orr.w	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003896:	7bfb      	ldrb	r3, [r7, #15]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x1c>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e105      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x228>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b09      	cmp	r3, #9
 800390e:	d925      	bls.n	800395c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68d9      	ldr	r1, [r3, #12]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	4613      	mov	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4413      	add	r3, r2
 8003924:	3b1e      	subs	r3, #30
 8003926:	2207      	movs	r2, #7
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43da      	mvns	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	400a      	ands	r2, r1
 8003934:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68d9      	ldr	r1, [r3, #12]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	4618      	mov	r0, r3
 8003948:	4603      	mov	r3, r0
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4403      	add	r3, r0
 800394e:	3b1e      	subs	r3, #30
 8003950:	409a      	lsls	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	e022      	b.n	80039a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6919      	ldr	r1, [r3, #16]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	2207      	movs	r2, #7
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43da      	mvns	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	400a      	ands	r2, r1
 800397e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6919      	ldr	r1, [r3, #16]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	4618      	mov	r0, r3
 8003992:	4603      	mov	r3, r0
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4403      	add	r3, r0
 8003998:	409a      	lsls	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b06      	cmp	r3, #6
 80039a8:	d824      	bhi.n	80039f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	3b05      	subs	r3, #5
 80039bc:	221f      	movs	r2, #31
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43da      	mvns	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	400a      	ands	r2, r1
 80039ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	4618      	mov	r0, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	3b05      	subs	r3, #5
 80039e6:	fa00 f203 	lsl.w	r2, r0, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	635a      	str	r2, [r3, #52]	; 0x34
 80039f2:	e04c      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b0c      	cmp	r3, #12
 80039fa:	d824      	bhi.n	8003a46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3b23      	subs	r3, #35	; 0x23
 8003a0e:	221f      	movs	r2, #31
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43da      	mvns	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	400a      	ands	r2, r1
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	3b23      	subs	r3, #35	; 0x23
 8003a38:	fa00 f203 	lsl.w	r2, r0, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
 8003a44:	e023      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	3b41      	subs	r3, #65	; 0x41
 8003a58:	221f      	movs	r2, #31
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43da      	mvns	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	400a      	ands	r2, r1
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	4618      	mov	r0, r3
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	3b41      	subs	r3, #65	; 0x41
 8003a82:	fa00 f203 	lsl.w	r2, r0, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a8e:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <HAL_ADC_ConfigChannel+0x234>)
 8003a90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a21      	ldr	r2, [pc, #132]	; (8003b1c <HAL_ADC_ConfigChannel+0x238>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d109      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x1cc>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b12      	cmp	r3, #18
 8003aa2:	d105      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a19      	ldr	r2, [pc, #100]	; (8003b1c <HAL_ADC_ConfigChannel+0x238>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d123      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x21e>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d003      	beq.n	8003aca <HAL_ADC_ConfigChannel+0x1e6>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b11      	cmp	r3, #17
 8003ac8:	d11b      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d111      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <HAL_ADC_ConfigChannel+0x23c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a10      	ldr	r2, [pc, #64]	; (8003b24 <HAL_ADC_ConfigChannel+0x240>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	0c9a      	lsrs	r2, r3, #18
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003af4:	e002      	b.n	8003afc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f9      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	40012300 	.word	0x40012300
 8003b1c:	40012000 	.word	0x40012000
 8003b20:	20000018 	.word	0x20000018
 8003b24:	431bde83 	.word	0x431bde83

08003b28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b30:	4b79      	ldr	r3, [pc, #484]	; (8003d18 <ADC_Init+0x1f0>)
 8003b32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6859      	ldr	r1, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	021a      	lsls	r2, r3, #8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6899      	ldr	r1, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	4a58      	ldr	r2, [pc, #352]	; (8003d1c <ADC_Init+0x1f4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6899      	ldr	r1, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6899      	ldr	r1, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	e00f      	b.n	8003c26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0202 	bic.w	r2, r2, #2
 8003c34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6899      	ldr	r1, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	7e1b      	ldrb	r3, [r3, #24]
 8003c40:	005a      	lsls	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01b      	beq.n	8003c8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6859      	ldr	r1, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	035a      	lsls	r2, r3, #13
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	e007      	b.n	8003c9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	051a      	lsls	r2, r3, #20
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6899      	ldr	r1, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cde:	025a      	lsls	r2, r3, #9
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6899      	ldr	r1, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	029a      	lsls	r2, r3, #10
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40012300 	.word	0x40012300
 8003d1c:	0f000001 	.word	0x0f000001

08003d20 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d13c      	bne.n	8003db4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d12b      	bne.n	8003dac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d127      	bne.n	8003dac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d006      	beq.n	8003d78 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d119      	bne.n	8003dac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0220 	bic.w	r2, r2, #32
 8003d86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d105      	bne.n	8003dac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7fd fa95 	bl	80012dc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003db2:	e00e      	b.n	8003dd2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f7ff fd84 	bl	80038ce <HAL_ADC_ErrorCallback>
}
 8003dc6:	e004      	b.n	8003dd2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	4798      	blx	r3
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f7ff fd66 	bl	80038ba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dee:	bf00      	nop
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2240      	movs	r2, #64	; 0x40
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f043 0204 	orr.w	r2, r3, #4
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7ff fd59 	bl	80038ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e1c:	bf00      	nop
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <__NVIC_SetPriorityGrouping+0x44>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e40:	4013      	ands	r3, r2
 8003e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e56:	4a04      	ldr	r2, [pc, #16]	; (8003e68 <__NVIC_SetPriorityGrouping+0x44>)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	60d3      	str	r3, [r2, #12]
}
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	e000ed00 	.word	0xe000ed00

08003e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e70:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <__NVIC_GetPriorityGrouping+0x18>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	0a1b      	lsrs	r3, r3, #8
 8003e76:	f003 0307 	and.w	r3, r3, #7
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	db0b      	blt.n	8003eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	f003 021f 	and.w	r2, r3, #31
 8003ea0:	4907      	ldr	r1, [pc, #28]	; (8003ec0 <__NVIC_EnableIRQ+0x38>)
 8003ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8003eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	e000e100 	.word	0xe000e100

08003ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	6039      	str	r1, [r7, #0]
 8003ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	db0a      	blt.n	8003eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	490c      	ldr	r1, [pc, #48]	; (8003f10 <__NVIC_SetPriority+0x4c>)
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	0112      	lsls	r2, r2, #4
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eec:	e00a      	b.n	8003f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	4908      	ldr	r1, [pc, #32]	; (8003f14 <__NVIC_SetPriority+0x50>)
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	3b04      	subs	r3, #4
 8003efc:	0112      	lsls	r2, r2, #4
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	440b      	add	r3, r1
 8003f02:	761a      	strb	r2, [r3, #24]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	e000e100 	.word	0xe000e100
 8003f14:	e000ed00 	.word	0xe000ed00

08003f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b089      	sub	sp, #36	; 0x24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f1c3 0307 	rsb	r3, r3, #7
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	bf28      	it	cs
 8003f36:	2304      	movcs	r3, #4
 8003f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	2b06      	cmp	r3, #6
 8003f40:	d902      	bls.n	8003f48 <NVIC_EncodePriority+0x30>
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3b03      	subs	r3, #3
 8003f46:	e000      	b.n	8003f4a <NVIC_EncodePriority+0x32>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43da      	mvns	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f60:	f04f 31ff 	mov.w	r1, #4294967295
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6a:	43d9      	mvns	r1, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f70:	4313      	orrs	r3, r2
         );
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3724      	adds	r7, #36	; 0x24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f90:	d301      	bcc.n	8003f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f92:	2301      	movs	r3, #1
 8003f94:	e00f      	b.n	8003fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f96:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <SysTick_Config+0x40>)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f9e:	210f      	movs	r1, #15
 8003fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa4:	f7ff ff8e 	bl	8003ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <SysTick_Config+0x40>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fae:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <SysTick_Config+0x40>)
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	e000e010 	.word	0xe000e010

08003fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff ff29 	bl	8003e24 <__NVIC_SetPriorityGrouping>
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fec:	f7ff ff3e 	bl	8003e6c <__NVIC_GetPriorityGrouping>
 8003ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	6978      	ldr	r0, [r7, #20]
 8003ff8:	f7ff ff8e 	bl	8003f18 <NVIC_EncodePriority>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff ff5d 	bl	8003ec4 <__NVIC_SetPriority>
}
 800400a:	bf00      	nop
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	4603      	mov	r3, r0
 800401a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800401c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff31 	bl	8003e88 <__NVIC_EnableIRQ>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff ffa2 	bl	8003f80 <SysTick_Config>
 800403c:	4603      	mov	r3, r0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004054:	f7ff f974 	bl	8003340 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e099      	b.n	8004198 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004084:	e00f      	b.n	80040a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004086:	f7ff f95b 	bl	8003340 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b05      	cmp	r3, #5
 8004092:	d908      	bls.n	80040a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2203      	movs	r2, #3
 800409e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e078      	b.n	8004198 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e8      	bne.n	8004086 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4b38      	ldr	r3, [pc, #224]	; (80041a0 <HAL_DMA_Init+0x158>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d107      	bne.n	8004110 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	4313      	orrs	r3, r2
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0307 	bic.w	r3, r3, #7
 8004126:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	2b04      	cmp	r3, #4
 8004138:	d117      	bne.n	800416a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00e      	beq.n	800416a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fadf 	bl	8004710 <DMA_CheckFifoParam>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2240      	movs	r2, #64	; 0x40
 800415c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004166:	2301      	movs	r3, #1
 8004168:	e016      	b.n	8004198 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fa96 	bl	80046a4 <DMA_CalcBaseAndBitshift>
 8004178:	4603      	mov	r3, r0
 800417a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004180:	223f      	movs	r2, #63	; 0x3f
 8004182:	409a      	lsls	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	f010803f 	.word	0xf010803f

080041a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_DMA_Start_IT+0x26>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e040      	b.n	800424c <HAL_DMA_Start_IT+0xa8>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d12f      	bne.n	800423e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2202      	movs	r2, #2
 80041e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fa28 	bl	8004648 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	223f      	movs	r2, #63	; 0x3f
 80041fe:	409a      	lsls	r2, r3
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0216 	orr.w	r2, r2, #22
 8004212:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0208 	orr.w	r2, r2, #8
 800422a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e005      	b.n	800424a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004246:	2302      	movs	r3, #2
 8004248:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800424a:	7dfb      	ldrb	r3, [r7, #23]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004262:	f7ff f86d 	bl	8003340 <HAL_GetTick>
 8004266:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d008      	beq.n	8004286 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2280      	movs	r2, #128	; 0x80
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e052      	b.n	800432c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0216 	bic.w	r2, r2, #22
 8004294:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d103      	bne.n	80042b6 <HAL_DMA_Abort+0x62>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0208 	bic.w	r2, r2, #8
 80042c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042d6:	e013      	b.n	8004300 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042d8:	f7ff f832 	bl	8003340 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b05      	cmp	r3, #5
 80042e4:	d90c      	bls.n	8004300 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2203      	movs	r2, #3
 80042f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e015      	b.n	800432c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e4      	bne.n	80042d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004312:	223f      	movs	r2, #63	; 0x3f
 8004314:	409a      	lsls	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004340:	4b8e      	ldr	r3, [pc, #568]	; (800457c <HAL_DMA_IRQHandler+0x248>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a8e      	ldr	r2, [pc, #568]	; (8004580 <HAL_DMA_IRQHandler+0x24c>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	0a9b      	lsrs	r3, r3, #10
 800434c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435e:	2208      	movs	r2, #8
 8004360:	409a      	lsls	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4013      	ands	r3, r2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01a      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d013      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0204 	bic.w	r2, r2, #4
 8004386:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438c:	2208      	movs	r2, #8
 800438e:	409a      	lsls	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	f043 0201 	orr.w	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a4:	2201      	movs	r2, #1
 80043a6:	409a      	lsls	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d012      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00b      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	2201      	movs	r2, #1
 80043c4:	409a      	lsls	r2, r3
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	f043 0202 	orr.w	r2, r3, #2
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043da:	2204      	movs	r2, #4
 80043dc:	409a      	lsls	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d012      	beq.n	800440c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f8:	2204      	movs	r2, #4
 80043fa:	409a      	lsls	r2, r3
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	f043 0204 	orr.w	r2, r3, #4
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004410:	2210      	movs	r2, #16
 8004412:	409a      	lsls	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d043      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d03c      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442e:	2210      	movs	r2, #16
 8004430:	409a      	lsls	r2, r3
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d018      	beq.n	8004476 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d108      	bne.n	8004464 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d024      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4798      	blx	r3
 8004462:	e01f      	b.n	80044a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01b      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
 8004474:	e016      	b.n	80044a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d107      	bne.n	8004494 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0208 	bic.w	r2, r2, #8
 8004492:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	2220      	movs	r2, #32
 80044aa:	409a      	lsls	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4013      	ands	r3, r2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 808f 	beq.w	80045d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8087 	beq.w	80045d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ca:	2220      	movs	r2, #32
 80044cc:	409a      	lsls	r2, r3
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d136      	bne.n	800454c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0216 	bic.w	r2, r2, #22
 80044ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <HAL_DMA_IRQHandler+0x1da>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0208 	bic.w	r2, r2, #8
 800451c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004522:	223f      	movs	r2, #63	; 0x3f
 8004524:	409a      	lsls	r2, r3
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453e:	2b00      	cmp	r3, #0
 8004540:	d07e      	beq.n	8004640 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	4798      	blx	r3
        }
        return;
 800454a:	e079      	b.n	8004640 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01d      	beq.n	8004596 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10d      	bne.n	8004584 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	2b00      	cmp	r3, #0
 800456e:	d031      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4798      	blx	r3
 8004578:	e02c      	b.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
 800457a:	bf00      	nop
 800457c:	20000018 	.word	0x20000018
 8004580:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004588:	2b00      	cmp	r3, #0
 800458a:	d023      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	4798      	blx	r3
 8004594:	e01e      	b.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10f      	bne.n	80045c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0210 	bic.w	r2, r2, #16
 80045b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d032      	beq.n	8004642 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d022      	beq.n	800462e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2205      	movs	r2, #5
 80045ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	3301      	adds	r3, #1
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	429a      	cmp	r2, r3
 800460a:	d307      	bcc.n	800461c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f2      	bne.n	8004600 <HAL_DMA_IRQHandler+0x2cc>
 800461a:	e000      	b.n	800461e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800461c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
 800463e:	e000      	b.n	8004642 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004640:	bf00      	nop
    }
  }
}
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004664:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d108      	bne.n	8004688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004686:	e007      	b.n	8004698 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	60da      	str	r2, [r3, #12]
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	3b10      	subs	r3, #16
 80046b4:	4a14      	ldr	r2, [pc, #80]	; (8004708 <DMA_CalcBaseAndBitshift+0x64>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046be:	4a13      	ldr	r2, [pc, #76]	; (800470c <DMA_CalcBaseAndBitshift+0x68>)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d909      	bls.n	80046e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	1d1a      	adds	r2, r3, #4
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	659a      	str	r2, [r3, #88]	; 0x58
 80046e4:	e007      	b.n	80046f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046ee:	f023 0303 	bic.w	r3, r3, #3
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	aaaaaaab 	.word	0xaaaaaaab
 800470c:	0801042c 	.word	0x0801042c

08004710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d11f      	bne.n	800476a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d856      	bhi.n	80047de <DMA_CheckFifoParam+0xce>
 8004730:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <DMA_CheckFifoParam+0x28>)
 8004732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004736:	bf00      	nop
 8004738:	08004749 	.word	0x08004749
 800473c:	0800475b 	.word	0x0800475b
 8004740:	08004749 	.word	0x08004749
 8004744:	080047df 	.word	0x080047df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d046      	beq.n	80047e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004758:	e043      	b.n	80047e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004762:	d140      	bne.n	80047e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004768:	e03d      	b.n	80047e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004772:	d121      	bne.n	80047b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b03      	cmp	r3, #3
 8004778:	d837      	bhi.n	80047ea <DMA_CheckFifoParam+0xda>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <DMA_CheckFifoParam+0x70>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	08004791 	.word	0x08004791
 8004784:	08004797 	.word	0x08004797
 8004788:	08004791 	.word	0x08004791
 800478c:	080047a9 	.word	0x080047a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	e030      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d025      	beq.n	80047ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a6:	e022      	b.n	80047ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047b0:	d11f      	bne.n	80047f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047b6:	e01c      	b.n	80047f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d903      	bls.n	80047c6 <DMA_CheckFifoParam+0xb6>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d003      	beq.n	80047cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047c4:	e018      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
      break;
 80047ca:	e015      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00e      	beq.n	80047f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
      break;
 80047dc:	e00b      	b.n	80047f6 <DMA_CheckFifoParam+0xe6>
      break;
 80047de:	bf00      	nop
 80047e0:	e00a      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047e2:	bf00      	nop
 80047e4:	e008      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047e6:	bf00      	nop
 80047e8:	e006      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047ea:	bf00      	nop
 80047ec:	e004      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047ee:	bf00      	nop
 80047f0:	e002      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80047f2:	bf00      	nop
 80047f4:	e000      	b.n	80047f8 <DMA_CheckFifoParam+0xe8>
      break;
 80047f6:	bf00      	nop
    }
  } 
  
  return status; 
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop

08004808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004808:	b480      	push	{r7}
 800480a:	b089      	sub	sp, #36	; 0x24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004816:	2300      	movs	r3, #0
 8004818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	e16b      	b.n	8004afc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004824:	2201      	movs	r2, #1
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	429a      	cmp	r2, r3
 800483e:	f040 815a 	bne.w	8004af6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d005      	beq.n	800485a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004856:	2b02      	cmp	r3, #2
 8004858:	d130      	bne.n	80048bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	2203      	movs	r2, #3
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4313      	orrs	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004890:	2201      	movs	r2, #1
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 0201 	and.w	r2, r3, #1
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d017      	beq.n	80048f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	2203      	movs	r2, #3
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d123      	bne.n	800494c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	08da      	lsrs	r2, r3, #3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3208      	adds	r2, #8
 800490c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	220f      	movs	r2, #15
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4013      	ands	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	08da      	lsrs	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3208      	adds	r2, #8
 8004946:	69b9      	ldr	r1, [r7, #24]
 8004948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	2203      	movs	r2, #3
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 0203 	and.w	r2, r3, #3
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4313      	orrs	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80b4 	beq.w	8004af6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	4b60      	ldr	r3, [pc, #384]	; (8004b14 <HAL_GPIO_Init+0x30c>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	4a5f      	ldr	r2, [pc, #380]	; (8004b14 <HAL_GPIO_Init+0x30c>)
 8004998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800499c:	6453      	str	r3, [r2, #68]	; 0x44
 800499e:	4b5d      	ldr	r3, [pc, #372]	; (8004b14 <HAL_GPIO_Init+0x30c>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049aa:	4a5b      	ldr	r2, [pc, #364]	; (8004b18 <HAL_GPIO_Init+0x310>)
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	089b      	lsrs	r3, r3, #2
 80049b0:	3302      	adds	r3, #2
 80049b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	220f      	movs	r2, #15
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	43db      	mvns	r3, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4013      	ands	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a52      	ldr	r2, [pc, #328]	; (8004b1c <HAL_GPIO_Init+0x314>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d02b      	beq.n	8004a2e <HAL_GPIO_Init+0x226>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a51      	ldr	r2, [pc, #324]	; (8004b20 <HAL_GPIO_Init+0x318>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d025      	beq.n	8004a2a <HAL_GPIO_Init+0x222>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a50      	ldr	r2, [pc, #320]	; (8004b24 <HAL_GPIO_Init+0x31c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01f      	beq.n	8004a26 <HAL_GPIO_Init+0x21e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a4f      	ldr	r2, [pc, #316]	; (8004b28 <HAL_GPIO_Init+0x320>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d019      	beq.n	8004a22 <HAL_GPIO_Init+0x21a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a4e      	ldr	r2, [pc, #312]	; (8004b2c <HAL_GPIO_Init+0x324>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d013      	beq.n	8004a1e <HAL_GPIO_Init+0x216>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a4d      	ldr	r2, [pc, #308]	; (8004b30 <HAL_GPIO_Init+0x328>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00d      	beq.n	8004a1a <HAL_GPIO_Init+0x212>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a4c      	ldr	r2, [pc, #304]	; (8004b34 <HAL_GPIO_Init+0x32c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <HAL_GPIO_Init+0x20e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a4b      	ldr	r2, [pc, #300]	; (8004b38 <HAL_GPIO_Init+0x330>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <HAL_GPIO_Init+0x20a>
 8004a0e:	2307      	movs	r3, #7
 8004a10:	e00e      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a12:	2308      	movs	r3, #8
 8004a14:	e00c      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a16:	2306      	movs	r3, #6
 8004a18:	e00a      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a1a:	2305      	movs	r3, #5
 8004a1c:	e008      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a1e:	2304      	movs	r3, #4
 8004a20:	e006      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a22:	2303      	movs	r3, #3
 8004a24:	e004      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e002      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <HAL_GPIO_Init+0x228>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	69fa      	ldr	r2, [r7, #28]
 8004a32:	f002 0203 	and.w	r2, r2, #3
 8004a36:	0092      	lsls	r2, r2, #2
 8004a38:	4093      	lsls	r3, r2
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a40:	4935      	ldr	r1, [pc, #212]	; (8004b18 <HAL_GPIO_Init+0x310>)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	089b      	lsrs	r3, r3, #2
 8004a46:	3302      	adds	r3, #2
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a4e:	4b3b      	ldr	r3, [pc, #236]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a72:	4a32      	ldr	r2, [pc, #200]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a78:	4b30      	ldr	r3, [pc, #192]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a9c:	4a27      	ldr	r2, [pc, #156]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004aa2:	4b26      	ldr	r3, [pc, #152]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ac6:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004af0:	4a12      	ldr	r2, [pc, #72]	; (8004b3c <HAL_GPIO_Init+0x334>)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3301      	adds	r3, #1
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	2b0f      	cmp	r3, #15
 8004b00:	f67f ae90 	bls.w	8004824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	3724      	adds	r7, #36	; 0x24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40013800 	.word	0x40013800
 8004b1c:	40020000 	.word	0x40020000
 8004b20:	40020400 	.word	0x40020400
 8004b24:	40020800 	.word	0x40020800
 8004b28:	40020c00 	.word	0x40020c00
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	40021400 	.word	0x40021400
 8004b34:	40021800 	.word	0x40021800
 8004b38:	40021c00 	.word	0x40021c00
 8004b3c:	40013c00 	.word	0x40013c00

08004b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	887b      	ldrh	r3, [r7, #2]
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
 8004b5c:	e001      	b.n	8004b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	807b      	strh	r3, [r7, #2]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b80:	787b      	ldrb	r3, [r7, #1]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b86:	887a      	ldrh	r2, [r7, #2]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b8c:	e003      	b.n	8004b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b8e:	887b      	ldrh	r3, [r7, #2]
 8004b90:	041a      	lsls	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	619a      	str	r2, [r3, #24]
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bb4:	887a      	ldrh	r2, [r7, #2]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	041a      	lsls	r2, r3, #16
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	43d9      	mvns	r1, r3
 8004bc0:	887b      	ldrh	r3, [r7, #2]
 8004bc2:	400b      	ands	r3, r1
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	619a      	str	r2, [r3, #24]
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
	...

08004bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e12b      	b.n	8004e42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fd ffb2 	bl	8002b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2224      	movs	r2, #36	; 0x24
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f002 ffa6 	bl	8007b8c <HAL_RCC_GetPCLK1Freq>
 8004c40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4a81      	ldr	r2, [pc, #516]	; (8004e4c <HAL_I2C_Init+0x274>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d807      	bhi.n	8004c5c <HAL_I2C_Init+0x84>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a80      	ldr	r2, [pc, #512]	; (8004e50 <HAL_I2C_Init+0x278>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	bf94      	ite	ls
 8004c54:	2301      	movls	r3, #1
 8004c56:	2300      	movhi	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	e006      	b.n	8004c6a <HAL_I2C_Init+0x92>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4a7d      	ldr	r2, [pc, #500]	; (8004e54 <HAL_I2C_Init+0x27c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	bf94      	ite	ls
 8004c64:	2301      	movls	r3, #1
 8004c66:	2300      	movhi	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0e7      	b.n	8004e42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a78      	ldr	r2, [pc, #480]	; (8004e58 <HAL_I2C_Init+0x280>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	0c9b      	lsrs	r3, r3, #18
 8004c7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4a6a      	ldr	r2, [pc, #424]	; (8004e4c <HAL_I2C_Init+0x274>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d802      	bhi.n	8004cac <HAL_I2C_Init+0xd4>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	e009      	b.n	8004cc0 <HAL_I2C_Init+0xe8>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cb2:	fb02 f303 	mul.w	r3, r2, r3
 8004cb6:	4a69      	ldr	r2, [pc, #420]	; (8004e5c <HAL_I2C_Init+0x284>)
 8004cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004cd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	495c      	ldr	r1, [pc, #368]	; (8004e4c <HAL_I2C_Init+0x274>)
 8004cdc:	428b      	cmp	r3, r1
 8004cde:	d819      	bhi.n	8004d14 <HAL_I2C_Init+0x13c>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1e59      	subs	r1, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cee:	1c59      	adds	r1, r3, #1
 8004cf0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cf4:	400b      	ands	r3, r1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_I2C_Init+0x138>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1e59      	subs	r1, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d08:	3301      	adds	r3, #1
 8004d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0e:	e051      	b.n	8004db4 <HAL_I2C_Init+0x1dc>
 8004d10:	2304      	movs	r3, #4
 8004d12:	e04f      	b.n	8004db4 <HAL_I2C_Init+0x1dc>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d111      	bne.n	8004d40 <HAL_I2C_Init+0x168>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	1e58      	subs	r0, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	440b      	add	r3, r1
 8004d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2e:	3301      	adds	r3, #1
 8004d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	e012      	b.n	8004d66 <HAL_I2C_Init+0x18e>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	1e58      	subs	r0, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6859      	ldr	r1, [r3, #4]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	0099      	lsls	r1, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d56:	3301      	adds	r3, #1
 8004d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf0c      	ite	eq
 8004d60:	2301      	moveq	r3, #1
 8004d62:	2300      	movne	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_Init+0x196>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e022      	b.n	8004db4 <HAL_I2C_Init+0x1dc>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10e      	bne.n	8004d94 <HAL_I2C_Init+0x1bc>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1e58      	subs	r0, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6859      	ldr	r1, [r3, #4]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	440b      	add	r3, r1
 8004d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d88:	3301      	adds	r3, #1
 8004d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d92:	e00f      	b.n	8004db4 <HAL_I2C_Init+0x1dc>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	1e58      	subs	r0, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	0099      	lsls	r1, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004daa:	3301      	adds	r3, #1
 8004dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	6809      	ldr	r1, [r1, #0]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004de2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6911      	ldr	r1, [r2, #16]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68d2      	ldr	r2, [r2, #12]
 8004dee:	4311      	orrs	r1, r2
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695a      	ldr	r2, [r3, #20]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	000186a0 	.word	0x000186a0
 8004e50:	001e847f 	.word	0x001e847f
 8004e54:	003d08ff 	.word	0x003d08ff
 8004e58:	431bde83 	.word	0x431bde83
 8004e5c:	10624dd3 	.word	0x10624dd3

08004e60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	4608      	mov	r0, r1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4603      	mov	r3, r0
 8004e70:	817b      	strh	r3, [r7, #10]
 8004e72:	460b      	mov	r3, r1
 8004e74:	813b      	strh	r3, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e7a:	f7fe fa61 	bl	8003340 <HAL_GetTick>
 8004e7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	f040 80d9 	bne.w	8005040 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	2319      	movs	r3, #25
 8004e94:	2201      	movs	r2, #1
 8004e96:	496d      	ldr	r1, [pc, #436]	; (800504c <HAL_I2C_Mem_Write+0x1ec>)
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fdad 	bl	80059f8 <I2C_WaitOnFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e0cc      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_I2C_Mem_Write+0x56>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e0c5      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d007      	beq.n	8004edc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2221      	movs	r2, #33	; 0x21
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2240      	movs	r2, #64	; 0x40
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a3a      	ldr	r2, [r7, #32]
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a4d      	ldr	r2, [pc, #308]	; (8005050 <HAL_I2C_Mem_Write+0x1f0>)
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f1e:	88f8      	ldrh	r0, [r7, #6]
 8004f20:	893a      	ldrh	r2, [r7, #8]
 8004f22:	8979      	ldrh	r1, [r7, #10]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fbe4 	bl	80056fc <I2C_RequestMemoryWrite>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d052      	beq.n	8004fe0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e081      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fe2e 	bl	8005ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00d      	beq.n	8004f6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d107      	bne.n	8004f66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e06b      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	781a      	ldrb	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d11b      	bne.n	8004fe0 <HAL_I2C_Mem_Write+0x180>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d017      	beq.n	8004fe0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1aa      	bne.n	8004f3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fe1a 	bl	8005c26 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00d      	beq.n	8005014 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d107      	bne.n	8005010 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e016      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	00100002 	.word	0x00100002
 8005050:	ffff0000 	.word	0xffff0000

08005054 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08c      	sub	sp, #48	; 0x30
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	4608      	mov	r0, r1
 800505e:	4611      	mov	r1, r2
 8005060:	461a      	mov	r2, r3
 8005062:	4603      	mov	r3, r0
 8005064:	817b      	strh	r3, [r7, #10]
 8005066:	460b      	mov	r3, r1
 8005068:	813b      	strh	r3, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800506e:	f7fe f967 	bl	8003340 <HAL_GetTick>
 8005072:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b20      	cmp	r3, #32
 800507e:	f040 8208 	bne.w	8005492 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	2319      	movs	r3, #25
 8005088:	2201      	movs	r2, #1
 800508a:	497b      	ldr	r1, [pc, #492]	; (8005278 <HAL_I2C_Mem_Read+0x224>)
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fcb3 	bl	80059f8 <I2C_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005098:	2302      	movs	r3, #2
 800509a:	e1fb      	b.n	8005494 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_I2C_Mem_Read+0x56>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e1f4      	b.n	8005494 <HAL_I2C_Mem_Read+0x440>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d007      	beq.n	80050d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2222      	movs	r2, #34	; 0x22
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2240      	movs	r2, #64	; 0x40
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005100:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a5b      	ldr	r2, [pc, #364]	; (800527c <HAL_I2C_Mem_Read+0x228>)
 8005110:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005112:	88f8      	ldrh	r0, [r7, #6]
 8005114:	893a      	ldrh	r2, [r7, #8]
 8005116:	8979      	ldrh	r1, [r7, #10]
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	4603      	mov	r3, r0
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 fb80 	bl	8005828 <I2C_RequestMemoryRead>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e1b0      	b.n	8005494 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	2b00      	cmp	r3, #0
 8005138:	d113      	bne.n	8005162 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800513a:	2300      	movs	r3, #0
 800513c:	623b      	str	r3, [r7, #32]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	623b      	str	r3, [r7, #32]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e184      	b.n	800546c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005166:	2b01      	cmp	r3, #1
 8005168:	d11b      	bne.n	80051a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005178:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e164      	b.n	800546c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d11b      	bne.n	80051e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ca:	2300      	movs	r3, #0
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	e144      	b.n	800546c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051f8:	e138      	b.n	800546c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fe:	2b03      	cmp	r3, #3
 8005200:	f200 80f1 	bhi.w	80053e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005208:	2b01      	cmp	r3, #1
 800520a:	d123      	bne.n	8005254 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800520c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 fd49 	bl	8005ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e139      	b.n	8005494 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005252:	e10b      	b.n	800546c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005258:	2b02      	cmp	r3, #2
 800525a:	d14e      	bne.n	80052fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005262:	2200      	movs	r2, #0
 8005264:	4906      	ldr	r1, [pc, #24]	; (8005280 <HAL_I2C_Mem_Read+0x22c>)
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 fbc6 	bl	80059f8 <I2C_WaitOnFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d008      	beq.n	8005284 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e10e      	b.n	8005494 <HAL_I2C_Mem_Read+0x440>
 8005276:	bf00      	nop
 8005278:	00100002 	.word	0x00100002
 800527c:	ffff0000 	.word	0xffff0000
 8005280:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052f8:	e0b8      	b.n	800546c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	2200      	movs	r2, #0
 8005302:	4966      	ldr	r1, [pc, #408]	; (800549c <HAL_I2C_Mem_Read+0x448>)
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fb77 	bl	80059f8 <I2C_WaitOnFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0bf      	b.n	8005494 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	2200      	movs	r2, #0
 800535e:	494f      	ldr	r1, [pc, #316]	; (800549c <HAL_I2C_Mem_Read+0x448>)
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fb49 	bl	80059f8 <I2C_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e091      	b.n	8005494 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800537e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053e4:	e042      	b.n	800546c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 fc5c 	bl	8005ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e04c      	b.n	8005494 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005422:	b29b      	uxth	r3, r3
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b04      	cmp	r3, #4
 8005438:	d118      	bne.n	800546c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005470:	2b00      	cmp	r3, #0
 8005472:	f47f aec2 	bne.w	80051fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	e000      	b.n	8005494 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005492:	2302      	movs	r3, #2
  }
}
 8005494:	4618      	mov	r0, r3
 8005496:	3728      	adds	r7, #40	; 0x28
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	00010004 	.word	0x00010004

080054a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08a      	sub	sp, #40	; 0x28
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	460b      	mov	r3, r1
 80054ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80054b0:	f7fd ff46 	bl	8003340 <HAL_GetTick>
 80054b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	f040 8111 	bne.w	80056ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	2319      	movs	r3, #25
 80054ce:	2201      	movs	r2, #1
 80054d0:	4988      	ldr	r1, [pc, #544]	; (80056f4 <HAL_I2C_IsDeviceReady+0x254>)
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fa90 	bl	80059f8 <I2C_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80054de:	2302      	movs	r3, #2
 80054e0:	e104      	b.n	80056ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_I2C_IsDeviceReady+0x50>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e0fd      	b.n	80056ec <HAL_I2C_IsDeviceReady+0x24c>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b01      	cmp	r3, #1
 8005504:	d007      	beq.n	8005516 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0201 	orr.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005524:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2224      	movs	r2, #36	; 0x24
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4a70      	ldr	r2, [pc, #448]	; (80056f8 <HAL_I2C_IsDeviceReady+0x258>)
 8005538:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005548:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2200      	movs	r2, #0
 8005552:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 fa4e 	bl	80059f8 <I2C_WaitOnFlagUntilTimeout>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00d      	beq.n	800557e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005570:	d103      	bne.n	800557a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005578:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e0b6      	b.n	80056ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800557e:	897b      	ldrh	r3, [r7, #10]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	461a      	mov	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800558c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800558e:	f7fd fed7 	bl	8003340 <HAL_GetTick>
 8005592:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b02      	cmp	r3, #2
 80055a0:	bf0c      	ite	eq
 80055a2:	2301      	moveq	r3, #1
 80055a4:	2300      	movne	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b8:	bf0c      	ite	eq
 80055ba:	2301      	moveq	r3, #1
 80055bc:	2300      	movne	r3, #0
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80055c2:	e025      	b.n	8005610 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055c4:	f7fd febc 	bl	8003340 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d302      	bcc.n	80055da <HAL_I2C_IsDeviceReady+0x13a>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d103      	bne.n	80055e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	22a0      	movs	r2, #160	; 0xa0
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	bf0c      	ite	eq
 80055f0:	2301      	moveq	r3, #1
 80055f2:	2300      	movne	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005606:	bf0c      	ite	eq
 8005608:	2301      	moveq	r3, #1
 800560a:	2300      	movne	r3, #0
 800560c:	b2db      	uxtb	r3, r3
 800560e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2ba0      	cmp	r3, #160	; 0xa0
 800561a:	d005      	beq.n	8005628 <HAL_I2C_IsDeviceReady+0x188>
 800561c:	7dfb      	ldrb	r3, [r7, #23]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d102      	bne.n	8005628 <HAL_I2C_IsDeviceReady+0x188>
 8005622:	7dbb      	ldrb	r3, [r7, #22]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0cd      	beq.n	80055c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b02      	cmp	r3, #2
 800563c:	d129      	bne.n	8005692 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	2319      	movs	r3, #25
 800566a:	2201      	movs	r2, #1
 800566c:	4921      	ldr	r1, [pc, #132]	; (80056f4 <HAL_I2C_IsDeviceReady+0x254>)
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f9c2 	bl	80059f8 <I2C_WaitOnFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e036      	b.n	80056ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	e02c      	b.n	80056ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	2319      	movs	r3, #25
 80056b2:	2201      	movs	r2, #1
 80056b4:	490f      	ldr	r1, [pc, #60]	; (80056f4 <HAL_I2C_IsDeviceReady+0x254>)
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f99e 	bl	80059f8 <I2C_WaitOnFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e012      	b.n	80056ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	3301      	adds	r3, #1
 80056ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	f4ff af32 	bcc.w	800553a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
  }
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3720      	adds	r7, #32
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	00100002 	.word	0x00100002
 80056f8:	ffff0000 	.word	0xffff0000

080056fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	4608      	mov	r0, r1
 8005706:	4611      	mov	r1, r2
 8005708:	461a      	mov	r2, r3
 800570a:	4603      	mov	r3, r0
 800570c:	817b      	strh	r3, [r7, #10]
 800570e:	460b      	mov	r3, r1
 8005710:	813b      	strh	r3, [r7, #8]
 8005712:	4613      	mov	r3, r2
 8005714:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005724:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	2200      	movs	r2, #0
 800572e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f960 	bl	80059f8 <I2C_WaitOnFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00d      	beq.n	800575a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800574c:	d103      	bne.n	8005756 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005754:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e05f      	b.n	800581a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800575a:	897b      	ldrh	r3, [r7, #10]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005768:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	6a3a      	ldr	r2, [r7, #32]
 800576e:	492d      	ldr	r1, [pc, #180]	; (8005824 <I2C_RequestMemoryWrite+0x128>)
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f998 	bl	8005aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e04c      	b.n	800581a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005798:	6a39      	ldr	r1, [r7, #32]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fa02 	bl	8005ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d107      	bne.n	80057be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e02b      	b.n	800581a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d105      	bne.n	80057d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057c8:	893b      	ldrh	r3, [r7, #8]
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	611a      	str	r2, [r3, #16]
 80057d2:	e021      	b.n	8005818 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057d4:	893b      	ldrh	r3, [r7, #8]
 80057d6:	0a1b      	lsrs	r3, r3, #8
 80057d8:	b29b      	uxth	r3, r3
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e4:	6a39      	ldr	r1, [r7, #32]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f9dc 	bl	8005ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00d      	beq.n	800580e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d107      	bne.n	800580a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005808:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e005      	b.n	800581a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800580e:	893b      	ldrh	r3, [r7, #8]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	00010002 	.word	0x00010002

08005828 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af02      	add	r7, sp, #8
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	4608      	mov	r0, r1
 8005832:	4611      	mov	r1, r2
 8005834:	461a      	mov	r2, r3
 8005836:	4603      	mov	r3, r0
 8005838:	817b      	strh	r3, [r7, #10]
 800583a:	460b      	mov	r3, r1
 800583c:	813b      	strh	r3, [r7, #8]
 800583e:	4613      	mov	r3, r2
 8005840:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005850:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005860:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	2200      	movs	r2, #0
 800586a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 f8c2 	bl	80059f8 <I2C_WaitOnFlagUntilTimeout>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00d      	beq.n	8005896 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005888:	d103      	bne.n	8005892 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e0aa      	b.n	80059ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005896:	897b      	ldrh	r3, [r7, #10]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	461a      	mov	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	6a3a      	ldr	r2, [r7, #32]
 80058aa:	4952      	ldr	r1, [pc, #328]	; (80059f4 <I2C_RequestMemoryRead+0x1cc>)
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f8fa 	bl	8005aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e097      	b.n	80059ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d4:	6a39      	ldr	r1, [r7, #32]
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f964 	bl	8005ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00d      	beq.n	80058fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d107      	bne.n	80058fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e076      	b.n	80059ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d105      	bne.n	8005910 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005904:	893b      	ldrh	r3, [r7, #8]
 8005906:	b2da      	uxtb	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	611a      	str	r2, [r3, #16]
 800590e:	e021      	b.n	8005954 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005910:	893b      	ldrh	r3, [r7, #8]
 8005912:	0a1b      	lsrs	r3, r3, #8
 8005914:	b29b      	uxth	r3, r3
 8005916:	b2da      	uxtb	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800591e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005920:	6a39      	ldr	r1, [r7, #32]
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 f93e 	bl	8005ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00d      	beq.n	800594a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	2b04      	cmp	r3, #4
 8005934:	d107      	bne.n	8005946 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005944:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e050      	b.n	80059ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800594a:	893b      	ldrh	r3, [r7, #8]
 800594c:	b2da      	uxtb	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005956:	6a39      	ldr	r1, [r7, #32]
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f923 	bl	8005ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00d      	beq.n	8005980 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	2b04      	cmp	r3, #4
 800596a:	d107      	bne.n	800597c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800597a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e035      	b.n	80059ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800598e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	2200      	movs	r2, #0
 8005998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f82b 	bl	80059f8 <I2C_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00d      	beq.n	80059c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b6:	d103      	bne.n	80059c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e013      	b.n	80059ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059c4:	897b      	ldrh	r3, [r7, #10]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f043 0301 	orr.w	r3, r3, #1
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	6a3a      	ldr	r2, [r7, #32]
 80059d8:	4906      	ldr	r1, [pc, #24]	; (80059f4 <I2C_RequestMemoryRead+0x1cc>)
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 f863 	bl	8005aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	00010002 	.word	0x00010002

080059f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	4613      	mov	r3, r2
 8005a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a08:	e025      	b.n	8005a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d021      	beq.n	8005a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a12:	f7fd fc95 	bl	8003340 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d302      	bcc.n	8005a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d116      	bne.n	8005a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f043 0220 	orr.w	r2, r3, #32
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e023      	b.n	8005a9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d10d      	bne.n	8005a7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	43da      	mvns	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bf0c      	ite	eq
 8005a72:	2301      	moveq	r3, #1
 8005a74:	2300      	movne	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	e00c      	b.n	8005a96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	43da      	mvns	r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4013      	ands	r3, r2
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	bf0c      	ite	eq
 8005a8e:	2301      	moveq	r3, #1
 8005a90:	2300      	movne	r3, #0
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d0b6      	beq.n	8005a0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	607a      	str	r2, [r7, #4]
 8005ab2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ab4:	e051      	b.n	8005b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac4:	d123      	bne.n	8005b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ade:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	f043 0204 	orr.w	r2, r3, #4
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e046      	b.n	8005b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b14:	d021      	beq.n	8005b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b16:	f7fd fc13 	bl	8003340 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d302      	bcc.n	8005b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d116      	bne.n	8005b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f043 0220 	orr.w	r2, r3, #32
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e020      	b.n	8005b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d10c      	bne.n	8005b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	43da      	mvns	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bf14      	ite	ne
 8005b76:	2301      	movne	r3, #1
 8005b78:	2300      	moveq	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	e00b      	b.n	8005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	43da      	mvns	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bf14      	ite	ne
 8005b90:	2301      	movne	r3, #1
 8005b92:	2300      	moveq	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d18d      	bne.n	8005ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bb0:	e02d      	b.n	8005c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 f8ce 	bl	8005d54 <I2C_IsAcknowledgeFailed>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e02d      	b.n	8005c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc8:	d021      	beq.n	8005c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bca:	f7fd fbb9 	bl	8003340 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d302      	bcc.n	8005be0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d116      	bne.n	8005c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f043 0220 	orr.w	r2, r3, #32
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e007      	b.n	8005c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c18:	2b80      	cmp	r3, #128	; 0x80
 8005c1a:	d1ca      	bne.n	8005bb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c32:	e02d      	b.n	8005c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 f88d 	bl	8005d54 <I2C_IsAcknowledgeFailed>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e02d      	b.n	8005ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4a:	d021      	beq.n	8005c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4c:	f7fd fb78 	bl	8003340 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d302      	bcc.n	8005c62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d116      	bne.n	8005c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	f043 0220 	orr.w	r2, r3, #32
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e007      	b.n	8005ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d1ca      	bne.n	8005c34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cb4:	e042      	b.n	8005d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	2b10      	cmp	r3, #16
 8005cc2:	d119      	bne.n	8005cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0210 	mvn.w	r2, #16
 8005ccc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e029      	b.n	8005d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf8:	f7fd fb22 	bl	8003340 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d302      	bcc.n	8005d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d116      	bne.n	8005d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	f043 0220 	orr.w	r2, r3, #32
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e007      	b.n	8005d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d46:	2b40      	cmp	r3, #64	; 0x40
 8005d48:	d1b5      	bne.n	8005cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6a:	d11b      	bne.n	8005da4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	f043 0204 	orr.w	r2, r3, #4
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005db4:	b08f      	sub	sp, #60	; 0x3c
 8005db6:	af0a      	add	r7, sp, #40	; 0x28
 8005db8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e10f      	b.n	8005fe4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f006 ffd2 	bl	800cd88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2203      	movs	r2, #3
 8005de8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f003 fb0f 	bl	8009426 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	603b      	str	r3, [r7, #0]
 8005e0e:	687e      	ldr	r6, [r7, #4]
 8005e10:	466d      	mov	r5, sp
 8005e12:	f106 0410 	add.w	r4, r6, #16
 8005e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e22:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e26:	1d33      	adds	r3, r6, #4
 8005e28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e2a:	6838      	ldr	r0, [r7, #0]
 8005e2c:	f003 f9e6 	bl	80091fc <USB_CoreInit>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e0d0      	b.n	8005fe4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2100      	movs	r1, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f003 fafd 	bl	8009448 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e4e:	2300      	movs	r3, #0
 8005e50:	73fb      	strb	r3, [r7, #15]
 8005e52:	e04a      	b.n	8005eea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e54:	7bfa      	ldrb	r2, [r7, #15]
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	440b      	add	r3, r1
 8005e62:	333d      	adds	r3, #61	; 0x3d
 8005e64:	2201      	movs	r2, #1
 8005e66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e68:	7bfa      	ldrb	r2, [r7, #15]
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	333c      	adds	r3, #60	; 0x3c
 8005e78:	7bfa      	ldrb	r2, [r7, #15]
 8005e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e7c:	7bfa      	ldrb	r2, [r7, #15]
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	b298      	uxth	r0, r3
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	4613      	mov	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4413      	add	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	3344      	adds	r3, #68	; 0x44
 8005e90:	4602      	mov	r2, r0
 8005e92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e94:	7bfa      	ldrb	r2, [r7, #15]
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3340      	adds	r3, #64	; 0x40
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ea8:	7bfa      	ldrb	r2, [r7, #15]
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	4613      	mov	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	3348      	adds	r3, #72	; 0x48
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ebc:	7bfa      	ldrb	r2, [r7, #15]
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	334c      	adds	r3, #76	; 0x4c
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ed0:	7bfa      	ldrb	r2, [r7, #15]
 8005ed2:	6879      	ldr	r1, [r7, #4]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	440b      	add	r3, r1
 8005ede:	3354      	adds	r3, #84	; 0x54
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	73fb      	strb	r3, [r7, #15]
 8005eea:	7bfa      	ldrb	r2, [r7, #15]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d3af      	bcc.n	8005e54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]
 8005ef8:	e044      	b.n	8005f84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005efa:	7bfa      	ldrb	r2, [r7, #15]
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	4613      	mov	r3, r2
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	440b      	add	r3, r1
 8005f08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f10:	7bfa      	ldrb	r2, [r7, #15]
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	4613      	mov	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005f22:	7bfa      	ldrb	r2, [r7, #15]
 8005f24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f26:	7bfa      	ldrb	r2, [r7, #15]
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f38:	2200      	movs	r2, #0
 8005f3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f3c:	7bfa      	ldrb	r2, [r7, #15]
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	4613      	mov	r3, r2
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	4413      	add	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f52:	7bfa      	ldrb	r2, [r7, #15]
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f68:	7bfa      	ldrb	r2, [r7, #15]
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	3301      	adds	r3, #1
 8005f82:	73fb      	strb	r3, [r7, #15]
 8005f84:	7bfa      	ldrb	r2, [r7, #15]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d3b5      	bcc.n	8005efa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	687e      	ldr	r6, [r7, #4]
 8005f96:	466d      	mov	r5, sp
 8005f98:	f106 0410 	add.w	r4, r6, #16
 8005f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fac:	1d33      	adds	r3, r6, #4
 8005fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fb0:	6838      	ldr	r0, [r7, #0]
 8005fb2:	f003 fa95 	bl	80094e0 <USB_DevInit>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d005      	beq.n	8005fc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e00d      	b.n	8005fe4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f004 fbe4 	bl	800a7aa <USB_DevDisconnect>

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_PCD_Start+0x1c>
 8006004:	2302      	movs	r3, #2
 8006006:	e020      	b.n	800604a <HAL_PCD_Start+0x5e>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	2b01      	cmp	r3, #1
 8006016:	d109      	bne.n	800602c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800601c:	2b01      	cmp	r3, #1
 800601e:	d005      	beq.n	800602c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4618      	mov	r0, r3
 8006032:	f003 f9e7 	bl	8009404 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f004 fb94 	bl	800a768 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006052:	b590      	push	{r4, r7, lr}
 8006054:	b08d      	sub	sp, #52	; 0x34
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f004 fc52 	bl	800a912 <USB_GetMode>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	f040 848a 	bne.w	800698a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f004 fbb6 	bl	800a7ec <USB_ReadInterrupts>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8480 	beq.w	8006988 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	0a1b      	lsrs	r3, r3, #8
 8006092:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f004 fba3 	bl	800a7ec <USB_ReadInterrupts>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d107      	bne.n	80060c0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695a      	ldr	r2, [r3, #20]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f002 0202 	and.w	r2, r2, #2
 80060be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f004 fb91 	bl	800a7ec <USB_ReadInterrupts>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d161      	bne.n	8006198 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0210 	bic.w	r2, r2, #16
 80060e2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	f003 020f 	and.w	r2, r3, #15
 80060f0:	4613      	mov	r3, r2
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	4413      	add	r3, r2
 8006100:	3304      	adds	r3, #4
 8006102:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	0c5b      	lsrs	r3, r3, #17
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	2b02      	cmp	r3, #2
 800610e:	d124      	bne.n	800615a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006116:	4013      	ands	r3, r2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d035      	beq.n	8006188 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	091b      	lsrs	r3, r3, #4
 8006124:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	6a38      	ldr	r0, [r7, #32]
 8006130:	f004 f9c8 	bl	800a4c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	091b      	lsrs	r3, r3, #4
 800613c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006140:	441a      	add	r2, r3
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	6a1a      	ldr	r2, [r3, #32]
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006152:	441a      	add	r2, r3
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	621a      	str	r2, [r3, #32]
 8006158:	e016      	b.n	8006188 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	0c5b      	lsrs	r3, r3, #17
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	2b06      	cmp	r3, #6
 8006164:	d110      	bne.n	8006188 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800616c:	2208      	movs	r2, #8
 800616e:	4619      	mov	r1, r3
 8006170:	6a38      	ldr	r0, [r7, #32]
 8006172:	f004 f9a7 	bl	800a4c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	6a1a      	ldr	r2, [r3, #32]
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	091b      	lsrs	r3, r3, #4
 800617e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006182:	441a      	add	r2, r3
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0210 	orr.w	r2, r2, #16
 8006196:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	f004 fb25 	bl	800a7ec <USB_ReadInterrupts>
 80061a2:	4603      	mov	r3, r0
 80061a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061ac:	f040 80a7 	bne.w	80062fe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f004 fb2a 	bl	800a812 <USB_ReadDevAllOutEpInterrupt>
 80061be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80061c0:	e099      	b.n	80062f6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 808e 	beq.w	80062ea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	4611      	mov	r1, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f004 fb4e 	bl	800a87a <USB_ReadDevOutEPInterrupt>
 80061de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00c      	beq.n	8006204 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f6:	461a      	mov	r2, r3
 80061f8:	2301      	movs	r3, #1
 80061fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80061fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fec2 	bl	8006f88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621a:	461a      	mov	r2, r3
 800621c:	2308      	movs	r3, #8
 800621e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 ff98 	bl	8007158 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f003 0310 	and.w	r3, r3, #16
 800622e:	2b00      	cmp	r3, #0
 8006230:	d008      	beq.n	8006244 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623e:	461a      	mov	r2, r3
 8006240:	2310      	movs	r3, #16
 8006242:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d030      	beq.n	80062b0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006256:	2b80      	cmp	r3, #128	; 0x80
 8006258:	d109      	bne.n	800626e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800626c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800626e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006270:	4613      	mov	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	4413      	add	r3, r2
 8006280:	3304      	adds	r3, #4
 8006282:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	78db      	ldrb	r3, [r3, #3]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d108      	bne.n	800629e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2200      	movs	r2, #0
 8006290:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	b2db      	uxtb	r3, r3
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f006 fe77 	bl	800cf8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062aa:	461a      	mov	r2, r3
 80062ac:	2302      	movs	r3, #2
 80062ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d008      	beq.n	80062cc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c6:	461a      	mov	r2, r3
 80062c8:	2320      	movs	r3, #32
 80062ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d009      	beq.n	80062ea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	461a      	mov	r2, r3
 80062e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	3301      	adds	r3, #1
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f47f af62 	bne.w	80061c2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f004 fa72 	bl	800a7ec <USB_ReadInterrupts>
 8006308:	4603      	mov	r3, r0
 800630a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800630e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006312:	f040 80db 	bne.w	80064cc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f004 fa93 	bl	800a846 <USB_ReadDevAllInEpInterrupt>
 8006320:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006326:	e0cd      	b.n	80064c4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 80c2 	beq.w	80064b8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	4611      	mov	r1, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f004 fab9 	bl	800a8b6 <USB_ReadDevInEPInterrupt>
 8006344:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d057      	beq.n	8006400 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	2201      	movs	r2, #1
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	43db      	mvns	r3, r3
 800636a:	69f9      	ldr	r1, [r7, #28]
 800636c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006370:	4013      	ands	r3, r2
 8006372:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	461a      	mov	r2, r3
 8006382:	2301      	movs	r3, #1
 8006384:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d132      	bne.n	80063f4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006392:	4613      	mov	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	334c      	adds	r3, #76	; 0x4c
 800639e:	6819      	ldr	r1, [r3, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a4:	4613      	mov	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4403      	add	r3, r0
 80063ae:	3348      	adds	r3, #72	; 0x48
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4419      	add	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b8:	4613      	mov	r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4403      	add	r3, r0
 80063c2:	334c      	adds	r3, #76	; 0x4c
 80063c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d113      	bne.n	80063f4 <HAL_PCD_IRQHandler+0x3a2>
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d0:	4613      	mov	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	3354      	adds	r3, #84	; 0x54
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d108      	bne.n	80063f4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063ec:	461a      	mov	r2, r3
 80063ee:	2101      	movs	r1, #1
 80063f0:	f004 fac0 	bl	800a974 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f006 fd41 	bl	800ce82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f003 0308 	and.w	r3, r3, #8
 8006406:	2b00      	cmp	r3, #0
 8006408:	d008      	beq.n	800641c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006416:	461a      	mov	r2, r3
 8006418:	2308      	movs	r3, #8
 800641a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b00      	cmp	r3, #0
 8006424:	d008      	beq.n	8006438 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006432:	461a      	mov	r2, r3
 8006434:	2310      	movs	r3, #16
 8006436:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d008      	beq.n	8006454 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644e:	461a      	mov	r2, r3
 8006450:	2340      	movs	r3, #64	; 0x40
 8006452:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d023      	beq.n	80064a6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800645e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006460:	6a38      	ldr	r0, [r7, #32]
 8006462:	f003 f9a1 	bl	80097a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006468:	4613      	mov	r3, r2
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	4413      	add	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	3338      	adds	r3, #56	; 0x38
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	4413      	add	r3, r2
 8006476:	3304      	adds	r3, #4
 8006478:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	78db      	ldrb	r3, [r3, #3]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d108      	bne.n	8006494 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2200      	movs	r2, #0
 8006486:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	b2db      	uxtb	r3, r3
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f006 fd8e 	bl	800cfb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	461a      	mov	r2, r3
 80064a2:	2302      	movs	r3, #2
 80064a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80064b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fcdb 	bl	8006e6e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	3301      	adds	r3, #1
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f47f af2e 	bne.w	8006328 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f004 f98b 	bl	800a7ec <USB_ReadInterrupts>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064e0:	d122      	bne.n	8006528 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064f0:	f023 0301 	bic.w	r3, r3, #1
 80064f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d108      	bne.n	8006512 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006508:	2100      	movs	r1, #0
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fec2 	bl	8007294 <HAL_PCDEx_LPM_Callback>
 8006510:	e002      	b.n	8006518 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f006 fd2c 	bl	800cf70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695a      	ldr	r2, [r3, #20]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006526:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f004 f95d 	bl	800a7ec <USB_ReadInterrupts>
 8006532:	4603      	mov	r3, r0
 8006534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653c:	d112      	bne.n	8006564 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b01      	cmp	r3, #1
 800654c:	d102      	bne.n	8006554 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f006 fce8 	bl	800cf24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695a      	ldr	r2, [r3, #20]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006562:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f004 f93f 	bl	800a7ec <USB_ReadInterrupts>
 800656e:	4603      	mov	r3, r0
 8006570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006578:	f040 80b7 	bne.w	80066ea <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2110      	movs	r1, #16
 8006596:	4618      	mov	r0, r3
 8006598:	f003 f906 	bl	80097a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800659c:	2300      	movs	r3, #0
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065a0:	e046      	b.n	8006630 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ae:	461a      	mov	r2, r3
 80065b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065c6:	0151      	lsls	r1, r2, #5
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	440a      	add	r2, r1
 80065cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e2:	461a      	mov	r2, r3
 80065e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065fa:	0151      	lsls	r1, r2, #5
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	440a      	add	r2, r1
 8006600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006604:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006608:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800661a:	0151      	lsls	r1, r2, #5
 800661c:	69fa      	ldr	r2, [r7, #28]
 800661e:	440a      	add	r2, r1
 8006620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006624:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006628:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800662a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662c:	3301      	adds	r3, #1
 800662e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006636:	429a      	cmp	r2, r3
 8006638:	d3b3      	bcc.n	80065a2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006648:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800664c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	2b00      	cmp	r3, #0
 8006654:	d016      	beq.n	8006684 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006666:	f043 030b 	orr.w	r3, r3, #11
 800666a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800667c:	f043 030b 	orr.w	r3, r3, #11
 8006680:	6453      	str	r3, [r2, #68]	; 0x44
 8006682:	e015      	b.n	80066b0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006692:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006696:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800669a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066aa:	f043 030b 	orr.w	r3, r3, #11
 80066ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80066d4:	461a      	mov	r2, r3
 80066d6:	f004 f94d 	bl	800a974 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695a      	ldr	r2, [r3, #20]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80066e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f004 f87c 	bl	800a7ec <USB_ReadInterrupts>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066fe:	d124      	bne.n	800674a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f004 f912 	bl	800a92e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f003 f8c7 	bl	80098a2 <USB_GetDevSpeed>
 8006714:	4603      	mov	r3, r0
 8006716:	461a      	mov	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681c      	ldr	r4, [r3, #0]
 8006720:	f001 fa28 	bl	8007b74 <HAL_RCC_GetHCLKFreq>
 8006724:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800672a:	b2db      	uxtb	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	4620      	mov	r0, r4
 8006730:	f002 fdc6 	bl	80092c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f006 fbcc 	bl	800ced2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695a      	ldr	r2, [r3, #20]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006748:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f004 f84c 	bl	800a7ec <USB_ReadInterrupts>
 8006754:	4603      	mov	r3, r0
 8006756:	f003 0308 	and.w	r3, r3, #8
 800675a:	2b08      	cmp	r3, #8
 800675c:	d10a      	bne.n	8006774 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f006 fba9 	bl	800ceb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695a      	ldr	r2, [r3, #20]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f002 0208 	and.w	r2, r2, #8
 8006772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4618      	mov	r0, r3
 800677a:	f004 f837 	bl	800a7ec <USB_ReadInterrupts>
 800677e:	4603      	mov	r3, r0
 8006780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006784:	2b80      	cmp	r3, #128	; 0x80
 8006786:	d122      	bne.n	80067ce <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006794:	2301      	movs	r3, #1
 8006796:	627b      	str	r3, [r7, #36]	; 0x24
 8006798:	e014      	b.n	80067c4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679e:	4613      	mov	r3, r2
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d105      	bne.n	80067be <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fb27 	bl	8006e0c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	3301      	adds	r3, #1
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d3e5      	bcc.n	800679a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f004 f80a 	bl	800a7ec <USB_ReadInterrupts>
 80067d8:	4603      	mov	r3, r0
 80067da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e2:	d13b      	bne.n	800685c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067e4:	2301      	movs	r3, #1
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
 80067e8:	e02b      	b.n	8006842 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fe:	4613      	mov	r3, r2
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	3340      	adds	r3, #64	; 0x40
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d115      	bne.n	800683c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006810:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006812:	2b00      	cmp	r3, #0
 8006814:	da12      	bge.n	800683c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681a:	4613      	mov	r3, r2
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	4413      	add	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	440b      	add	r3, r1
 8006824:	333f      	adds	r3, #63	; 0x3f
 8006826:	2201      	movs	r2, #1
 8006828:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	b2db      	uxtb	r3, r3
 800682e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006832:	b2db      	uxtb	r3, r3
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fae8 	bl	8006e0c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	3301      	adds	r3, #1
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006848:	429a      	cmp	r2, r3
 800684a:	d3ce      	bcc.n	80067ea <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695a      	ldr	r2, [r3, #20]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800685a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	f003 ffc3 	bl	800a7ec <USB_ReadInterrupts>
 8006866:	4603      	mov	r3, r0
 8006868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800686c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006870:	d155      	bne.n	800691e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006872:	2301      	movs	r3, #1
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
 8006876:	e045      	b.n	8006904 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688c:	4613      	mov	r3, r2
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	440b      	add	r3, r1
 8006896:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d12e      	bne.n	80068fe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80068a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	da2b      	bge.n	80068fe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80068b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d121      	bne.n	80068fe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068be:	4613      	mov	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80068cc:	2201      	movs	r2, #1
 80068ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	69fa      	ldr	r2, [r7, #28]
 80068f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068fa:	6053      	str	r3, [r2, #4]
            break;
 80068fc:	e007      	b.n	800690e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	3301      	adds	r3, #1
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	429a      	cmp	r2, r3
 800690c:	d3b4      	bcc.n	8006878 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	695a      	ldr	r2, [r3, #20]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800691c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f003 ff62 	bl	800a7ec <USB_ReadInterrupts>
 8006928:	4603      	mov	r3, r0
 800692a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800692e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006932:	d10a      	bne.n	800694a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f006 fb4d 	bl	800cfd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695a      	ldr	r2, [r3, #20]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f003 ff4c 	bl	800a7ec <USB_ReadInterrupts>
 8006954:	4603      	mov	r3, r0
 8006956:	f003 0304 	and.w	r3, r3, #4
 800695a:	2b04      	cmp	r3, #4
 800695c:	d115      	bne.n	800698a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f006 fb3d 	bl	800cff0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6859      	ldr	r1, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	e000      	b.n	800698a <HAL_PCD_IRQHandler+0x938>
      return;
 8006988:	bf00      	nop
    }
  }
}
 800698a:	3734      	adds	r7, #52	; 0x34
 800698c:	46bd      	mov	sp, r7
 800698e:	bd90      	pop	{r4, r7, pc}

08006990 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <HAL_PCD_SetAddress+0x1a>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e013      	b.n	80069d2 <HAL_PCD_SetAddress+0x42>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	78fa      	ldrb	r2, [r7, #3]
 80069b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	78fa      	ldrb	r2, [r7, #3]
 80069c0:	4611      	mov	r1, r2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f003 feaa 	bl	800a71c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	4608      	mov	r0, r1
 80069e4:	4611      	mov	r1, r2
 80069e6:	461a      	mov	r2, r3
 80069e8:	4603      	mov	r3, r0
 80069ea:	70fb      	strb	r3, [r7, #3]
 80069ec:	460b      	mov	r3, r1
 80069ee:	803b      	strh	r3, [r7, #0]
 80069f0:	4613      	mov	r3, r2
 80069f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	da0f      	bge.n	8006a20 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	f003 020f 	and.w	r2, r3, #15
 8006a06:	4613      	mov	r3, r2
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	3338      	adds	r3, #56	; 0x38
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	4413      	add	r3, r2
 8006a14:	3304      	adds	r3, #4
 8006a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	705a      	strb	r2, [r3, #1]
 8006a1e:	e00f      	b.n	8006a40 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	f003 020f 	and.w	r2, r3, #15
 8006a26:	4613      	mov	r3, r2
 8006a28:	00db      	lsls	r3, r3, #3
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	4413      	add	r3, r2
 8006a36:	3304      	adds	r3, #4
 8006a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006a4c:	883a      	ldrh	r2, [r7, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	78ba      	ldrb	r2, [r7, #2]
 8006a56:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	785b      	ldrb	r3, [r3, #1]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d004      	beq.n	8006a6a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a6a:	78bb      	ldrb	r3, [r7, #2]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d102      	bne.n	8006a76 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_PCD_EP_Open+0xaa>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e00e      	b.n	8006aa2 <HAL_PCD_EP_Open+0xc8>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68f9      	ldr	r1, [r7, #12]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f002 ff2a 	bl	80098ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006aa0:	7afb      	ldrb	r3, [r7, #11]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	da0f      	bge.n	8006ade <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006abe:	78fb      	ldrb	r3, [r7, #3]
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	3338      	adds	r3, #56	; 0x38
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	705a      	strb	r2, [r3, #1]
 8006adc:	e00f      	b.n	8006afe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	f003 020f 	and.w	r2, r3, #15
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	4413      	add	r3, r2
 8006af4:	3304      	adds	r3, #4
 8006af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006afe:	78fb      	ldrb	r3, [r7, #3]
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_PCD_EP_Close+0x6e>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e00e      	b.n	8006b36 <HAL_PCD_EP_Close+0x8c>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68f9      	ldr	r1, [r7, #12]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f002 ff68 	bl	80099fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b086      	sub	sp, #24
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b4e:	7afb      	ldrb	r3, [r7, #11]
 8006b50:	f003 020f 	and.w	r2, r3, #15
 8006b54:	4613      	mov	r3, r2
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	3304      	adds	r3, #4
 8006b66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	2200      	movs	r2, #0
 8006b78:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b80:	7afb      	ldrb	r3, [r7, #11]
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d102      	bne.n	8006b9a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b9a:	7afb      	ldrb	r3, [r7, #11]
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d109      	bne.n	8006bb8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6818      	ldr	r0, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6979      	ldr	r1, [r7, #20]
 8006bb2:	f003 fa47 	bl	800a044 <USB_EP0StartXfer>
 8006bb6:	e008      	b.n	8006bca <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6818      	ldr	r0, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6979      	ldr	r1, [r7, #20]
 8006bc6:	f002 fff5 	bl	8009bb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	f003 020f 	and.w	r2, r3, #15
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	4613      	mov	r3, r2
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	4413      	add	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	440b      	add	r3, r1
 8006bf2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006bf6:	681b      	ldr	r3, [r3, #0]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	603b      	str	r3, [r7, #0]
 8006c10:	460b      	mov	r3, r1
 8006c12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c14:	7afb      	ldrb	r3, [r7, #11]
 8006c16:	f003 020f 	and.w	r2, r3, #15
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	3338      	adds	r3, #56	; 0x38
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	3304      	adds	r3, #4
 8006c2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2201      	movs	r2, #1
 8006c42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c44:	7afb      	ldrb	r3, [r7, #11]
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d102      	bne.n	8006c5e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c5e:	7afb      	ldrb	r3, [r7, #11]
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d109      	bne.n	8006c7c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6818      	ldr	r0, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	6979      	ldr	r1, [r7, #20]
 8006c76:	f003 f9e5 	bl	800a044 <USB_EP0StartXfer>
 8006c7a:	e008      	b.n	8006c8e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	6979      	ldr	r1, [r7, #20]
 8006c8a:	f002 ff93 	bl	8009bb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	f003 020f 	and.w	r2, r3, #15
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d901      	bls.n	8006cb6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e050      	b.n	8006d58 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006cb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	da0f      	bge.n	8006cde <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cbe:	78fb      	ldrb	r3, [r7, #3]
 8006cc0:	f003 020f 	and.w	r2, r3, #15
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	4413      	add	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	3338      	adds	r3, #56	; 0x38
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	705a      	strb	r2, [r3, #1]
 8006cdc:	e00d      	b.n	8006cfa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006cde:	78fa      	ldrb	r2, [r7, #3]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	4413      	add	r3, r2
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d101      	bne.n	8006d1a <HAL_PCD_EP_SetStall+0x82>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e01e      	b.n	8006d58 <HAL_PCD_EP_SetStall+0xc0>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68f9      	ldr	r1, [r7, #12]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f003 fc23 	bl	800a574 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	b2d9      	uxtb	r1, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f003 fe13 	bl	800a974 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	f003 020f 	and.w	r2, r3, #15
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d901      	bls.n	8006d7e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e042      	b.n	8006e04 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	da0f      	bge.n	8006da6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	f003 020f 	and.w	r2, r3, #15
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	3338      	adds	r3, #56	; 0x38
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	4413      	add	r3, r2
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	705a      	strb	r2, [r3, #1]
 8006da4:	e00f      	b.n	8006dc6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006da6:	78fb      	ldrb	r3, [r7, #3]
 8006da8:	f003 020f 	and.w	r2, r3, #15
 8006dac:	4613      	mov	r3, r2
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	4413      	add	r3, r2
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006dcc:	78fb      	ldrb	r3, [r7, #3]
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d101      	bne.n	8006de6 <HAL_PCD_EP_ClrStall+0x86>
 8006de2:	2302      	movs	r3, #2
 8006de4:	e00e      	b.n	8006e04 <HAL_PCD_EP_ClrStall+0xa4>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68f9      	ldr	r1, [r7, #12]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f003 fc2b 	bl	800a650 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	da0c      	bge.n	8006e3a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	f003 020f 	and.w	r2, r3, #15
 8006e26:	4613      	mov	r3, r2
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	3338      	adds	r3, #56	; 0x38
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	4413      	add	r3, r2
 8006e34:	3304      	adds	r3, #4
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	e00c      	b.n	8006e54 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	f003 020f 	and.w	r2, r3, #15
 8006e40:	4613      	mov	r3, r2
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	4413      	add	r3, r2
 8006e50:	3304      	adds	r3, #4
 8006e52:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68f9      	ldr	r1, [r7, #12]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f003 fa4a 	bl	800a2f4 <USB_EPStopXfer>
 8006e60:	4603      	mov	r3, r0
 8006e62:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006e64:	7afb      	ldrb	r3, [r7, #11]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b08a      	sub	sp, #40	; 0x28
 8006e72:	af02      	add	r7, sp, #8
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	3338      	adds	r3, #56	; 0x38
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	4413      	add	r3, r2
 8006e92:	3304      	adds	r3, #4
 8006e94:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a1a      	ldr	r2, [r3, #32]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d901      	bls.n	8006ea6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e06c      	b.n	8006f80 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	699a      	ldr	r2, [r3, #24]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d902      	bls.n	8006ec2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	3303      	adds	r3, #3
 8006ec6:	089b      	lsrs	r3, r3, #2
 8006ec8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006eca:	e02b      	b.n	8006f24 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	699a      	ldr	r2, [r3, #24]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	69fa      	ldr	r2, [r7, #28]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d902      	bls.n	8006ee8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	3303      	adds	r3, #3
 8006eec:	089b      	lsrs	r3, r3, #2
 8006eee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6919      	ldr	r1, [r3, #16]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	4603      	mov	r3, r0
 8006f06:	6978      	ldr	r0, [r7, #20]
 8006f08:	f003 fa9e 	bl	800a448 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	691a      	ldr	r2, [r3, #16]
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	441a      	add	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a1a      	ldr	r2, [r3, #32]
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	441a      	add	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d809      	bhi.n	8006f4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a1a      	ldr	r2, [r3, #32]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d203      	bcs.n	8006f4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1be      	bne.n	8006ecc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	699a      	ldr	r2, [r3, #24]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d811      	bhi.n	8006f7e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	2201      	movs	r2, #1
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	43db      	mvns	r3, r3
 8006f74:	6939      	ldr	r1, [r7, #16]
 8006f76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3720      	adds	r7, #32
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	333c      	adds	r3, #60	; 0x3c
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d17b      	bne.n	80070b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f003 0308 	and.w	r3, r3, #8
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d015      	beq.n	8006ff4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	4a61      	ldr	r2, [pc, #388]	; (8007150 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	f240 80b9 	bls.w	8007144 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 80b3 	beq.w	8007144 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fea:	461a      	mov	r2, r3
 8006fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ff0:	6093      	str	r3, [r2, #8]
 8006ff2:	e0a7      	b.n	8007144 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d009      	beq.n	8007012 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700a:	461a      	mov	r2, r3
 800700c:	2320      	movs	r3, #32
 800700e:	6093      	str	r3, [r2, #8]
 8007010:	e098      	b.n	8007144 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007018:	2b00      	cmp	r3, #0
 800701a:	f040 8093 	bne.w	8007144 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	4a4b      	ldr	r2, [pc, #300]	; (8007150 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d90f      	bls.n	8007046 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703c:	461a      	mov	r2, r3
 800703e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007042:	6093      	str	r3, [r2, #8]
 8007044:	e07e      	b.n	8007144 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	4613      	mov	r3, r2
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4413      	add	r3, r2
 8007058:	3304      	adds	r3, #4
 800705a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	0159      	lsls	r1, r3, #5
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	440b      	add	r3, r1
 8007068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007072:	1ad2      	subs	r2, r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d114      	bne.n	80070a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d109      	bne.n	800709a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007090:	461a      	mov	r2, r3
 8007092:	2101      	movs	r1, #1
 8007094:	f003 fc6e 	bl	800a974 <USB_EP0_OutStart>
 8007098:	e006      	b.n	80070a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	691a      	ldr	r2, [r3, #16]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	441a      	add	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f005 fecc 	bl	800ce4c <HAL_PCD_DataOutStageCallback>
 80070b4:	e046      	b.n	8007144 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	4a26      	ldr	r2, [pc, #152]	; (8007154 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d124      	bne.n	8007108 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00a      	beq.n	80070de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d4:	461a      	mov	r2, r3
 80070d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070da:	6093      	str	r3, [r2, #8]
 80070dc:	e032      	b.n	8007144 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f003 0320 	and.w	r3, r3, #32
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d008      	beq.n	80070fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f4:	461a      	mov	r2, r3
 80070f6:	2320      	movs	r3, #32
 80070f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f005 fea3 	bl	800ce4c <HAL_PCD_DataOutStageCallback>
 8007106:	e01d      	b.n	8007144 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d114      	bne.n	8007138 <PCD_EP_OutXfrComplete_int+0x1b0>
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	4613      	mov	r3, r2
 8007114:	00db      	lsls	r3, r3, #3
 8007116:	4413      	add	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	440b      	add	r3, r1
 800711c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d108      	bne.n	8007138 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007130:	461a      	mov	r2, r3
 8007132:	2100      	movs	r1, #0
 8007134:	f003 fc1e 	bl	800a974 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f005 fe84 	bl	800ce4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3720      	adds	r7, #32
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	4f54300a 	.word	0x4f54300a
 8007154:	4f54310a 	.word	0x4f54310a

08007158 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	333c      	adds	r3, #60	; 0x3c
 8007170:	3304      	adds	r3, #4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4a15      	ldr	r2, [pc, #84]	; (80071e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d90e      	bls.n	80071ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007194:	2b00      	cmp	r3, #0
 8007196:	d009      	beq.n	80071ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a4:	461a      	mov	r2, r3
 80071a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f005 fe3b 	bl	800ce28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4a0a      	ldr	r2, [pc, #40]	; (80071e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d90c      	bls.n	80071d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d108      	bne.n	80071d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6818      	ldr	r0, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80071cc:	461a      	mov	r2, r3
 80071ce:	2101      	movs	r1, #1
 80071d0:	f003 fbd0 	bl	800a974 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	4f54300a 	.word	0x4f54300a

080071e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
 80071f0:	4613      	mov	r3, r2
 80071f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d107      	bne.n	8007212 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007202:	883b      	ldrh	r3, [r7, #0]
 8007204:	0419      	lsls	r1, r3, #16
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	430a      	orrs	r2, r1
 800720e:	629a      	str	r2, [r3, #40]	; 0x28
 8007210:	e028      	b.n	8007264 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	4413      	add	r3, r2
 800721e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007220:	2300      	movs	r3, #0
 8007222:	73fb      	strb	r3, [r7, #15]
 8007224:	e00d      	b.n	8007242 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	3340      	adds	r3, #64	; 0x40
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	0c1b      	lsrs	r3, r3, #16
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	4413      	add	r3, r2
 800723a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	3301      	adds	r3, #1
 8007240:	73fb      	strb	r3, [r7, #15]
 8007242:	7bfa      	ldrb	r2, [r7, #15]
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	3b01      	subs	r3, #1
 8007248:	429a      	cmp	r2, r3
 800724a:	d3ec      	bcc.n	8007226 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800724c:	883b      	ldrh	r3, [r7, #0]
 800724e:	0418      	lsls	r0, r3, #16
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6819      	ldr	r1, [r3, #0]
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	3b01      	subs	r3, #1
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	4302      	orrs	r2, r0
 800725c:	3340      	adds	r3, #64	; 0x40
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	440b      	add	r3, r1
 8007262:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	887a      	ldrh	r2, [r7, #2]
 8007284:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e267      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d075      	beq.n	80073b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072ca:	4b88      	ldr	r3, [pc, #544]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 030c 	and.w	r3, r3, #12
 80072d2:	2b04      	cmp	r3, #4
 80072d4:	d00c      	beq.n	80072f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072d6:	4b85      	ldr	r3, [pc, #532]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072de:	2b08      	cmp	r3, #8
 80072e0:	d112      	bne.n	8007308 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072e2:	4b82      	ldr	r3, [pc, #520]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072ee:	d10b      	bne.n	8007308 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f0:	4b7e      	ldr	r3, [pc, #504]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d05b      	beq.n	80073b4 <HAL_RCC_OscConfig+0x108>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d157      	bne.n	80073b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e242      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007310:	d106      	bne.n	8007320 <HAL_RCC_OscConfig+0x74>
 8007312:	4b76      	ldr	r3, [pc, #472]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a75      	ldr	r2, [pc, #468]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	e01d      	b.n	800735c <HAL_RCC_OscConfig+0xb0>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007328:	d10c      	bne.n	8007344 <HAL_RCC_OscConfig+0x98>
 800732a:	4b70      	ldr	r3, [pc, #448]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a6f      	ldr	r2, [pc, #444]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	4b6d      	ldr	r3, [pc, #436]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a6c      	ldr	r2, [pc, #432]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 800733c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	e00b      	b.n	800735c <HAL_RCC_OscConfig+0xb0>
 8007344:	4b69      	ldr	r3, [pc, #420]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a68      	ldr	r2, [pc, #416]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 800734a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	4b66      	ldr	r3, [pc, #408]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a65      	ldr	r2, [pc, #404]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800735a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d013      	beq.n	800738c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007364:	f7fb ffec 	bl	8003340 <HAL_GetTick>
 8007368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800736c:	f7fb ffe8 	bl	8003340 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b64      	cmp	r3, #100	; 0x64
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e207      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800737e:	4b5b      	ldr	r3, [pc, #364]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d0f0      	beq.n	800736c <HAL_RCC_OscConfig+0xc0>
 800738a:	e014      	b.n	80073b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800738c:	f7fb ffd8 	bl	8003340 <HAL_GetTick>
 8007390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007394:	f7fb ffd4 	bl	8003340 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b64      	cmp	r3, #100	; 0x64
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e1f3      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073a6:	4b51      	ldr	r3, [pc, #324]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f0      	bne.n	8007394 <HAL_RCC_OscConfig+0xe8>
 80073b2:	e000      	b.n	80073b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d063      	beq.n	800748a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073c2:	4b4a      	ldr	r3, [pc, #296]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 030c 	and.w	r3, r3, #12
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00b      	beq.n	80073e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073ce:	4b47      	ldr	r3, [pc, #284]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d11c      	bne.n	8007414 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073da:	4b44      	ldr	r3, [pc, #272]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d116      	bne.n	8007414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073e6:	4b41      	ldr	r3, [pc, #260]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d005      	beq.n	80073fe <HAL_RCC_OscConfig+0x152>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d001      	beq.n	80073fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e1c7      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073fe:	4b3b      	ldr	r3, [pc, #236]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	4937      	ldr	r1, [pc, #220]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 800740e:	4313      	orrs	r3, r2
 8007410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007412:	e03a      	b.n	800748a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d020      	beq.n	800745e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800741c:	4b34      	ldr	r3, [pc, #208]	; (80074f0 <HAL_RCC_OscConfig+0x244>)
 800741e:	2201      	movs	r2, #1
 8007420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007422:	f7fb ff8d 	bl	8003340 <HAL_GetTick>
 8007426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007428:	e008      	b.n	800743c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800742a:	f7fb ff89 	bl	8003340 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e1a8      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800743c:	4b2b      	ldr	r3, [pc, #172]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0f0      	beq.n	800742a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007448:	4b28      	ldr	r3, [pc, #160]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	4925      	ldr	r1, [pc, #148]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007458:	4313      	orrs	r3, r2
 800745a:	600b      	str	r3, [r1, #0]
 800745c:	e015      	b.n	800748a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800745e:	4b24      	ldr	r3, [pc, #144]	; (80074f0 <HAL_RCC_OscConfig+0x244>)
 8007460:	2200      	movs	r2, #0
 8007462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007464:	f7fb ff6c 	bl	8003340 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800746c:	f7fb ff68 	bl	8003340 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e187      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800747e:	4b1b      	ldr	r3, [pc, #108]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f0      	bne.n	800746c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0308 	and.w	r3, r3, #8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d036      	beq.n	8007504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d016      	beq.n	80074cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800749e:	4b15      	ldr	r3, [pc, #84]	; (80074f4 <HAL_RCC_OscConfig+0x248>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a4:	f7fb ff4c 	bl	8003340 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074ac:	f7fb ff48 	bl	8003340 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e167      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074be:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <HAL_RCC_OscConfig+0x240>)
 80074c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0f0      	beq.n	80074ac <HAL_RCC_OscConfig+0x200>
 80074ca:	e01b      	b.n	8007504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074cc:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <HAL_RCC_OscConfig+0x248>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074d2:	f7fb ff35 	bl	8003340 <HAL_GetTick>
 80074d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074d8:	e00e      	b.n	80074f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074da:	f7fb ff31 	bl	8003340 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d907      	bls.n	80074f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e150      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
 80074ec:	40023800 	.word	0x40023800
 80074f0:	42470000 	.word	0x42470000
 80074f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074f8:	4b88      	ldr	r3, [pc, #544]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80074fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1ea      	bne.n	80074da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 8097 	beq.w	8007640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007512:	2300      	movs	r3, #0
 8007514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007516:	4b81      	ldr	r3, [pc, #516]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10f      	bne.n	8007542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007522:	2300      	movs	r3, #0
 8007524:	60bb      	str	r3, [r7, #8]
 8007526:	4b7d      	ldr	r3, [pc, #500]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	4a7c      	ldr	r2, [pc, #496]	; (800771c <HAL_RCC_OscConfig+0x470>)
 800752c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007530:	6413      	str	r3, [r2, #64]	; 0x40
 8007532:	4b7a      	ldr	r3, [pc, #488]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800753a:	60bb      	str	r3, [r7, #8]
 800753c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800753e:	2301      	movs	r3, #1
 8007540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007542:	4b77      	ldr	r3, [pc, #476]	; (8007720 <HAL_RCC_OscConfig+0x474>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800754a:	2b00      	cmp	r3, #0
 800754c:	d118      	bne.n	8007580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800754e:	4b74      	ldr	r3, [pc, #464]	; (8007720 <HAL_RCC_OscConfig+0x474>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a73      	ldr	r2, [pc, #460]	; (8007720 <HAL_RCC_OscConfig+0x474>)
 8007554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800755a:	f7fb fef1 	bl	8003340 <HAL_GetTick>
 800755e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007560:	e008      	b.n	8007574 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007562:	f7fb feed 	bl	8003340 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d901      	bls.n	8007574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e10c      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007574:	4b6a      	ldr	r3, [pc, #424]	; (8007720 <HAL_RCC_OscConfig+0x474>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0f0      	beq.n	8007562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d106      	bne.n	8007596 <HAL_RCC_OscConfig+0x2ea>
 8007588:	4b64      	ldr	r3, [pc, #400]	; (800771c <HAL_RCC_OscConfig+0x470>)
 800758a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758c:	4a63      	ldr	r2, [pc, #396]	; (800771c <HAL_RCC_OscConfig+0x470>)
 800758e:	f043 0301 	orr.w	r3, r3, #1
 8007592:	6713      	str	r3, [r2, #112]	; 0x70
 8007594:	e01c      	b.n	80075d0 <HAL_RCC_OscConfig+0x324>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	2b05      	cmp	r3, #5
 800759c:	d10c      	bne.n	80075b8 <HAL_RCC_OscConfig+0x30c>
 800759e:	4b5f      	ldr	r3, [pc, #380]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a2:	4a5e      	ldr	r2, [pc, #376]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075a4:	f043 0304 	orr.w	r3, r3, #4
 80075a8:	6713      	str	r3, [r2, #112]	; 0x70
 80075aa:	4b5c      	ldr	r3, [pc, #368]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ae:	4a5b      	ldr	r2, [pc, #364]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	6713      	str	r3, [r2, #112]	; 0x70
 80075b6:	e00b      	b.n	80075d0 <HAL_RCC_OscConfig+0x324>
 80075b8:	4b58      	ldr	r3, [pc, #352]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075bc:	4a57      	ldr	r2, [pc, #348]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075be:	f023 0301 	bic.w	r3, r3, #1
 80075c2:	6713      	str	r3, [r2, #112]	; 0x70
 80075c4:	4b55      	ldr	r3, [pc, #340]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c8:	4a54      	ldr	r2, [pc, #336]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075ca:	f023 0304 	bic.w	r3, r3, #4
 80075ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d015      	beq.n	8007604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d8:	f7fb feb2 	bl	8003340 <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075de:	e00a      	b.n	80075f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075e0:	f7fb feae 	bl	8003340 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e0cb      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075f6:	4b49      	ldr	r3, [pc, #292]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80075f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0ee      	beq.n	80075e0 <HAL_RCC_OscConfig+0x334>
 8007602:	e014      	b.n	800762e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007604:	f7fb fe9c 	bl	8003340 <HAL_GetTick>
 8007608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800760a:	e00a      	b.n	8007622 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800760c:	f7fb fe98 	bl	8003340 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	f241 3288 	movw	r2, #5000	; 0x1388
 800761a:	4293      	cmp	r3, r2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e0b5      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007622:	4b3e      	ldr	r3, [pc, #248]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1ee      	bne.n	800760c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800762e:	7dfb      	ldrb	r3, [r7, #23]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d105      	bne.n	8007640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007634:	4b39      	ldr	r3, [pc, #228]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	4a38      	ldr	r2, [pc, #224]	; (800771c <HAL_RCC_OscConfig+0x470>)
 800763a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800763e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 80a1 	beq.w	800778c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800764a:	4b34      	ldr	r3, [pc, #208]	; (800771c <HAL_RCC_OscConfig+0x470>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f003 030c 	and.w	r3, r3, #12
 8007652:	2b08      	cmp	r3, #8
 8007654:	d05c      	beq.n	8007710 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d141      	bne.n	80076e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800765e:	4b31      	ldr	r3, [pc, #196]	; (8007724 <HAL_RCC_OscConfig+0x478>)
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007664:	f7fb fe6c 	bl	8003340 <HAL_GetTick>
 8007668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800766a:	e008      	b.n	800767e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800766c:	f7fb fe68 	bl	8003340 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e087      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800767e:	4b27      	ldr	r3, [pc, #156]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f0      	bne.n	800766c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	69da      	ldr	r2, [r3, #28]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	431a      	orrs	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	019b      	lsls	r3, r3, #6
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a0:	085b      	lsrs	r3, r3, #1
 80076a2:	3b01      	subs	r3, #1
 80076a4:	041b      	lsls	r3, r3, #16
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	061b      	lsls	r3, r3, #24
 80076ae:	491b      	ldr	r1, [pc, #108]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076b4:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <HAL_RCC_OscConfig+0x478>)
 80076b6:	2201      	movs	r2, #1
 80076b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ba:	f7fb fe41 	bl	8003340 <HAL_GetTick>
 80076be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076c0:	e008      	b.n	80076d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076c2:	f7fb fe3d 	bl	8003340 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d901      	bls.n	80076d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e05c      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076d4:	4b11      	ldr	r3, [pc, #68]	; (800771c <HAL_RCC_OscConfig+0x470>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0f0      	beq.n	80076c2 <HAL_RCC_OscConfig+0x416>
 80076e0:	e054      	b.n	800778c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076e2:	4b10      	ldr	r3, [pc, #64]	; (8007724 <HAL_RCC_OscConfig+0x478>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e8:	f7fb fe2a 	bl	8003340 <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076f0:	f7fb fe26 	bl	8003340 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e045      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007702:	4b06      	ldr	r3, [pc, #24]	; (800771c <HAL_RCC_OscConfig+0x470>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1f0      	bne.n	80076f0 <HAL_RCC_OscConfig+0x444>
 800770e:	e03d      	b.n	800778c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d107      	bne.n	8007728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e038      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
 800771c:	40023800 	.word	0x40023800
 8007720:	40007000 	.word	0x40007000
 8007724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007728:	4b1b      	ldr	r3, [pc, #108]	; (8007798 <HAL_RCC_OscConfig+0x4ec>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d028      	beq.n	8007788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007740:	429a      	cmp	r2, r3
 8007742:	d121      	bne.n	8007788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800774e:	429a      	cmp	r2, r3
 8007750:	d11a      	bne.n	8007788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007758:	4013      	ands	r3, r2
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800775e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007760:	4293      	cmp	r3, r2
 8007762:	d111      	bne.n	8007788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	085b      	lsrs	r3, r3, #1
 8007770:	3b01      	subs	r3, #1
 8007772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007774:	429a      	cmp	r2, r3
 8007776:	d107      	bne.n	8007788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007784:	429a      	cmp	r2, r3
 8007786:	d001      	beq.n	800778c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e000      	b.n	800778e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	40023800 	.word	0x40023800

0800779c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e0cc      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077b0:	4b68      	ldr	r3, [pc, #416]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d90c      	bls.n	80077d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077be:	4b65      	ldr	r3, [pc, #404]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077c6:	4b63      	ldr	r3, [pc, #396]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0307 	and.w	r3, r3, #7
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d001      	beq.n	80077d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e0b8      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d020      	beq.n	8007826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077f0:	4b59      	ldr	r3, [pc, #356]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	4a58      	ldr	r2, [pc, #352]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80077f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80077fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b00      	cmp	r3, #0
 8007806:	d005      	beq.n	8007814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007808:	4b53      	ldr	r3, [pc, #332]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	4a52      	ldr	r2, [pc, #328]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800780e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007814:	4b50      	ldr	r3, [pc, #320]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	494d      	ldr	r1, [pc, #308]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 8007822:	4313      	orrs	r3, r2
 8007824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d044      	beq.n	80078bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d107      	bne.n	800784a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800783a:	4b47      	ldr	r3, [pc, #284]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d119      	bne.n	800787a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e07f      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d003      	beq.n	800785a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007856:	2b03      	cmp	r3, #3
 8007858:	d107      	bne.n	800786a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800785a:	4b3f      	ldr	r3, [pc, #252]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d109      	bne.n	800787a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e06f      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800786a:	4b3b      	ldr	r3, [pc, #236]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e067      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800787a:	4b37      	ldr	r3, [pc, #220]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f023 0203 	bic.w	r2, r3, #3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	4934      	ldr	r1, [pc, #208]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 8007888:	4313      	orrs	r3, r2
 800788a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800788c:	f7fb fd58 	bl	8003340 <HAL_GetTick>
 8007890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007892:	e00a      	b.n	80078aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007894:	f7fb fd54 	bl	8003340 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e04f      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078aa:	4b2b      	ldr	r3, [pc, #172]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 020c 	and.w	r2, r3, #12
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d1eb      	bne.n	8007894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078bc:	4b25      	ldr	r3, [pc, #148]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d20c      	bcs.n	80078e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ca:	4b22      	ldr	r3, [pc, #136]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078d2:	4b20      	ldr	r3, [pc, #128]	; (8007954 <HAL_RCC_ClockConfig+0x1b8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d001      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e032      	b.n	800794a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d008      	beq.n	8007902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078f0:	4b19      	ldr	r3, [pc, #100]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	4916      	ldr	r1, [pc, #88]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800790e:	4b12      	ldr	r3, [pc, #72]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	490e      	ldr	r1, [pc, #56]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800791e:	4313      	orrs	r3, r2
 8007920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007922:	f000 f821 	bl	8007968 <HAL_RCC_GetSysClockFreq>
 8007926:	4602      	mov	r2, r0
 8007928:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <HAL_RCC_ClockConfig+0x1bc>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	091b      	lsrs	r3, r3, #4
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	490a      	ldr	r1, [pc, #40]	; (800795c <HAL_RCC_ClockConfig+0x1c0>)
 8007934:	5ccb      	ldrb	r3, [r1, r3]
 8007936:	fa22 f303 	lsr.w	r3, r2, r3
 800793a:	4a09      	ldr	r2, [pc, #36]	; (8007960 <HAL_RCC_ClockConfig+0x1c4>)
 800793c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800793e:	4b09      	ldr	r3, [pc, #36]	; (8007964 <HAL_RCC_ClockConfig+0x1c8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f7fb fcb8 	bl	80032b8 <HAL_InitTick>

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	40023c00 	.word	0x40023c00
 8007958:	40023800 	.word	0x40023800
 800795c:	08010414 	.word	0x08010414
 8007960:	20000018 	.word	0x20000018
 8007964:	2000001c 	.word	0x2000001c

08007968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800796c:	b094      	sub	sp, #80	; 0x50
 800796e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	647b      	str	r3, [r7, #68]	; 0x44
 8007974:	2300      	movs	r3, #0
 8007976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007978:	2300      	movs	r3, #0
 800797a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007980:	4b79      	ldr	r3, [pc, #484]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 030c 	and.w	r3, r3, #12
 8007988:	2b08      	cmp	r3, #8
 800798a:	d00d      	beq.n	80079a8 <HAL_RCC_GetSysClockFreq+0x40>
 800798c:	2b08      	cmp	r3, #8
 800798e:	f200 80e1 	bhi.w	8007b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <HAL_RCC_GetSysClockFreq+0x34>
 8007996:	2b04      	cmp	r3, #4
 8007998:	d003      	beq.n	80079a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800799a:	e0db      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800799c:	4b73      	ldr	r3, [pc, #460]	; (8007b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800799e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80079a0:	e0db      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079a2:	4b73      	ldr	r3, [pc, #460]	; (8007b70 <HAL_RCC_GetSysClockFreq+0x208>)
 80079a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079a6:	e0d8      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079a8:	4b6f      	ldr	r3, [pc, #444]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079b2:	4b6d      	ldr	r3, [pc, #436]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d063      	beq.n	8007a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079be:	4b6a      	ldr	r3, [pc, #424]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	099b      	lsrs	r3, r3, #6
 80079c4:	2200      	movs	r2, #0
 80079c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80079c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d0:	633b      	str	r3, [r7, #48]	; 0x30
 80079d2:	2300      	movs	r3, #0
 80079d4:	637b      	str	r3, [r7, #52]	; 0x34
 80079d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80079da:	4622      	mov	r2, r4
 80079dc:	462b      	mov	r3, r5
 80079de:	f04f 0000 	mov.w	r0, #0
 80079e2:	f04f 0100 	mov.w	r1, #0
 80079e6:	0159      	lsls	r1, r3, #5
 80079e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079ec:	0150      	lsls	r0, r2, #5
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4621      	mov	r1, r4
 80079f4:	1a51      	subs	r1, r2, r1
 80079f6:	6139      	str	r1, [r7, #16]
 80079f8:	4629      	mov	r1, r5
 80079fa:	eb63 0301 	sbc.w	r3, r3, r1
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	f04f 0200 	mov.w	r2, #0
 8007a04:	f04f 0300 	mov.w	r3, #0
 8007a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a0c:	4659      	mov	r1, fp
 8007a0e:	018b      	lsls	r3, r1, #6
 8007a10:	4651      	mov	r1, sl
 8007a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a16:	4651      	mov	r1, sl
 8007a18:	018a      	lsls	r2, r1, #6
 8007a1a:	4651      	mov	r1, sl
 8007a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8007a20:	4659      	mov	r1, fp
 8007a22:	eb63 0901 	sbc.w	r9, r3, r1
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	f04f 0300 	mov.w	r3, #0
 8007a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a3a:	4690      	mov	r8, r2
 8007a3c:	4699      	mov	r9, r3
 8007a3e:	4623      	mov	r3, r4
 8007a40:	eb18 0303 	adds.w	r3, r8, r3
 8007a44:	60bb      	str	r3, [r7, #8]
 8007a46:	462b      	mov	r3, r5
 8007a48:	eb49 0303 	adc.w	r3, r9, r3
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	f04f 0200 	mov.w	r2, #0
 8007a52:	f04f 0300 	mov.w	r3, #0
 8007a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	024b      	lsls	r3, r1, #9
 8007a5e:	4621      	mov	r1, r4
 8007a60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a64:	4621      	mov	r1, r4
 8007a66:	024a      	lsls	r2, r1, #9
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a6e:	2200      	movs	r2, #0
 8007a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a78:	f7f9 f8e6 	bl	8000c48 <__aeabi_uldivmod>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4613      	mov	r3, r2
 8007a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a84:	e058      	b.n	8007b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a86:	4b38      	ldr	r3, [pc, #224]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	099b      	lsrs	r3, r3, #6
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	4618      	mov	r0, r3
 8007a90:	4611      	mov	r1, r2
 8007a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a96:	623b      	str	r3, [r7, #32]
 8007a98:	2300      	movs	r3, #0
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007aa0:	4642      	mov	r2, r8
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	f04f 0000 	mov.w	r0, #0
 8007aa8:	f04f 0100 	mov.w	r1, #0
 8007aac:	0159      	lsls	r1, r3, #5
 8007aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ab2:	0150      	lsls	r0, r2, #5
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	4641      	mov	r1, r8
 8007aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8007abe:	4649      	mov	r1, r9
 8007ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8007adc:	eb63 050b 	sbc.w	r5, r3, fp
 8007ae0:	f04f 0200 	mov.w	r2, #0
 8007ae4:	f04f 0300 	mov.w	r3, #0
 8007ae8:	00eb      	lsls	r3, r5, #3
 8007aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007aee:	00e2      	lsls	r2, r4, #3
 8007af0:	4614      	mov	r4, r2
 8007af2:	461d      	mov	r5, r3
 8007af4:	4643      	mov	r3, r8
 8007af6:	18e3      	adds	r3, r4, r3
 8007af8:	603b      	str	r3, [r7, #0]
 8007afa:	464b      	mov	r3, r9
 8007afc:	eb45 0303 	adc.w	r3, r5, r3
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b0e:	4629      	mov	r1, r5
 8007b10:	028b      	lsls	r3, r1, #10
 8007b12:	4621      	mov	r1, r4
 8007b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b18:	4621      	mov	r1, r4
 8007b1a:	028a      	lsls	r2, r1, #10
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b22:	2200      	movs	r2, #0
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	61fa      	str	r2, [r7, #28]
 8007b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b2c:	f7f9 f88c 	bl	8000c48 <__aeabi_uldivmod>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4613      	mov	r3, r2
 8007b36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b38:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	0c1b      	lsrs	r3, r3, #16
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	3301      	adds	r3, #1
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b52:	e002      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b54:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8007b56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3750      	adds	r7, #80	; 0x50
 8007b60:	46bd      	mov	sp, r7
 8007b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b66:	bf00      	nop
 8007b68:	40023800 	.word	0x40023800
 8007b6c:	00f42400 	.word	0x00f42400
 8007b70:	007a1200 	.word	0x007a1200

08007b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b78:	4b03      	ldr	r3, [pc, #12]	; (8007b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	20000018 	.word	0x20000018

08007b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b90:	f7ff fff0 	bl	8007b74 <HAL_RCC_GetHCLKFreq>
 8007b94:	4602      	mov	r2, r0
 8007b96:	4b05      	ldr	r3, [pc, #20]	; (8007bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	0a9b      	lsrs	r3, r3, #10
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	4903      	ldr	r1, [pc, #12]	; (8007bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ba2:	5ccb      	ldrb	r3, [r1, r3]
 8007ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	08010424 	.word	0x08010424

08007bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007bb8:	f7ff ffdc 	bl	8007b74 <HAL_RCC_GetHCLKFreq>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	0b5b      	lsrs	r3, r3, #13
 8007bc4:	f003 0307 	and.w	r3, r3, #7
 8007bc8:	4903      	ldr	r1, [pc, #12]	; (8007bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bca:	5ccb      	ldrb	r3, [r1, r3]
 8007bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	08010424 	.word	0x08010424

08007bdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e041      	b.n	8007c72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d106      	bne.n	8007c08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7fb f87e 	bl	8002d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3304      	adds	r3, #4
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f000 fc26 	bl	800846c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d109      	bne.n	8007ca0 <HAL_TIM_PWM_Start+0x24>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	bf14      	ite	ne
 8007c98:	2301      	movne	r3, #1
 8007c9a:	2300      	moveq	r3, #0
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	e022      	b.n	8007ce6 <HAL_TIM_PWM_Start+0x6a>
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	d109      	bne.n	8007cba <HAL_TIM_PWM_Start+0x3e>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	bf14      	ite	ne
 8007cb2:	2301      	movne	r3, #1
 8007cb4:	2300      	moveq	r3, #0
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	e015      	b.n	8007ce6 <HAL_TIM_PWM_Start+0x6a>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d109      	bne.n	8007cd4 <HAL_TIM_PWM_Start+0x58>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	bf14      	ite	ne
 8007ccc:	2301      	movne	r3, #1
 8007cce:	2300      	moveq	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	e008      	b.n	8007ce6 <HAL_TIM_PWM_Start+0x6a>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	bf14      	ite	ne
 8007ce0:	2301      	movne	r3, #1
 8007ce2:	2300      	moveq	r3, #0
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e07c      	b.n	8007de8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d104      	bne.n	8007cfe <HAL_TIM_PWM_Start+0x82>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cfc:	e013      	b.n	8007d26 <HAL_TIM_PWM_Start+0xaa>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	d104      	bne.n	8007d0e <HAL_TIM_PWM_Start+0x92>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d0c:	e00b      	b.n	8007d26 <HAL_TIM_PWM_Start+0xaa>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b08      	cmp	r3, #8
 8007d12:	d104      	bne.n	8007d1e <HAL_TIM_PWM_Start+0xa2>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2202      	movs	r2, #2
 8007d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d1c:	e003      	b.n	8007d26 <HAL_TIM_PWM_Start+0xaa>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2202      	movs	r2, #2
 8007d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 fdec 	bl	800890c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a2d      	ldr	r2, [pc, #180]	; (8007df0 <HAL_TIM_PWM_Start+0x174>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d004      	beq.n	8007d48 <HAL_TIM_PWM_Start+0xcc>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a2c      	ldr	r2, [pc, #176]	; (8007df4 <HAL_TIM_PWM_Start+0x178>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d101      	bne.n	8007d4c <HAL_TIM_PWM_Start+0xd0>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e000      	b.n	8007d4e <HAL_TIM_PWM_Start+0xd2>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d007      	beq.n	8007d62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a22      	ldr	r2, [pc, #136]	; (8007df0 <HAL_TIM_PWM_Start+0x174>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d022      	beq.n	8007db2 <HAL_TIM_PWM_Start+0x136>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d74:	d01d      	beq.n	8007db2 <HAL_TIM_PWM_Start+0x136>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a1f      	ldr	r2, [pc, #124]	; (8007df8 <HAL_TIM_PWM_Start+0x17c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d018      	beq.n	8007db2 <HAL_TIM_PWM_Start+0x136>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a1d      	ldr	r2, [pc, #116]	; (8007dfc <HAL_TIM_PWM_Start+0x180>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <HAL_TIM_PWM_Start+0x136>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1c      	ldr	r2, [pc, #112]	; (8007e00 <HAL_TIM_PWM_Start+0x184>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00e      	beq.n	8007db2 <HAL_TIM_PWM_Start+0x136>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a16      	ldr	r2, [pc, #88]	; (8007df4 <HAL_TIM_PWM_Start+0x178>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d009      	beq.n	8007db2 <HAL_TIM_PWM_Start+0x136>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a18      	ldr	r2, [pc, #96]	; (8007e04 <HAL_TIM_PWM_Start+0x188>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d004      	beq.n	8007db2 <HAL_TIM_PWM_Start+0x136>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a16      	ldr	r2, [pc, #88]	; (8007e08 <HAL_TIM_PWM_Start+0x18c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d111      	bne.n	8007dd6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b06      	cmp	r3, #6
 8007dc2:	d010      	beq.n	8007de6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0201 	orr.w	r2, r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd4:	e007      	b.n	8007de6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f042 0201 	orr.w	r2, r2, #1
 8007de4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40010000 	.word	0x40010000
 8007df4:	40010400 	.word	0x40010400
 8007df8:	40000400 	.word	0x40000400
 8007dfc:	40000800 	.word	0x40000800
 8007e00:	40000c00 	.word	0x40000c00
 8007e04:	40014000 	.word	0x40014000
 8007e08:	40001800 	.word	0x40001800

08007e0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e097      	b.n	8007f50 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d106      	bne.n	8007e3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fa fedf 	bl	8002bf8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e50:	f023 0307 	bic.w	r3, r3, #7
 8007e54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	4619      	mov	r1, r3
 8007e60:	4610      	mov	r0, r2
 8007e62:	f000 fb03 	bl	800846c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e8e:	f023 0303 	bic.w	r3, r3, #3
 8007e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007eac:	f023 030c 	bic.w	r3, r3, #12
 8007eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007eb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	011a      	lsls	r2, r3, #4
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	031b      	lsls	r3, r3, #12
 8007edc:	4313      	orrs	r3, r2
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007eea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007ef2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	011b      	lsls	r3, r3, #4
 8007efe:	4313      	orrs	r3, r2
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d110      	bne.n	8007faa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d102      	bne.n	8007f94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f8e:	7b7b      	ldrb	r3, [r7, #13]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d001      	beq.n	8007f98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e069      	b.n	800806c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fa8:	e031      	b.n	800800e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d110      	bne.n	8007fd2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d102      	bne.n	8007fbc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fb6:	7b3b      	ldrb	r3, [r7, #12]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d001      	beq.n	8007fc0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e055      	b.n	800806c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fd0:	e01d      	b.n	800800e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d108      	bne.n	8007fea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d105      	bne.n	8007fea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fde:	7b7b      	ldrb	r3, [r7, #13]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d102      	bne.n	8007fea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fe4:	7b3b      	ldrb	r3, [r7, #12]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d001      	beq.n	8007fee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e03e      	b.n	800806c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2202      	movs	r2, #2
 8008002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2202      	movs	r2, #2
 800800a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <HAL_TIM_Encoder_Start+0xc4>
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2b04      	cmp	r3, #4
 8008018:	d008      	beq.n	800802c <HAL_TIM_Encoder_Start+0xd4>
 800801a:	e00f      	b.n	800803c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2201      	movs	r2, #1
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f000 fc71 	bl	800890c <TIM_CCxChannelCmd>
      break;
 800802a:	e016      	b.n	800805a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2201      	movs	r2, #1
 8008032:	2104      	movs	r1, #4
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fc69 	bl	800890c <TIM_CCxChannelCmd>
      break;
 800803a:	e00e      	b.n	800805a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2201      	movs	r2, #1
 8008042:	2100      	movs	r1, #0
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fc61 	bl	800890c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2201      	movs	r2, #1
 8008050:	2104      	movs	r1, #4
 8008052:	4618      	mov	r0, r3
 8008054:	f000 fc5a 	bl	800890c <TIM_CCxChannelCmd>
      break;
 8008058:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f042 0201 	orr.w	r2, r2, #1
 8008068:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b02      	cmp	r3, #2
 8008088:	d122      	bne.n	80080d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b02      	cmp	r3, #2
 8008096:	d11b      	bne.n	80080d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f06f 0202 	mvn.w	r2, #2
 80080a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	f003 0303 	and.w	r3, r3, #3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f9ba 	bl	8008430 <HAL_TIM_IC_CaptureCallback>
 80080bc:	e005      	b.n	80080ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f9ac 	bl	800841c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f9bd 	bl	8008444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d122      	bne.n	8008124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b04      	cmp	r3, #4
 80080ea:	d11b      	bne.n	8008124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f06f 0204 	mvn.w	r2, #4
 80080f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2202      	movs	r2, #2
 80080fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f990 	bl	8008430 <HAL_TIM_IC_CaptureCallback>
 8008110:	e005      	b.n	800811e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f982 	bl	800841c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f993 	bl	8008444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0308 	and.w	r3, r3, #8
 800812e:	2b08      	cmp	r3, #8
 8008130:	d122      	bne.n	8008178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f003 0308 	and.w	r3, r3, #8
 800813c:	2b08      	cmp	r3, #8
 800813e:	d11b      	bne.n	8008178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0208 	mvn.w	r2, #8
 8008148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2204      	movs	r2, #4
 800814e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f966 	bl	8008430 <HAL_TIM_IC_CaptureCallback>
 8008164:	e005      	b.n	8008172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f958 	bl	800841c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f969 	bl	8008444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f003 0310 	and.w	r3, r3, #16
 8008182:	2b10      	cmp	r3, #16
 8008184:	d122      	bne.n	80081cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0310 	and.w	r3, r3, #16
 8008190:	2b10      	cmp	r3, #16
 8008192:	d11b      	bne.n	80081cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0210 	mvn.w	r2, #16
 800819c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2208      	movs	r2, #8
 80081a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f93c 	bl	8008430 <HAL_TIM_IC_CaptureCallback>
 80081b8:	e005      	b.n	80081c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f92e 	bl	800841c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f93f 	bl	8008444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d10e      	bne.n	80081f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d107      	bne.n	80081f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f06f 0201 	mvn.w	r2, #1
 80081f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f908 	bl	8008408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008202:	2b80      	cmp	r3, #128	; 0x80
 8008204:	d10e      	bne.n	8008224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008210:	2b80      	cmp	r3, #128	; 0x80
 8008212:	d107      	bne.n	8008224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800821c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fc20 	bl	8008a64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822e:	2b40      	cmp	r3, #64	; 0x40
 8008230:	d10e      	bne.n	8008250 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823c:	2b40      	cmp	r3, #64	; 0x40
 800823e:	d107      	bne.n	8008250 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f904 	bl	8008458 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b20      	cmp	r3, #32
 800825c:	d10e      	bne.n	800827c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f003 0320 	and.w	r3, r3, #32
 8008268:	2b20      	cmp	r3, #32
 800826a:	d107      	bne.n	800827c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f06f 0220 	mvn.w	r2, #32
 8008274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fbea 	bl	8008a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800829a:	2b01      	cmp	r3, #1
 800829c:	d101      	bne.n	80082a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800829e:	2302      	movs	r3, #2
 80082a0:	e0ae      	b.n	8008400 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b0c      	cmp	r3, #12
 80082ae:	f200 809f 	bhi.w	80083f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082b2:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b8:	080082ed 	.word	0x080082ed
 80082bc:	080083f1 	.word	0x080083f1
 80082c0:	080083f1 	.word	0x080083f1
 80082c4:	080083f1 	.word	0x080083f1
 80082c8:	0800832d 	.word	0x0800832d
 80082cc:	080083f1 	.word	0x080083f1
 80082d0:	080083f1 	.word	0x080083f1
 80082d4:	080083f1 	.word	0x080083f1
 80082d8:	0800836f 	.word	0x0800836f
 80082dc:	080083f1 	.word	0x080083f1
 80082e0:	080083f1 	.word	0x080083f1
 80082e4:	080083f1 	.word	0x080083f1
 80082e8:	080083af 	.word	0x080083af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68b9      	ldr	r1, [r7, #8]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 f95a 	bl	80085ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699a      	ldr	r2, [r3, #24]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f042 0208 	orr.w	r2, r2, #8
 8008306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699a      	ldr	r2, [r3, #24]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 0204 	bic.w	r2, r2, #4
 8008316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6999      	ldr	r1, [r3, #24]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	691a      	ldr	r2, [r3, #16]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	619a      	str	r2, [r3, #24]
      break;
 800832a:	e064      	b.n	80083f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68b9      	ldr	r1, [r7, #8]
 8008332:	4618      	mov	r0, r3
 8008334:	f000 f9aa 	bl	800868c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	699a      	ldr	r2, [r3, #24]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699a      	ldr	r2, [r3, #24]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6999      	ldr	r1, [r3, #24]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	021a      	lsls	r2, r3, #8
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	430a      	orrs	r2, r1
 800836a:	619a      	str	r2, [r3, #24]
      break;
 800836c:	e043      	b.n	80083f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68b9      	ldr	r1, [r7, #8]
 8008374:	4618      	mov	r0, r3
 8008376:	f000 f9ff 	bl	8008778 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69da      	ldr	r2, [r3, #28]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f042 0208 	orr.w	r2, r2, #8
 8008388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	69da      	ldr	r2, [r3, #28]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0204 	bic.w	r2, r2, #4
 8008398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	69d9      	ldr	r1, [r3, #28]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	691a      	ldr	r2, [r3, #16]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	430a      	orrs	r2, r1
 80083aa:	61da      	str	r2, [r3, #28]
      break;
 80083ac:	e023      	b.n	80083f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68b9      	ldr	r1, [r7, #8]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fa53 	bl	8008860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	69da      	ldr	r2, [r3, #28]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69da      	ldr	r2, [r3, #28]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69d9      	ldr	r1, [r3, #28]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	021a      	lsls	r2, r3, #8
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	61da      	str	r2, [r3, #28]
      break;
 80083ee:	e002      	b.n	80083f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	75fb      	strb	r3, [r7, #23]
      break;
 80083f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a40      	ldr	r2, [pc, #256]	; (8008580 <TIM_Base_SetConfig+0x114>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d013      	beq.n	80084ac <TIM_Base_SetConfig+0x40>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800848a:	d00f      	beq.n	80084ac <TIM_Base_SetConfig+0x40>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a3d      	ldr	r2, [pc, #244]	; (8008584 <TIM_Base_SetConfig+0x118>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d00b      	beq.n	80084ac <TIM_Base_SetConfig+0x40>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a3c      	ldr	r2, [pc, #240]	; (8008588 <TIM_Base_SetConfig+0x11c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d007      	beq.n	80084ac <TIM_Base_SetConfig+0x40>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a3b      	ldr	r2, [pc, #236]	; (800858c <TIM_Base_SetConfig+0x120>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d003      	beq.n	80084ac <TIM_Base_SetConfig+0x40>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a3a      	ldr	r2, [pc, #232]	; (8008590 <TIM_Base_SetConfig+0x124>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d108      	bne.n	80084be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a2f      	ldr	r2, [pc, #188]	; (8008580 <TIM_Base_SetConfig+0x114>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d02b      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084cc:	d027      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a2c      	ldr	r2, [pc, #176]	; (8008584 <TIM_Base_SetConfig+0x118>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d023      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a2b      	ldr	r2, [pc, #172]	; (8008588 <TIM_Base_SetConfig+0x11c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d01f      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a2a      	ldr	r2, [pc, #168]	; (800858c <TIM_Base_SetConfig+0x120>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d01b      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a29      	ldr	r2, [pc, #164]	; (8008590 <TIM_Base_SetConfig+0x124>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d017      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a28      	ldr	r2, [pc, #160]	; (8008594 <TIM_Base_SetConfig+0x128>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d013      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a27      	ldr	r2, [pc, #156]	; (8008598 <TIM_Base_SetConfig+0x12c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00f      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a26      	ldr	r2, [pc, #152]	; (800859c <TIM_Base_SetConfig+0x130>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d00b      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a25      	ldr	r2, [pc, #148]	; (80085a0 <TIM_Base_SetConfig+0x134>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d007      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a24      	ldr	r2, [pc, #144]	; (80085a4 <TIM_Base_SetConfig+0x138>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d003      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a23      	ldr	r2, [pc, #140]	; (80085a8 <TIM_Base_SetConfig+0x13c>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d108      	bne.n	8008530 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	4313      	orrs	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a0a      	ldr	r2, [pc, #40]	; (8008580 <TIM_Base_SetConfig+0x114>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d003      	beq.n	8008564 <TIM_Base_SetConfig+0xf8>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a0c      	ldr	r2, [pc, #48]	; (8008590 <TIM_Base_SetConfig+0x124>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d103      	bne.n	800856c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	691a      	ldr	r2, [r3, #16]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	615a      	str	r2, [r3, #20]
}
 8008572:	bf00      	nop
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	40010000 	.word	0x40010000
 8008584:	40000400 	.word	0x40000400
 8008588:	40000800 	.word	0x40000800
 800858c:	40000c00 	.word	0x40000c00
 8008590:	40010400 	.word	0x40010400
 8008594:	40014000 	.word	0x40014000
 8008598:	40014400 	.word	0x40014400
 800859c:	40014800 	.word	0x40014800
 80085a0:	40001800 	.word	0x40001800
 80085a4:	40001c00 	.word	0x40001c00
 80085a8:	40002000 	.word	0x40002000

080085ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	f023 0201 	bic.w	r2, r3, #1
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f023 0303 	bic.w	r3, r3, #3
 80085e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f023 0302 	bic.w	r3, r3, #2
 80085f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a20      	ldr	r2, [pc, #128]	; (8008684 <TIM_OC1_SetConfig+0xd8>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d003      	beq.n	8008610 <TIM_OC1_SetConfig+0x64>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a1f      	ldr	r2, [pc, #124]	; (8008688 <TIM_OC1_SetConfig+0xdc>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d10c      	bne.n	800862a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	f023 0308 	bic.w	r3, r3, #8
 8008616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	4313      	orrs	r3, r2
 8008620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f023 0304 	bic.w	r3, r3, #4
 8008628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a15      	ldr	r2, [pc, #84]	; (8008684 <TIM_OC1_SetConfig+0xd8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d003      	beq.n	800863a <TIM_OC1_SetConfig+0x8e>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a14      	ldr	r2, [pc, #80]	; (8008688 <TIM_OC1_SetConfig+0xdc>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d111      	bne.n	800865e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	4313      	orrs	r3, r2
 8008652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	4313      	orrs	r3, r2
 800865c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685a      	ldr	r2, [r3, #4]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	697a      	ldr	r2, [r7, #20]
 8008676:	621a      	str	r2, [r3, #32]
}
 8008678:	bf00      	nop
 800867a:	371c      	adds	r7, #28
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	40010000 	.word	0x40010000
 8008688:	40010400 	.word	0x40010400

0800868c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	f023 0210 	bic.w	r2, r3, #16
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	021b      	lsls	r3, r3, #8
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f023 0320 	bic.w	r3, r3, #32
 80086d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	011b      	lsls	r3, r3, #4
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a22      	ldr	r2, [pc, #136]	; (8008770 <TIM_OC2_SetConfig+0xe4>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d003      	beq.n	80086f4 <TIM_OC2_SetConfig+0x68>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a21      	ldr	r2, [pc, #132]	; (8008774 <TIM_OC2_SetConfig+0xe8>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d10d      	bne.n	8008710 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	011b      	lsls	r3, r3, #4
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	4313      	orrs	r3, r2
 8008706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800870e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a17      	ldr	r2, [pc, #92]	; (8008770 <TIM_OC2_SetConfig+0xe4>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d003      	beq.n	8008720 <TIM_OC2_SetConfig+0x94>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a16      	ldr	r2, [pc, #88]	; (8008774 <TIM_OC2_SetConfig+0xe8>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d113      	bne.n	8008748 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800872e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	4313      	orrs	r3, r2
 800873a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	4313      	orrs	r3, r2
 8008746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	621a      	str	r2, [r3, #32]
}
 8008762:	bf00      	nop
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	40010000 	.word	0x40010000
 8008774:	40010400 	.word	0x40010400

08008778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0303 	bic.w	r3, r3, #3
 80087ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	021b      	lsls	r3, r3, #8
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a21      	ldr	r2, [pc, #132]	; (8008858 <TIM_OC3_SetConfig+0xe0>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d003      	beq.n	80087de <TIM_OC3_SetConfig+0x66>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a20      	ldr	r2, [pc, #128]	; (800885c <TIM_OC3_SetConfig+0xe4>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d10d      	bne.n	80087fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	021b      	lsls	r3, r3, #8
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a16      	ldr	r2, [pc, #88]	; (8008858 <TIM_OC3_SetConfig+0xe0>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d003      	beq.n	800880a <TIM_OC3_SetConfig+0x92>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a15      	ldr	r2, [pc, #84]	; (800885c <TIM_OC3_SetConfig+0xe4>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d113      	bne.n	8008832 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	4313      	orrs	r3, r2
 8008824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	011b      	lsls	r3, r3, #4
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	4313      	orrs	r3, r2
 8008830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	621a      	str	r2, [r3, #32]
}
 800884c:	bf00      	nop
 800884e:	371c      	adds	r7, #28
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	40010000 	.word	0x40010000
 800885c:	40010400 	.word	0x40010400

08008860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008860:	b480      	push	{r7}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800888e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	021b      	lsls	r3, r3, #8
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	031b      	lsls	r3, r3, #12
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a12      	ldr	r2, [pc, #72]	; (8008904 <TIM_OC4_SetConfig+0xa4>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d003      	beq.n	80088c8 <TIM_OC4_SetConfig+0x68>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a11      	ldr	r2, [pc, #68]	; (8008908 <TIM_OC4_SetConfig+0xa8>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d109      	bne.n	80088dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	019b      	lsls	r3, r3, #6
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	4313      	orrs	r3, r2
 80088da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	621a      	str	r2, [r3, #32]
}
 80088f6:	bf00      	nop
 80088f8:	371c      	adds	r7, #28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	40010000 	.word	0x40010000
 8008908:	40010400 	.word	0x40010400

0800890c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800890c:	b480      	push	{r7}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	f003 031f 	and.w	r3, r3, #31
 800891e:	2201      	movs	r2, #1
 8008920:	fa02 f303 	lsl.w	r3, r2, r3
 8008924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6a1a      	ldr	r2, [r3, #32]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	43db      	mvns	r3, r3
 800892e:	401a      	ands	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a1a      	ldr	r2, [r3, #32]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	f003 031f 	and.w	r3, r3, #31
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	fa01 f303 	lsl.w	r3, r1, r3
 8008944:	431a      	orrs	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	621a      	str	r2, [r3, #32]
}
 800894a:	bf00      	nop
 800894c:	371c      	adds	r7, #28
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
	...

08008958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008968:	2b01      	cmp	r3, #1
 800896a:	d101      	bne.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800896c:	2302      	movs	r3, #2
 800896e:	e05a      	b.n	8008a26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	4313      	orrs	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a21      	ldr	r2, [pc, #132]	; (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d022      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089bc:	d01d      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a1d      	ldr	r2, [pc, #116]	; (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d018      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a1b      	ldr	r2, [pc, #108]	; (8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d013      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a1a      	ldr	r2, [pc, #104]	; (8008a40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d00e      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a18      	ldr	r2, [pc, #96]	; (8008a44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d009      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a17      	ldr	r2, [pc, #92]	; (8008a48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d004      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a15      	ldr	r2, [pc, #84]	; (8008a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d10c      	bne.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	40010000 	.word	0x40010000
 8008a38:	40000400 	.word	0x40000400
 8008a3c:	40000800 	.word	0x40000800
 8008a40:	40000c00 	.word	0x40000c00
 8008a44:	40010400 	.word	0x40010400
 8008a48:	40014000 	.word	0x40014000
 8008a4c:	40001800 	.word	0x40001800

08008a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e03f      	b.n	8008b0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d106      	bne.n	8008aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7fa f98c 	bl	8002dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2224      	movs	r2, #36	; 0x24
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f929 	bl	8008d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	691a      	ldr	r2, [r3, #16]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	695a      	ldr	r2, [r3, #20]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2220      	movs	r2, #32
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2220      	movs	r2, #32
 8008b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b08a      	sub	sp, #40	; 0x28
 8008b16:	af02      	add	r7, sp, #8
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	603b      	str	r3, [r7, #0]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	d17c      	bne.n	8008c2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <HAL_UART_Transmit+0x2c>
 8008b38:	88fb      	ldrh	r3, [r7, #6]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e075      	b.n	8008c2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <HAL_UART_Transmit+0x3e>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	e06e      	b.n	8008c2e <HAL_UART_Transmit+0x11c>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2221      	movs	r2, #33	; 0x21
 8008b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b66:	f7fa fbeb 	bl	8003340 <HAL_GetTick>
 8008b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	88fa      	ldrh	r2, [r7, #6]
 8008b70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	88fa      	ldrh	r2, [r7, #6]
 8008b76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b80:	d108      	bne.n	8008b94 <HAL_UART_Transmit+0x82>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d104      	bne.n	8008b94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	61bb      	str	r3, [r7, #24]
 8008b92:	e003      	b.n	8008b9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008ba4:	e02a      	b.n	8008bfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2200      	movs	r2, #0
 8008bae:	2180      	movs	r1, #128	; 0x80
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 f840 	bl	8008c36 <UART_WaitOnFlagUntilTimeout>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e036      	b.n	8008c2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10b      	bne.n	8008bde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	3302      	adds	r3, #2
 8008bda:	61bb      	str	r3, [r7, #24]
 8008bdc:	e007      	b.n	8008bee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	781a      	ldrb	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	3301      	adds	r3, #1
 8008bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1cf      	bne.n	8008ba6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2140      	movs	r1, #64	; 0x40
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 f810 	bl	8008c36 <UART_WaitOnFlagUntilTimeout>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e006      	b.n	8008c2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2220      	movs	r2, #32
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e000      	b.n	8008c2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c2c:	2302      	movs	r3, #2
  }
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3720      	adds	r7, #32
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b090      	sub	sp, #64	; 0x40
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	603b      	str	r3, [r7, #0]
 8008c42:	4613      	mov	r3, r2
 8008c44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c46:	e050      	b.n	8008cea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4e:	d04c      	beq.n	8008cea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d007      	beq.n	8008c66 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c56:	f7fa fb73 	bl	8003340 <HAL_GetTick>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d241      	bcs.n	8008cea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	330c      	adds	r3, #12
 8008c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	330c      	adds	r3, #12
 8008c84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c86:	637a      	str	r2, [r7, #52]	; 0x34
 8008c88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c8e:	e841 2300 	strex	r3, r2, [r1]
 8008c92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1e5      	bne.n	8008c66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3314      	adds	r3, #20
 8008ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	e853 3f00 	ldrex	r3, [r3]
 8008ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f023 0301 	bic.w	r3, r3, #1
 8008cb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3314      	adds	r3, #20
 8008cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cba:	623a      	str	r2, [r7, #32]
 8008cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	69f9      	ldr	r1, [r7, #28]
 8008cc0:	6a3a      	ldr	r2, [r7, #32]
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e5      	bne.n	8008c9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e00f      	b.n	8008d0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	bf0c      	ite	eq
 8008cfa:	2301      	moveq	r3, #1
 8008cfc:	2300      	movne	r3, #0
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	461a      	mov	r2, r3
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d09f      	beq.n	8008c48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3740      	adds	r7, #64	; 0x40
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d18:	b0c0      	sub	sp, #256	; 0x100
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d30:	68d9      	ldr	r1, [r3, #12]
 8008d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	ea40 0301 	orr.w	r3, r0, r1
 8008d3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	431a      	orrs	r2, r3
 8008d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d6c:	f021 010c 	bic.w	r1, r1, #12
 8008d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d7a:	430b      	orrs	r3, r1
 8008d7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d8e:	6999      	ldr	r1, [r3, #24]
 8008d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	ea40 0301 	orr.w	r3, r0, r1
 8008d9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	4b8f      	ldr	r3, [pc, #572]	; (8008fe0 <UART_SetConfig+0x2cc>)
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d005      	beq.n	8008db4 <UART_SetConfig+0xa0>
 8008da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	4b8d      	ldr	r3, [pc, #564]	; (8008fe4 <UART_SetConfig+0x2d0>)
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d104      	bne.n	8008dbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008db4:	f7fe fefe 	bl	8007bb4 <HAL_RCC_GetPCLK2Freq>
 8008db8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008dbc:	e003      	b.n	8008dc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dbe:	f7fe fee5 	bl	8007b8c <HAL_RCC_GetPCLK1Freq>
 8008dc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dca:	69db      	ldr	r3, [r3, #28]
 8008dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dd0:	f040 810c 	bne.w	8008fec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008dde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008de2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008de6:	4622      	mov	r2, r4
 8008de8:	462b      	mov	r3, r5
 8008dea:	1891      	adds	r1, r2, r2
 8008dec:	65b9      	str	r1, [r7, #88]	; 0x58
 8008dee:	415b      	adcs	r3, r3
 8008df0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008df2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008df6:	4621      	mov	r1, r4
 8008df8:	eb12 0801 	adds.w	r8, r2, r1
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	eb43 0901 	adc.w	r9, r3, r1
 8008e02:	f04f 0200 	mov.w	r2, #0
 8008e06:	f04f 0300 	mov.w	r3, #0
 8008e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e16:	4690      	mov	r8, r2
 8008e18:	4699      	mov	r9, r3
 8008e1a:	4623      	mov	r3, r4
 8008e1c:	eb18 0303 	adds.w	r3, r8, r3
 8008e20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e24:	462b      	mov	r3, r5
 8008e26:	eb49 0303 	adc.w	r3, r9, r3
 8008e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008e3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e42:	460b      	mov	r3, r1
 8008e44:	18db      	adds	r3, r3, r3
 8008e46:	653b      	str	r3, [r7, #80]	; 0x50
 8008e48:	4613      	mov	r3, r2
 8008e4a:	eb42 0303 	adc.w	r3, r2, r3
 8008e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8008e50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008e58:	f7f7 fef6 	bl	8000c48 <__aeabi_uldivmod>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4b61      	ldr	r3, [pc, #388]	; (8008fe8 <UART_SetConfig+0x2d4>)
 8008e62:	fba3 2302 	umull	r2, r3, r3, r2
 8008e66:	095b      	lsrs	r3, r3, #5
 8008e68:	011c      	lsls	r4, r3, #4
 8008e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e7c:	4642      	mov	r2, r8
 8008e7e:	464b      	mov	r3, r9
 8008e80:	1891      	adds	r1, r2, r2
 8008e82:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e84:	415b      	adcs	r3, r3
 8008e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e8c:	4641      	mov	r1, r8
 8008e8e:	eb12 0a01 	adds.w	sl, r2, r1
 8008e92:	4649      	mov	r1, r9
 8008e94:	eb43 0b01 	adc.w	fp, r3, r1
 8008e98:	f04f 0200 	mov.w	r2, #0
 8008e9c:	f04f 0300 	mov.w	r3, #0
 8008ea0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ea4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008eac:	4692      	mov	sl, r2
 8008eae:	469b      	mov	fp, r3
 8008eb0:	4643      	mov	r3, r8
 8008eb2:	eb1a 0303 	adds.w	r3, sl, r3
 8008eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008eba:	464b      	mov	r3, r9
 8008ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8008ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ed0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ed4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	18db      	adds	r3, r3, r3
 8008edc:	643b      	str	r3, [r7, #64]	; 0x40
 8008ede:	4613      	mov	r3, r2
 8008ee0:	eb42 0303 	adc.w	r3, r2, r3
 8008ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ee6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008eea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008eee:	f7f7 feab 	bl	8000c48 <__aeabi_uldivmod>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	4b3b      	ldr	r3, [pc, #236]	; (8008fe8 <UART_SetConfig+0x2d4>)
 8008efa:	fba3 2301 	umull	r2, r3, r3, r1
 8008efe:	095b      	lsrs	r3, r3, #5
 8008f00:	2264      	movs	r2, #100	; 0x64
 8008f02:	fb02 f303 	mul.w	r3, r2, r3
 8008f06:	1acb      	subs	r3, r1, r3
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f0e:	4b36      	ldr	r3, [pc, #216]	; (8008fe8 <UART_SetConfig+0x2d4>)
 8008f10:	fba3 2302 	umull	r2, r3, r3, r2
 8008f14:	095b      	lsrs	r3, r3, #5
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f1c:	441c      	add	r4, r3
 8008f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f30:	4642      	mov	r2, r8
 8008f32:	464b      	mov	r3, r9
 8008f34:	1891      	adds	r1, r2, r2
 8008f36:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f38:	415b      	adcs	r3, r3
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f40:	4641      	mov	r1, r8
 8008f42:	1851      	adds	r1, r2, r1
 8008f44:	6339      	str	r1, [r7, #48]	; 0x30
 8008f46:	4649      	mov	r1, r9
 8008f48:	414b      	adcs	r3, r1
 8008f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f4c:	f04f 0200 	mov.w	r2, #0
 8008f50:	f04f 0300 	mov.w	r3, #0
 8008f54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008f58:	4659      	mov	r1, fp
 8008f5a:	00cb      	lsls	r3, r1, #3
 8008f5c:	4651      	mov	r1, sl
 8008f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f62:	4651      	mov	r1, sl
 8008f64:	00ca      	lsls	r2, r1, #3
 8008f66:	4610      	mov	r0, r2
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	4642      	mov	r2, r8
 8008f6e:	189b      	adds	r3, r3, r2
 8008f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f74:	464b      	mov	r3, r9
 8008f76:	460a      	mov	r2, r1
 8008f78:	eb42 0303 	adc.w	r3, r2, r3
 8008f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f94:	460b      	mov	r3, r1
 8008f96:	18db      	adds	r3, r3, r3
 8008f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	eb42 0303 	adc.w	r3, r2, r3
 8008fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008fa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008faa:	f7f7 fe4d 	bl	8000c48 <__aeabi_uldivmod>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4b0d      	ldr	r3, [pc, #52]	; (8008fe8 <UART_SetConfig+0x2d4>)
 8008fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8008fb8:	095b      	lsrs	r3, r3, #5
 8008fba:	2164      	movs	r1, #100	; 0x64
 8008fbc:	fb01 f303 	mul.w	r3, r1, r3
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	3332      	adds	r3, #50	; 0x32
 8008fc6:	4a08      	ldr	r2, [pc, #32]	; (8008fe8 <UART_SetConfig+0x2d4>)
 8008fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fcc:	095b      	lsrs	r3, r3, #5
 8008fce:	f003 0207 	and.w	r2, r3, #7
 8008fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4422      	add	r2, r4
 8008fda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008fdc:	e105      	b.n	80091ea <UART_SetConfig+0x4d6>
 8008fde:	bf00      	nop
 8008fe0:	40011000 	.word	0x40011000
 8008fe4:	40011400 	.word	0x40011400
 8008fe8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ff6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ffa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ffe:	4642      	mov	r2, r8
 8009000:	464b      	mov	r3, r9
 8009002:	1891      	adds	r1, r2, r2
 8009004:	6239      	str	r1, [r7, #32]
 8009006:	415b      	adcs	r3, r3
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
 800900a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800900e:	4641      	mov	r1, r8
 8009010:	1854      	adds	r4, r2, r1
 8009012:	4649      	mov	r1, r9
 8009014:	eb43 0501 	adc.w	r5, r3, r1
 8009018:	f04f 0200 	mov.w	r2, #0
 800901c:	f04f 0300 	mov.w	r3, #0
 8009020:	00eb      	lsls	r3, r5, #3
 8009022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009026:	00e2      	lsls	r2, r4, #3
 8009028:	4614      	mov	r4, r2
 800902a:	461d      	mov	r5, r3
 800902c:	4643      	mov	r3, r8
 800902e:	18e3      	adds	r3, r4, r3
 8009030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009034:	464b      	mov	r3, r9
 8009036:	eb45 0303 	adc.w	r3, r5, r3
 800903a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800903e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800904a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800904e:	f04f 0200 	mov.w	r2, #0
 8009052:	f04f 0300 	mov.w	r3, #0
 8009056:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800905a:	4629      	mov	r1, r5
 800905c:	008b      	lsls	r3, r1, #2
 800905e:	4621      	mov	r1, r4
 8009060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009064:	4621      	mov	r1, r4
 8009066:	008a      	lsls	r2, r1, #2
 8009068:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800906c:	f7f7 fdec 	bl	8000c48 <__aeabi_uldivmod>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	4b60      	ldr	r3, [pc, #384]	; (80091f8 <UART_SetConfig+0x4e4>)
 8009076:	fba3 2302 	umull	r2, r3, r3, r2
 800907a:	095b      	lsrs	r3, r3, #5
 800907c:	011c      	lsls	r4, r3, #4
 800907e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009082:	2200      	movs	r2, #0
 8009084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009088:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800908c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009090:	4642      	mov	r2, r8
 8009092:	464b      	mov	r3, r9
 8009094:	1891      	adds	r1, r2, r2
 8009096:	61b9      	str	r1, [r7, #24]
 8009098:	415b      	adcs	r3, r3
 800909a:	61fb      	str	r3, [r7, #28]
 800909c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090a0:	4641      	mov	r1, r8
 80090a2:	1851      	adds	r1, r2, r1
 80090a4:	6139      	str	r1, [r7, #16]
 80090a6:	4649      	mov	r1, r9
 80090a8:	414b      	adcs	r3, r1
 80090aa:	617b      	str	r3, [r7, #20]
 80090ac:	f04f 0200 	mov.w	r2, #0
 80090b0:	f04f 0300 	mov.w	r3, #0
 80090b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090b8:	4659      	mov	r1, fp
 80090ba:	00cb      	lsls	r3, r1, #3
 80090bc:	4651      	mov	r1, sl
 80090be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090c2:	4651      	mov	r1, sl
 80090c4:	00ca      	lsls	r2, r1, #3
 80090c6:	4610      	mov	r0, r2
 80090c8:	4619      	mov	r1, r3
 80090ca:	4603      	mov	r3, r0
 80090cc:	4642      	mov	r2, r8
 80090ce:	189b      	adds	r3, r3, r2
 80090d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090d4:	464b      	mov	r3, r9
 80090d6:	460a      	mov	r2, r1
 80090d8:	eb42 0303 	adc.w	r3, r2, r3
 80090dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80090ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090ec:	f04f 0200 	mov.w	r2, #0
 80090f0:	f04f 0300 	mov.w	r3, #0
 80090f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80090f8:	4649      	mov	r1, r9
 80090fa:	008b      	lsls	r3, r1, #2
 80090fc:	4641      	mov	r1, r8
 80090fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009102:	4641      	mov	r1, r8
 8009104:	008a      	lsls	r2, r1, #2
 8009106:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800910a:	f7f7 fd9d 	bl	8000c48 <__aeabi_uldivmod>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4b39      	ldr	r3, [pc, #228]	; (80091f8 <UART_SetConfig+0x4e4>)
 8009114:	fba3 1302 	umull	r1, r3, r3, r2
 8009118:	095b      	lsrs	r3, r3, #5
 800911a:	2164      	movs	r1, #100	; 0x64
 800911c:	fb01 f303 	mul.w	r3, r1, r3
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	011b      	lsls	r3, r3, #4
 8009124:	3332      	adds	r3, #50	; 0x32
 8009126:	4a34      	ldr	r2, [pc, #208]	; (80091f8 <UART_SetConfig+0x4e4>)
 8009128:	fba2 2303 	umull	r2, r3, r2, r3
 800912c:	095b      	lsrs	r3, r3, #5
 800912e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009132:	441c      	add	r4, r3
 8009134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009138:	2200      	movs	r2, #0
 800913a:	673b      	str	r3, [r7, #112]	; 0x70
 800913c:	677a      	str	r2, [r7, #116]	; 0x74
 800913e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009142:	4642      	mov	r2, r8
 8009144:	464b      	mov	r3, r9
 8009146:	1891      	adds	r1, r2, r2
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	415b      	adcs	r3, r3
 800914c:	60fb      	str	r3, [r7, #12]
 800914e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009152:	4641      	mov	r1, r8
 8009154:	1851      	adds	r1, r2, r1
 8009156:	6039      	str	r1, [r7, #0]
 8009158:	4649      	mov	r1, r9
 800915a:	414b      	adcs	r3, r1
 800915c:	607b      	str	r3, [r7, #4]
 800915e:	f04f 0200 	mov.w	r2, #0
 8009162:	f04f 0300 	mov.w	r3, #0
 8009166:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800916a:	4659      	mov	r1, fp
 800916c:	00cb      	lsls	r3, r1, #3
 800916e:	4651      	mov	r1, sl
 8009170:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009174:	4651      	mov	r1, sl
 8009176:	00ca      	lsls	r2, r1, #3
 8009178:	4610      	mov	r0, r2
 800917a:	4619      	mov	r1, r3
 800917c:	4603      	mov	r3, r0
 800917e:	4642      	mov	r2, r8
 8009180:	189b      	adds	r3, r3, r2
 8009182:	66bb      	str	r3, [r7, #104]	; 0x68
 8009184:	464b      	mov	r3, r9
 8009186:	460a      	mov	r2, r1
 8009188:	eb42 0303 	adc.w	r3, r2, r3
 800918c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800918e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	663b      	str	r3, [r7, #96]	; 0x60
 8009198:	667a      	str	r2, [r7, #100]	; 0x64
 800919a:	f04f 0200 	mov.w	r2, #0
 800919e:	f04f 0300 	mov.w	r3, #0
 80091a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80091a6:	4649      	mov	r1, r9
 80091a8:	008b      	lsls	r3, r1, #2
 80091aa:	4641      	mov	r1, r8
 80091ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091b0:	4641      	mov	r1, r8
 80091b2:	008a      	lsls	r2, r1, #2
 80091b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80091b8:	f7f7 fd46 	bl	8000c48 <__aeabi_uldivmod>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4b0d      	ldr	r3, [pc, #52]	; (80091f8 <UART_SetConfig+0x4e4>)
 80091c2:	fba3 1302 	umull	r1, r3, r3, r2
 80091c6:	095b      	lsrs	r3, r3, #5
 80091c8:	2164      	movs	r1, #100	; 0x64
 80091ca:	fb01 f303 	mul.w	r3, r1, r3
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	011b      	lsls	r3, r3, #4
 80091d2:	3332      	adds	r3, #50	; 0x32
 80091d4:	4a08      	ldr	r2, [pc, #32]	; (80091f8 <UART_SetConfig+0x4e4>)
 80091d6:	fba2 2303 	umull	r2, r3, r2, r3
 80091da:	095b      	lsrs	r3, r3, #5
 80091dc:	f003 020f 	and.w	r2, r3, #15
 80091e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4422      	add	r2, r4
 80091e8:	609a      	str	r2, [r3, #8]
}
 80091ea:	bf00      	nop
 80091ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80091f0:	46bd      	mov	sp, r7
 80091f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091f6:	bf00      	nop
 80091f8:	51eb851f 	.word	0x51eb851f

080091fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091fc:	b084      	sub	sp, #16
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	f107 001c 	add.w	r0, r7, #28
 800920a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	2b01      	cmp	r3, #1
 8009212:	d122      	bne.n	800925a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009218:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800923c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800923e:	2b01      	cmp	r3, #1
 8009240:	d105      	bne.n	800924e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f001 fbee 	bl	800aa30 <USB_CoreReset>
 8009254:	4603      	mov	r3, r0
 8009256:	73fb      	strb	r3, [r7, #15]
 8009258:	e01a      	b.n	8009290 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f001 fbe2 	bl	800aa30 <USB_CoreReset>
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009272:	2b00      	cmp	r3, #0
 8009274:	d106      	bne.n	8009284 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	639a      	str	r2, [r3, #56]	; 0x38
 8009282:	e005      	b.n	8009290 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009288:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	2b01      	cmp	r3, #1
 8009294:	d10b      	bne.n	80092ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f043 0206 	orr.w	r2, r3, #6
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f043 0220 	orr.w	r2, r3, #32
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092ba:	b004      	add	sp, #16
 80092bc:	4770      	bx	lr
	...

080092c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	4613      	mov	r3, r2
 80092cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80092ce:	79fb      	ldrb	r3, [r7, #7]
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d165      	bne.n	80093a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	4a41      	ldr	r2, [pc, #260]	; (80093dc <USB_SetTurnaroundTime+0x11c>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d906      	bls.n	80092ea <USB_SetTurnaroundTime+0x2a>
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	4a40      	ldr	r2, [pc, #256]	; (80093e0 <USB_SetTurnaroundTime+0x120>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d202      	bcs.n	80092ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80092e4:	230f      	movs	r3, #15
 80092e6:	617b      	str	r3, [r7, #20]
 80092e8:	e062      	b.n	80093b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	4a3c      	ldr	r2, [pc, #240]	; (80093e0 <USB_SetTurnaroundTime+0x120>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d306      	bcc.n	8009300 <USB_SetTurnaroundTime+0x40>
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	4a3b      	ldr	r2, [pc, #236]	; (80093e4 <USB_SetTurnaroundTime+0x124>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d202      	bcs.n	8009300 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80092fa:	230e      	movs	r3, #14
 80092fc:	617b      	str	r3, [r7, #20]
 80092fe:	e057      	b.n	80093b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	4a38      	ldr	r2, [pc, #224]	; (80093e4 <USB_SetTurnaroundTime+0x124>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d306      	bcc.n	8009316 <USB_SetTurnaroundTime+0x56>
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	4a37      	ldr	r2, [pc, #220]	; (80093e8 <USB_SetTurnaroundTime+0x128>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d202      	bcs.n	8009316 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009310:	230d      	movs	r3, #13
 8009312:	617b      	str	r3, [r7, #20]
 8009314:	e04c      	b.n	80093b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	4a33      	ldr	r2, [pc, #204]	; (80093e8 <USB_SetTurnaroundTime+0x128>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d306      	bcc.n	800932c <USB_SetTurnaroundTime+0x6c>
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	4a32      	ldr	r2, [pc, #200]	; (80093ec <USB_SetTurnaroundTime+0x12c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d802      	bhi.n	800932c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009326:	230c      	movs	r3, #12
 8009328:	617b      	str	r3, [r7, #20]
 800932a:	e041      	b.n	80093b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	4a2f      	ldr	r2, [pc, #188]	; (80093ec <USB_SetTurnaroundTime+0x12c>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d906      	bls.n	8009342 <USB_SetTurnaroundTime+0x82>
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	4a2e      	ldr	r2, [pc, #184]	; (80093f0 <USB_SetTurnaroundTime+0x130>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d802      	bhi.n	8009342 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800933c:	230b      	movs	r3, #11
 800933e:	617b      	str	r3, [r7, #20]
 8009340:	e036      	b.n	80093b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	4a2a      	ldr	r2, [pc, #168]	; (80093f0 <USB_SetTurnaroundTime+0x130>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d906      	bls.n	8009358 <USB_SetTurnaroundTime+0x98>
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	4a29      	ldr	r2, [pc, #164]	; (80093f4 <USB_SetTurnaroundTime+0x134>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d802      	bhi.n	8009358 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009352:	230a      	movs	r3, #10
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	e02b      	b.n	80093b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	4a26      	ldr	r2, [pc, #152]	; (80093f4 <USB_SetTurnaroundTime+0x134>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d906      	bls.n	800936e <USB_SetTurnaroundTime+0xae>
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	4a25      	ldr	r2, [pc, #148]	; (80093f8 <USB_SetTurnaroundTime+0x138>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d202      	bcs.n	800936e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009368:	2309      	movs	r3, #9
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	e020      	b.n	80093b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	4a21      	ldr	r2, [pc, #132]	; (80093f8 <USB_SetTurnaroundTime+0x138>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d306      	bcc.n	8009384 <USB_SetTurnaroundTime+0xc4>
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	4a20      	ldr	r2, [pc, #128]	; (80093fc <USB_SetTurnaroundTime+0x13c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d802      	bhi.n	8009384 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800937e:	2308      	movs	r3, #8
 8009380:	617b      	str	r3, [r7, #20]
 8009382:	e015      	b.n	80093b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	4a1d      	ldr	r2, [pc, #116]	; (80093fc <USB_SetTurnaroundTime+0x13c>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d906      	bls.n	800939a <USB_SetTurnaroundTime+0xda>
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	4a1c      	ldr	r2, [pc, #112]	; (8009400 <USB_SetTurnaroundTime+0x140>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d202      	bcs.n	800939a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009394:	2307      	movs	r3, #7
 8009396:	617b      	str	r3, [r7, #20]
 8009398:	e00a      	b.n	80093b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800939a:	2306      	movs	r3, #6
 800939c:	617b      	str	r3, [r7, #20]
 800939e:	e007      	b.n	80093b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80093a0:	79fb      	ldrb	r3, [r7, #7]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d102      	bne.n	80093ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80093a6:	2309      	movs	r3, #9
 80093a8:	617b      	str	r3, [r7, #20]
 80093aa:	e001      	b.n	80093b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80093ac:	2309      	movs	r3, #9
 80093ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	68da      	ldr	r2, [r3, #12]
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	029b      	lsls	r3, r3, #10
 80093c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80093c8:	431a      	orrs	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	371c      	adds	r7, #28
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	00d8acbf 	.word	0x00d8acbf
 80093e0:	00e4e1c0 	.word	0x00e4e1c0
 80093e4:	00f42400 	.word	0x00f42400
 80093e8:	01067380 	.word	0x01067380
 80093ec:	011a499f 	.word	0x011a499f
 80093f0:	01312cff 	.word	0x01312cff
 80093f4:	014ca43f 	.word	0x014ca43f
 80093f8:	016e3600 	.word	0x016e3600
 80093fc:	01a6ab1f 	.word	0x01a6ab1f
 8009400:	01e84800 	.word	0x01e84800

08009404 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	f043 0201 	orr.w	r2, r3, #1
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f023 0201 	bic.w	r2, r3, #1
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	460b      	mov	r3, r1
 8009452:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009454:	2300      	movs	r3, #0
 8009456:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009464:	78fb      	ldrb	r3, [r7, #3]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d115      	bne.n	8009496 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009476:	2001      	movs	r0, #1
 8009478:	f7f9 ff6e 	bl	8003358 <HAL_Delay>
      ms++;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	3301      	adds	r3, #1
 8009480:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f001 fa45 	bl	800a912 <USB_GetMode>
 8009488:	4603      	mov	r3, r0
 800948a:	2b01      	cmp	r3, #1
 800948c:	d01e      	beq.n	80094cc <USB_SetCurrentMode+0x84>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2b31      	cmp	r3, #49	; 0x31
 8009492:	d9f0      	bls.n	8009476 <USB_SetCurrentMode+0x2e>
 8009494:	e01a      	b.n	80094cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009496:	78fb      	ldrb	r3, [r7, #3]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d115      	bne.n	80094c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80094a8:	2001      	movs	r0, #1
 80094aa:	f7f9 ff55 	bl	8003358 <HAL_Delay>
      ms++;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3301      	adds	r3, #1
 80094b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f001 fa2c 	bl	800a912 <USB_GetMode>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <USB_SetCurrentMode+0x84>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2b31      	cmp	r3, #49	; 0x31
 80094c4:	d9f0      	bls.n	80094a8 <USB_SetCurrentMode+0x60>
 80094c6:	e001      	b.n	80094cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e005      	b.n	80094d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2b32      	cmp	r3, #50	; 0x32
 80094d0:	d101      	bne.n	80094d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e000      	b.n	80094d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094e0:	b084      	sub	sp, #16
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b086      	sub	sp, #24
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80094fa:	2300      	movs	r3, #0
 80094fc:	613b      	str	r3, [r7, #16]
 80094fe:	e009      	b.n	8009514 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	3340      	adds	r3, #64	; 0x40
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	2200      	movs	r2, #0
 800950c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	3301      	adds	r3, #1
 8009512:	613b      	str	r3, [r7, #16]
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	2b0e      	cmp	r3, #14
 8009518:	d9f2      	bls.n	8009500 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800951a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d11c      	bne.n	800955a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800952e:	f043 0302 	orr.w	r3, r3, #2
 8009532:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009538:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009544:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	639a      	str	r2, [r3, #56]	; 0x38
 8009558:	e00b      	b.n	8009572 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009578:	461a      	mov	r2, r3
 800957a:	2300      	movs	r3, #0
 800957c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009584:	4619      	mov	r1, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800958c:	461a      	mov	r2, r3
 800958e:	680b      	ldr	r3, [r1, #0]
 8009590:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009594:	2b01      	cmp	r3, #1
 8009596:	d10c      	bne.n	80095b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959a:	2b00      	cmp	r3, #0
 800959c:	d104      	bne.n	80095a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800959e:	2100      	movs	r1, #0
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f965 	bl	8009870 <USB_SetDevSpeed>
 80095a6:	e008      	b.n	80095ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80095a8:	2101      	movs	r1, #1
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f960 	bl	8009870 <USB_SetDevSpeed>
 80095b0:	e003      	b.n	80095ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80095b2:	2103      	movs	r1, #3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f95b 	bl	8009870 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095ba:	2110      	movs	r1, #16
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f8f3 	bl	80097a8 <USB_FlushTxFifo>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f91f 	bl	8009810 <USB_FlushRxFifo>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095e2:	461a      	mov	r2, r3
 80095e4:	2300      	movs	r3, #0
 80095e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ee:	461a      	mov	r2, r3
 80095f0:	2300      	movs	r3, #0
 80095f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095fa:	461a      	mov	r2, r3
 80095fc:	2300      	movs	r3, #0
 80095fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009600:	2300      	movs	r3, #0
 8009602:	613b      	str	r3, [r7, #16]
 8009604:	e043      	b.n	800968e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	015a      	lsls	r2, r3, #5
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	4413      	add	r3, r2
 800960e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800961c:	d118      	bne.n	8009650 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10a      	bne.n	800963a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009630:	461a      	mov	r2, r3
 8009632:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	e013      	b.n	8009662 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009646:	461a      	mov	r2, r3
 8009648:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	e008      	b.n	8009662 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800965c:	461a      	mov	r2, r3
 800965e:	2300      	movs	r3, #0
 8009660:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	4413      	add	r3, r2
 800966a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800966e:	461a      	mov	r2, r3
 8009670:	2300      	movs	r3, #0
 8009672:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	015a      	lsls	r2, r3, #5
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	4413      	add	r3, r2
 800967c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009680:	461a      	mov	r2, r3
 8009682:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009686:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	3301      	adds	r3, #1
 800968c:	613b      	str	r3, [r7, #16]
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	429a      	cmp	r2, r3
 8009694:	d3b7      	bcc.n	8009606 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009696:	2300      	movs	r3, #0
 8009698:	613b      	str	r3, [r7, #16]
 800969a:	e043      	b.n	8009724 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096b2:	d118      	bne.n	80096e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10a      	bne.n	80096d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c6:	461a      	mov	r2, r3
 80096c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096cc:	6013      	str	r3, [r2, #0]
 80096ce:	e013      	b.n	80096f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096dc:	461a      	mov	r2, r3
 80096de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	e008      	b.n	80096f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f2:	461a      	mov	r2, r3
 80096f4:	2300      	movs	r3, #0
 80096f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009704:	461a      	mov	r2, r3
 8009706:	2300      	movs	r3, #0
 8009708:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	4413      	add	r3, r2
 8009712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009716:	461a      	mov	r2, r3
 8009718:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800971c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	3301      	adds	r3, #1
 8009722:	613b      	str	r3, [r7, #16]
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	429a      	cmp	r2, r3
 800972a:	d3b7      	bcc.n	800969c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800973a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800973e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800974c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	2b00      	cmp	r3, #0
 8009752:	d105      	bne.n	8009760 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	f043 0210 	orr.w	r2, r3, #16
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	699a      	ldr	r2, [r3, #24]
 8009764:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <USB_DevInit+0x2c4>)
 8009766:	4313      	orrs	r3, r2
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800976c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976e:	2b00      	cmp	r3, #0
 8009770:	d005      	beq.n	800977e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	f043 0208 	orr.w	r2, r3, #8
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800977e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009780:	2b01      	cmp	r3, #1
 8009782:	d107      	bne.n	8009794 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800978c:	f043 0304 	orr.w	r3, r3, #4
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009794:	7dfb      	ldrb	r3, [r7, #23]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097a0:	b004      	add	sp, #16
 80097a2:	4770      	bx	lr
 80097a4:	803c3800 	.word	0x803c3800

080097a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3301      	adds	r3, #1
 80097ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	4a13      	ldr	r2, [pc, #76]	; (800980c <USB_FlushTxFifo+0x64>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d901      	bls.n	80097c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80097c4:	2303      	movs	r3, #3
 80097c6:	e01b      	b.n	8009800 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	daf2      	bge.n	80097b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80097d0:	2300      	movs	r3, #0
 80097d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	019b      	lsls	r3, r3, #6
 80097d8:	f043 0220 	orr.w	r2, r3, #32
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	3301      	adds	r3, #1
 80097e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4a08      	ldr	r2, [pc, #32]	; (800980c <USB_FlushTxFifo+0x64>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d901      	bls.n	80097f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80097ee:	2303      	movs	r3, #3
 80097f0:	e006      	b.n	8009800 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	f003 0320 	and.w	r3, r3, #32
 80097fa:	2b20      	cmp	r3, #32
 80097fc:	d0f0      	beq.n	80097e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	00030d40 	.word	0x00030d40

08009810 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3301      	adds	r3, #1
 8009820:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	4a11      	ldr	r2, [pc, #68]	; (800986c <USB_FlushRxFifo+0x5c>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d901      	bls.n	800982e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e018      	b.n	8009860 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	2b00      	cmp	r3, #0
 8009834:	daf2      	bge.n	800981c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009836:	2300      	movs	r3, #0
 8009838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2210      	movs	r2, #16
 800983e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3301      	adds	r3, #1
 8009844:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	4a08      	ldr	r2, [pc, #32]	; (800986c <USB_FlushRxFifo+0x5c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d901      	bls.n	8009852 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e006      	b.n	8009860 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	f003 0310 	and.w	r3, r3, #16
 800985a:	2b10      	cmp	r3, #16
 800985c:	d0f0      	beq.n	8009840 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	00030d40 	.word	0x00030d40

08009870 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	78fb      	ldrb	r3, [r7, #3]
 800988a:	68f9      	ldr	r1, [r7, #12]
 800988c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009890:	4313      	orrs	r3, r2
 8009892:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80098a2:	b480      	push	{r7}
 80098a4:	b087      	sub	sp, #28
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f003 0306 	and.w	r3, r3, #6
 80098ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d102      	bne.n	80098c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80098c2:	2300      	movs	r3, #0
 80098c4:	75fb      	strb	r3, [r7, #23]
 80098c6:	e00a      	b.n	80098de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d002      	beq.n	80098d4 <USB_GetDevSpeed+0x32>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2b06      	cmp	r3, #6
 80098d2:	d102      	bne.n	80098da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80098d4:	2302      	movs	r3, #2
 80098d6:	75fb      	strb	r3, [r7, #23]
 80098d8:	e001      	b.n	80098de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80098da:	230f      	movs	r3, #15
 80098dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80098de:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	371c      	adds	r7, #28
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	785b      	ldrb	r3, [r3, #1]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d13a      	bne.n	800997e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800990e:	69da      	ldr	r2, [r3, #28]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	f003 030f 	and.w	r3, r3, #15
 8009918:	2101      	movs	r1, #1
 800991a:	fa01 f303 	lsl.w	r3, r1, r3
 800991e:	b29b      	uxth	r3, r3
 8009920:	68f9      	ldr	r1, [r7, #12]
 8009922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009926:	4313      	orrs	r3, r2
 8009928:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d155      	bne.n	80099ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	791b      	ldrb	r3, [r3, #4]
 800995a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800995c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	059b      	lsls	r3, r3, #22
 8009962:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009964:	4313      	orrs	r3, r2
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	0151      	lsls	r1, r2, #5
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	440a      	add	r2, r1
 800996e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	e036      	b.n	80099ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009984:	69da      	ldr	r2, [r3, #28]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	f003 030f 	and.w	r3, r3, #15
 800998e:	2101      	movs	r1, #1
 8009990:	fa01 f303 	lsl.w	r3, r1, r3
 8009994:	041b      	lsls	r3, r3, #16
 8009996:	68f9      	ldr	r1, [r7, #12]
 8009998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800999c:	4313      	orrs	r3, r2
 800999e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	015a      	lsls	r2, r3, #5
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4413      	add	r3, r2
 80099a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d11a      	bne.n	80099ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	791b      	ldrb	r3, [r3, #4]
 80099d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80099d2:	430b      	orrs	r3, r1
 80099d4:	4313      	orrs	r3, r2
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	0151      	lsls	r1, r2, #5
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	440a      	add	r2, r1
 80099de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
	...

080099fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	785b      	ldrb	r3, [r3, #1]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d161      	bne.n	8009adc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	015a      	lsls	r2, r3, #5
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a2e:	d11f      	bne.n	8009a70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	015a      	lsls	r2, r3, #5
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	4413      	add	r3, r2
 8009a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	0151      	lsls	r1, r2, #5
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	440a      	add	r2, r1
 8009a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	0151      	lsls	r1, r2, #5
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	440a      	add	r2, r1
 8009a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	f003 030f 	and.w	r3, r3, #15
 8009a80:	2101      	movs	r1, #1
 8009a82:	fa01 f303 	lsl.w	r3, r1, r3
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	43db      	mvns	r3, r3
 8009a8a:	68f9      	ldr	r1, [r7, #12]
 8009a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a90:	4013      	ands	r3, r2
 8009a92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a9a:	69da      	ldr	r2, [r3, #28]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	f003 030f 	and.w	r3, r3, #15
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	43db      	mvns	r3, r3
 8009aae:	68f9      	ldr	r1, [r7, #12]
 8009ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	015a      	lsls	r2, r3, #5
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	0159      	lsls	r1, r3, #5
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	440b      	add	r3, r1
 8009ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	4b35      	ldr	r3, [pc, #212]	; (8009bac <USB_DeactivateEndpoint+0x1b0>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	600b      	str	r3, [r1, #0]
 8009ada:	e060      	b.n	8009b9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009af2:	d11f      	bne.n	8009b34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	0151      	lsls	r1, r2, #5
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	440a      	add	r2, r1
 8009b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	015a      	lsls	r2, r3, #5
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	0151      	lsls	r1, r2, #5
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	440a      	add	r2, r1
 8009b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	f003 030f 	and.w	r3, r3, #15
 8009b44:	2101      	movs	r1, #1
 8009b46:	fa01 f303 	lsl.w	r3, r1, r3
 8009b4a:	041b      	lsls	r3, r3, #16
 8009b4c:	43db      	mvns	r3, r3
 8009b4e:	68f9      	ldr	r1, [r7, #12]
 8009b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b54:	4013      	ands	r3, r2
 8009b56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b5e:	69da      	ldr	r2, [r3, #28]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	f003 030f 	and.w	r3, r3, #15
 8009b68:	2101      	movs	r1, #1
 8009b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b6e:	041b      	lsls	r3, r3, #16
 8009b70:	43db      	mvns	r3, r3
 8009b72:	68f9      	ldr	r1, [r7, #12]
 8009b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b78:	4013      	ands	r3, r2
 8009b7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	015a      	lsls	r2, r3, #5
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	0159      	lsls	r1, r3, #5
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	440b      	add	r3, r1
 8009b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b96:	4619      	mov	r1, r3
 8009b98:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <USB_DeactivateEndpoint+0x1b4>)
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	ec337800 	.word	0xec337800
 8009bb0:	eff37800 	.word	0xeff37800

08009bb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08a      	sub	sp, #40	; 0x28
 8009bb8:	af02      	add	r7, sp, #8
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	785b      	ldrb	r3, [r3, #1]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	f040 815c 	bne.w	8009e8e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d132      	bne.n	8009c44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	69ba      	ldr	r2, [r7, #24]
 8009bee:	0151      	lsls	r1, r2, #5
 8009bf0:	69fa      	ldr	r2, [r7, #28]
 8009bf2:	440a      	add	r2, r1
 8009bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bf8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009bfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	0151      	lsls	r1, r2, #5
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	440a      	add	r2, r1
 8009c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	69ba      	ldr	r2, [r7, #24]
 8009c32:	0151      	lsls	r1, r2, #5
 8009c34:	69fa      	ldr	r2, [r7, #28]
 8009c36:	440a      	add	r2, r1
 8009c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c3c:	0cdb      	lsrs	r3, r3, #19
 8009c3e:	04db      	lsls	r3, r3, #19
 8009c40:	6113      	str	r3, [r2, #16]
 8009c42:	e074      	b.n	8009d2e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	69ba      	ldr	r2, [r7, #24]
 8009c54:	0151      	lsls	r1, r2, #5
 8009c56:	69fa      	ldr	r2, [r7, #28]
 8009c58:	440a      	add	r2, r1
 8009c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c5e:	0cdb      	lsrs	r3, r3, #19
 8009c60:	04db      	lsls	r3, r3, #19
 8009c62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	015a      	lsls	r2, r3, #5
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	69ba      	ldr	r2, [r7, #24]
 8009c74:	0151      	lsls	r1, r2, #5
 8009c76:	69fa      	ldr	r2, [r7, #28]
 8009c78:	440a      	add	r2, r1
 8009c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c94:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	6999      	ldr	r1, [r3, #24]
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	440b      	add	r3, r1
 8009ca0:	1e59      	subs	r1, r3, #1
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8009caa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009cac:	4b9d      	ldr	r3, [pc, #628]	; (8009f24 <USB_EPStartXfer+0x370>)
 8009cae:	400b      	ands	r3, r1
 8009cb0:	69b9      	ldr	r1, [r7, #24]
 8009cb2:	0148      	lsls	r0, r1, #5
 8009cb4:	69f9      	ldr	r1, [r7, #28]
 8009cb6:	4401      	add	r1, r0
 8009cb8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ccc:	691a      	ldr	r2, [r3, #16]
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	699b      	ldr	r3, [r3, #24]
 8009cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd6:	69b9      	ldr	r1, [r7, #24]
 8009cd8:	0148      	lsls	r0, r1, #5
 8009cda:	69f9      	ldr	r1, [r7, #28]
 8009cdc:	4401      	add	r1, r0
 8009cde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	791b      	ldrb	r3, [r3, #4]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d11f      	bne.n	8009d2e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	69ba      	ldr	r2, [r7, #24]
 8009cfe:	0151      	lsls	r1, r2, #5
 8009d00:	69fa      	ldr	r2, [r7, #28]
 8009d02:	440a      	add	r2, r1
 8009d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009d0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	69ba      	ldr	r2, [r7, #24]
 8009d1e:	0151      	lsls	r1, r2, #5
 8009d20:	69fa      	ldr	r2, [r7, #28]
 8009d22:	440a      	add	r2, r1
 8009d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d2c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009d2e:	79fb      	ldrb	r3, [r7, #7]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d14b      	bne.n	8009dcc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	695b      	ldr	r3, [r3, #20]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d009      	beq.n	8009d50 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d48:	461a      	mov	r2, r3
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	791b      	ldrb	r3, [r3, #4]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d128      	bne.n	8009daa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d110      	bne.n	8009d8a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69ba      	ldr	r2, [r7, #24]
 8009d78:	0151      	lsls	r1, r2, #5
 8009d7a:	69fa      	ldr	r2, [r7, #28]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	e00f      	b.n	8009daa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	69ba      	ldr	r2, [r7, #24]
 8009d9a:	0151      	lsls	r1, r2, #5
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	440a      	add	r2, r1
 8009da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009da8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	69ba      	ldr	r2, [r7, #24]
 8009dba:	0151      	lsls	r1, r2, #5
 8009dbc:	69fa      	ldr	r2, [r7, #28]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	e133      	b.n	800a034 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	0151      	lsls	r1, r2, #5
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	440a      	add	r2, r1
 8009de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009de6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	791b      	ldrb	r3, [r3, #4]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d015      	beq.n	8009e20 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 811b 	beq.w	800a034 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	f003 030f 	and.w	r3, r3, #15
 8009e0e:	2101      	movs	r1, #1
 8009e10:	fa01 f303 	lsl.w	r3, r1, r3
 8009e14:	69f9      	ldr	r1, [r7, #28]
 8009e16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	634b      	str	r3, [r1, #52]	; 0x34
 8009e1e:	e109      	b.n	800a034 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d110      	bne.n	8009e52 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	0151      	lsls	r1, r2, #5
 8009e42:	69fa      	ldr	r2, [r7, #28]
 8009e44:	440a      	add	r2, r1
 8009e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	e00f      	b.n	8009e72 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	015a      	lsls	r2, r3, #5
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	4413      	add	r3, r2
 8009e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	69ba      	ldr	r2, [r7, #24]
 8009e62:	0151      	lsls	r1, r2, #5
 8009e64:	69fa      	ldr	r2, [r7, #28]
 8009e66:	440a      	add	r2, r1
 8009e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	6919      	ldr	r1, [r3, #16]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	781a      	ldrb	r2, [r3, #0]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	b298      	uxth	r0, r3
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	4603      	mov	r3, r0
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 fade 	bl	800a448 <USB_WritePacket>
 8009e8c:	e0d2      	b.n	800a034 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	69ba      	ldr	r2, [r7, #24]
 8009e9e:	0151      	lsls	r1, r2, #5
 8009ea0:	69fa      	ldr	r2, [r7, #28]
 8009ea2:	440a      	add	r2, r1
 8009ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ea8:	0cdb      	lsrs	r3, r3, #19
 8009eaa:	04db      	lsls	r3, r3, #19
 8009eac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	015a      	lsls	r2, r3, #5
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	69ba      	ldr	r2, [r7, #24]
 8009ebe:	0151      	lsls	r1, r2, #5
 8009ec0:	69fa      	ldr	r2, [r7, #28]
 8009ec2:	440a      	add	r2, r1
 8009ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ec8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ecc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ed0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d126      	bne.n	8009f28 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee6:	691a      	ldr	r2, [r3, #16]
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ef0:	69b9      	ldr	r1, [r7, #24]
 8009ef2:	0148      	lsls	r0, r1, #5
 8009ef4:	69f9      	ldr	r1, [r7, #28]
 8009ef6:	4401      	add	r1, r0
 8009ef8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009efc:	4313      	orrs	r3, r2
 8009efe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	69ba      	ldr	r2, [r7, #24]
 8009f10:	0151      	lsls	r1, r2, #5
 8009f12:	69fa      	ldr	r2, [r7, #28]
 8009f14:	440a      	add	r2, r1
 8009f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f1e:	6113      	str	r3, [r2, #16]
 8009f20:	e03a      	b.n	8009f98 <USB_EPStartXfer+0x3e4>
 8009f22:	bf00      	nop
 8009f24:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	699a      	ldr	r2, [r3, #24]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	4413      	add	r3, r2
 8009f32:	1e5a      	subs	r2, r3, #1
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f3c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	8afa      	ldrh	r2, [r7, #22]
 8009f44:	fb03 f202 	mul.w	r2, r3, r2
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	015a      	lsls	r2, r3, #5
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	4413      	add	r3, r2
 8009f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f58:	691a      	ldr	r2, [r3, #16]
 8009f5a:	8afb      	ldrh	r3, [r7, #22]
 8009f5c:	04d9      	lsls	r1, r3, #19
 8009f5e:	4b38      	ldr	r3, [pc, #224]	; (800a040 <USB_EPStartXfer+0x48c>)
 8009f60:	400b      	ands	r3, r1
 8009f62:	69b9      	ldr	r1, [r7, #24]
 8009f64:	0148      	lsls	r0, r1, #5
 8009f66:	69f9      	ldr	r1, [r7, #28]
 8009f68:	4401      	add	r1, r0
 8009f6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7e:	691a      	ldr	r2, [r3, #16]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f88:	69b9      	ldr	r1, [r7, #24]
 8009f8a:	0148      	lsls	r0, r1, #5
 8009f8c:	69f9      	ldr	r1, [r7, #28]
 8009f8e:	4401      	add	r1, r0
 8009f90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f94:	4313      	orrs	r3, r2
 8009f96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f98:	79fb      	ldrb	r3, [r7, #7]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d10d      	bne.n	8009fba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d009      	beq.n	8009fba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	6919      	ldr	r1, [r3, #16]
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb6:	460a      	mov	r2, r1
 8009fb8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	791b      	ldrb	r3, [r3, #4]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d128      	bne.n	800a014 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d110      	bne.n	8009ff4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	015a      	lsls	r2, r3, #5
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	0151      	lsls	r1, r2, #5
 8009fe4:	69fa      	ldr	r2, [r7, #28]
 8009fe6:	440a      	add	r2, r1
 8009fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ff0:	6013      	str	r3, [r2, #0]
 8009ff2:	e00f      	b.n	800a014 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	015a      	lsls	r2, r3, #5
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	0151      	lsls	r1, r2, #5
 800a006:	69fa      	ldr	r2, [r7, #28]
 800a008:	440a      	add	r2, r1
 800a00a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a00e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a012:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	015a      	lsls	r2, r3, #5
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	4413      	add	r3, r2
 800a01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	0151      	lsls	r1, r2, #5
 800a026:	69fa      	ldr	r2, [r7, #28]
 800a028:	440a      	add	r2, r1
 800a02a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a02e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a032:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3720      	adds	r7, #32
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	1ff80000 	.word	0x1ff80000

0800a044 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a044:	b480      	push	{r7}
 800a046:	b087      	sub	sp, #28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	4613      	mov	r3, r2
 800a050:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	785b      	ldrb	r3, [r3, #1]
 800a060:	2b01      	cmp	r3, #1
 800a062:	f040 80ce 	bne.w	800a202 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d132      	bne.n	800a0d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	015a      	lsls	r2, r3, #5
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	4413      	add	r3, r2
 800a076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	0151      	lsls	r1, r2, #5
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	440a      	add	r2, r1
 800a084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a088:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a08c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a090:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	015a      	lsls	r2, r3, #5
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	4413      	add	r3, r2
 800a09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	0151      	lsls	r1, r2, #5
 800a0a4:	697a      	ldr	r2, [r7, #20]
 800a0a6:	440a      	add	r2, r1
 800a0a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	015a      	lsls	r2, r3, #5
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	0151      	lsls	r1, r2, #5
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	440a      	add	r2, r1
 800a0c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0cc:	0cdb      	lsrs	r3, r3, #19
 800a0ce:	04db      	lsls	r3, r3, #19
 800a0d0:	6113      	str	r3, [r2, #16]
 800a0d2:	e04e      	b.n	800a172 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	0151      	lsls	r1, r2, #5
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	440a      	add	r2, r1
 800a0ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ee:	0cdb      	lsrs	r3, r3, #19
 800a0f0:	04db      	lsls	r3, r3, #19
 800a0f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	015a      	lsls	r2, r3, #5
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	0151      	lsls	r1, r2, #5
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	440a      	add	r2, r1
 800a10a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a10e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a112:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a116:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	699a      	ldr	r2, [r3, #24]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	429a      	cmp	r2, r3
 800a122:	d903      	bls.n	800a12c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	68da      	ldr	r2, [r3, #12]
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	015a      	lsls	r2, r3, #5
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	4413      	add	r3, r2
 800a134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	0151      	lsls	r1, r2, #5
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	440a      	add	r2, r1
 800a142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a146:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a14a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a158:	691a      	ldr	r2, [r3, #16]
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a162:	6939      	ldr	r1, [r7, #16]
 800a164:	0148      	lsls	r0, r1, #5
 800a166:	6979      	ldr	r1, [r7, #20]
 800a168:	4401      	add	r1, r0
 800a16a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a16e:	4313      	orrs	r3, r2
 800a170:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a172:	79fb      	ldrb	r3, [r7, #7]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d11e      	bne.n	800a1b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d009      	beq.n	800a194 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18c:	461a      	mov	r2, r3
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	015a      	lsls	r2, r3, #5
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	0151      	lsls	r1, r2, #5
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	440a      	add	r2, r1
 800a1aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	e097      	b.n	800a2e6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	015a      	lsls	r2, r3, #5
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	4413      	add	r3, r2
 800a1be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	0151      	lsls	r1, r2, #5
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	440a      	add	r2, r1
 800a1cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 8083 	beq.w	800a2e6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	f003 030f 	and.w	r3, r3, #15
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1f6:	6979      	ldr	r1, [r7, #20]
 800a1f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	634b      	str	r3, [r1, #52]	; 0x34
 800a200:	e071      	b.n	800a2e6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	015a      	lsls	r2, r3, #5
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	4413      	add	r3, r2
 800a20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	0151      	lsls	r1, r2, #5
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	440a      	add	r2, r1
 800a218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a21c:	0cdb      	lsrs	r3, r3, #19
 800a21e:	04db      	lsls	r3, r3, #19
 800a220:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	0151      	lsls	r1, r2, #5
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	440a      	add	r2, r1
 800a238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a23c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a240:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a244:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d003      	beq.n	800a256 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	68da      	ldr	r2, [r3, #12]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	68da      	ldr	r2, [r3, #12]
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	0151      	lsls	r1, r2, #5
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	440a      	add	r2, r1
 800a274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a27c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a28a:	691a      	ldr	r2, [r3, #16]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	69db      	ldr	r3, [r3, #28]
 800a290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a294:	6939      	ldr	r1, [r7, #16]
 800a296:	0148      	lsls	r0, r1, #5
 800a298:	6979      	ldr	r1, [r7, #20]
 800a29a:	4401      	add	r1, r0
 800a29c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d10d      	bne.n	800a2c6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d009      	beq.n	800a2c6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	6919      	ldr	r1, [r3, #16]
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	015a      	lsls	r2, r3, #5
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	4413      	add	r3, r2
 800a2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c2:	460a      	mov	r2, r1
 800a2c4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	0151      	lsls	r1, r2, #5
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	440a      	add	r2, r1
 800a2dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	371c      	adds	r7, #28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b087      	sub	sp, #28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2fe:	2300      	movs	r3, #0
 800a300:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	785b      	ldrb	r3, [r3, #1]
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d14a      	bne.n	800a3a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	015a      	lsls	r2, r3, #5
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	4413      	add	r3, r2
 800a31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a326:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a32a:	f040 8086 	bne.w	800a43a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	4413      	add	r3, r2
 800a338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	7812      	ldrb	r2, [r2, #0]
 800a342:	0151      	lsls	r1, r2, #5
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	440a      	add	r2, r1
 800a348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a34c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a350:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	015a      	lsls	r2, r3, #5
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	4413      	add	r3, r2
 800a35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	7812      	ldrb	r2, [r2, #0]
 800a366:	0151      	lsls	r1, r2, #5
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	440a      	add	r2, r1
 800a36c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a374:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3301      	adds	r3, #1
 800a37a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a382:	4293      	cmp	r3, r2
 800a384:	d902      	bls.n	800a38c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	75fb      	strb	r3, [r7, #23]
          break;
 800a38a:	e056      	b.n	800a43a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	015a      	lsls	r2, r3, #5
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	4413      	add	r3, r2
 800a396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3a4:	d0e7      	beq.n	800a376 <USB_EPStopXfer+0x82>
 800a3a6:	e048      	b.n	800a43a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	015a      	lsls	r2, r3, #5
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3c0:	d13b      	bne.n	800a43a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	015a      	lsls	r2, r3, #5
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	7812      	ldrb	r2, [r2, #0]
 800a3d6:	0151      	lsls	r1, r2, #5
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	440a      	add	r2, r1
 800a3dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a3e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	7812      	ldrb	r2, [r2, #0]
 800a3fa:	0151      	lsls	r1, r2, #5
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	440a      	add	r2, r1
 800a400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a408:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	3301      	adds	r3, #1
 800a40e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f242 7210 	movw	r2, #10000	; 0x2710
 800a416:	4293      	cmp	r3, r2
 800a418:	d902      	bls.n	800a420 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	75fb      	strb	r3, [r7, #23]
          break;
 800a41e:	e00c      	b.n	800a43a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	015a      	lsls	r2, r3, #5
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	4413      	add	r3, r2
 800a42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a438:	d0e7      	beq.n	800a40a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	371c      	adds	r7, #28
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a448:	b480      	push	{r7}
 800a44a:	b089      	sub	sp, #36	; 0x24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4611      	mov	r1, r2
 800a454:	461a      	mov	r2, r3
 800a456:	460b      	mov	r3, r1
 800a458:	71fb      	strb	r3, [r7, #7]
 800a45a:	4613      	mov	r3, r2
 800a45c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a466:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d123      	bne.n	800a4b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a46e:	88bb      	ldrh	r3, [r7, #4]
 800a470:	3303      	adds	r3, #3
 800a472:	089b      	lsrs	r3, r3, #2
 800a474:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a476:	2300      	movs	r3, #0
 800a478:	61bb      	str	r3, [r7, #24]
 800a47a:	e018      	b.n	800a4ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a47c:	79fb      	ldrb	r3, [r7, #7]
 800a47e:	031a      	lsls	r2, r3, #12
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	4413      	add	r3, r2
 800a484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a488:	461a      	mov	r2, r3
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	3301      	adds	r3, #1
 800a494:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	3301      	adds	r3, #1
 800a49a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	61bb      	str	r3, [r7, #24]
 800a4ae:	69ba      	ldr	r2, [r7, #24]
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d3e2      	bcc.n	800a47c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3724      	adds	r7, #36	; 0x24
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b08b      	sub	sp, #44	; 0x2c
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a4da:	88fb      	ldrh	r3, [r7, #6]
 800a4dc:	089b      	lsrs	r3, r3, #2
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a4e2:	88fb      	ldrh	r3, [r7, #6]
 800a4e4:	f003 0303 	and.w	r3, r3, #3
 800a4e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	623b      	str	r3, [r7, #32]
 800a4ee:	e014      	b.n	800a51a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fa:	601a      	str	r2, [r3, #0]
    pDest++;
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	3301      	adds	r3, #1
 800a500:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	3301      	adds	r3, #1
 800a506:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	3301      	adds	r3, #1
 800a50c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a510:	3301      	adds	r3, #1
 800a512:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a514:	6a3b      	ldr	r3, [r7, #32]
 800a516:	3301      	adds	r3, #1
 800a518:	623b      	str	r3, [r7, #32]
 800a51a:	6a3a      	ldr	r2, [r7, #32]
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d3e6      	bcc.n	800a4f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a522:	8bfb      	ldrh	r3, [r7, #30]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d01e      	beq.n	800a566 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a528:	2300      	movs	r3, #0
 800a52a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a532:	461a      	mov	r2, r3
 800a534:	f107 0310 	add.w	r3, r7, #16
 800a538:	6812      	ldr	r2, [r2, #0]
 800a53a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	6a3b      	ldr	r3, [r7, #32]
 800a540:	b2db      	uxtb	r3, r3
 800a542:	00db      	lsls	r3, r3, #3
 800a544:	fa22 f303 	lsr.w	r3, r2, r3
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	701a      	strb	r2, [r3, #0]
      i++;
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	3301      	adds	r3, #1
 800a552:	623b      	str	r3, [r7, #32]
      pDest++;
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	3301      	adds	r3, #1
 800a558:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a55a:	8bfb      	ldrh	r3, [r7, #30]
 800a55c:	3b01      	subs	r3, #1
 800a55e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a560:	8bfb      	ldrh	r3, [r7, #30]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1ea      	bne.n	800a53c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a568:	4618      	mov	r0, r3
 800a56a:	372c      	adds	r7, #44	; 0x2c
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	785b      	ldrb	r3, [r3, #1]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d12c      	bne.n	800a5ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	db12      	blt.n	800a5c8 <USB_EPSetStall+0x54>
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00f      	beq.n	800a5c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	0151      	lsls	r1, r2, #5
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	440a      	add	r2, r1
 800a5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a5c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	0151      	lsls	r1, r2, #5
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	440a      	add	r2, r1
 800a5de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a5e6:	6013      	str	r3, [r2, #0]
 800a5e8:	e02b      	b.n	800a642 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	015a      	lsls	r2, r3, #5
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	db12      	blt.n	800a622 <USB_EPSetStall+0xae>
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00f      	beq.n	800a622 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	0151      	lsls	r1, r2, #5
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	440a      	add	r2, r1
 800a618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a61c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a620:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	0151      	lsls	r1, r2, #5
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	440a      	add	r2, r1
 800a638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a63c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a640:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	785b      	ldrb	r3, [r3, #1]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d128      	bne.n	800a6be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	015a      	lsls	r2, r3, #5
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	4413      	add	r3, r2
 800a674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	0151      	lsls	r1, r2, #5
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	440a      	add	r2, r1
 800a682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a686:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a68a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	791b      	ldrb	r3, [r3, #4]
 800a690:	2b03      	cmp	r3, #3
 800a692:	d003      	beq.n	800a69c <USB_EPClearStall+0x4c>
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	791b      	ldrb	r3, [r3, #4]
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d138      	bne.n	800a70e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	015a      	lsls	r2, r3, #5
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	0151      	lsls	r1, r2, #5
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	440a      	add	r2, r1
 800a6b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6ba:	6013      	str	r3, [r2, #0]
 800a6bc:	e027      	b.n	800a70e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	015a      	lsls	r2, r3, #5
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	0151      	lsls	r1, r2, #5
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	440a      	add	r2, r1
 800a6d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a6dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	791b      	ldrb	r3, [r3, #4]
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	d003      	beq.n	800a6ee <USB_EPClearStall+0x9e>
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	791b      	ldrb	r3, [r3, #4]
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d10f      	bne.n	800a70e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	015a      	lsls	r2, r3, #5
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	0151      	lsls	r1, r2, #5
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	440a      	add	r2, r1
 800a704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a70c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a73a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a73e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	011b      	lsls	r3, r3, #4
 800a74c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a750:	68f9      	ldr	r1, [r7, #12]
 800a752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a756:	4313      	orrs	r3, r2
 800a758:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a782:	f023 0303 	bic.w	r3, r3, #3
 800a786:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a796:	f023 0302 	bic.w	r3, r3, #2
 800a79a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a7c4:	f023 0303 	bic.w	r3, r3, #3
 800a7c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7d8:	f043 0302 	orr.w	r3, r3, #2
 800a7dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	4013      	ands	r3, r2
 800a802:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a804:	68fb      	ldr	r3, [r7, #12]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a812:	b480      	push	{r7}
 800a814:	b085      	sub	sp, #20
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	4013      	ands	r3, r2
 800a834:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	0c1b      	lsrs	r3, r3, #16
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a846:	b480      	push	{r7}
 800a848:	b085      	sub	sp, #20
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a862:	69db      	ldr	r3, [r3, #28]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	4013      	ands	r3, r2
 800a868:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	b29b      	uxth	r3, r3
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b085      	sub	sp, #20
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	460b      	mov	r3, r1
 800a884:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a88a:	78fb      	ldrb	r3, [r7, #3]
 800a88c:	015a      	lsls	r2, r3, #5
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	4413      	add	r3, r2
 800a892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a0:	695b      	ldr	r3, [r3, #20]
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a8a8:	68bb      	ldr	r3, [r7, #8]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b087      	sub	sp, #28
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	f003 030f 	and.w	r3, r3, #15
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8e6:	01db      	lsls	r3, r3, #7
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	015a      	lsls	r2, r3, #5
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	693a      	ldr	r2, [r7, #16]
 800a900:	4013      	ands	r3, r2
 800a902:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a904:	68bb      	ldr	r3, [r7, #8]
}
 800a906:	4618      	mov	r0, r3
 800a908:	371c      	adds	r7, #28
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	f003 0301 	and.w	r3, r3, #1
}
 800a922:	4618      	mov	r0, r3
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a92e:	b480      	push	{r7}
 800a930:	b085      	sub	sp, #20
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a948:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a94c:	f023 0307 	bic.w	r3, r3, #7
 800a950:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a964:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a974:	b480      	push	{r7}
 800a976:	b087      	sub	sp, #28
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	460b      	mov	r3, r1
 800a97e:	607a      	str	r2, [r7, #4]
 800a980:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	333c      	adds	r3, #60	; 0x3c
 800a98a:	3304      	adds	r3, #4
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	4a26      	ldr	r2, [pc, #152]	; (800aa2c <USB_EP0_OutStart+0xb8>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d90a      	bls.n	800a9ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9a8:	d101      	bne.n	800a9ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	e037      	b.n	800aa1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9dc:	f043 0318 	orr.w	r3, r3, #24
 800a9e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a9f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a9f6:	7afb      	ldrb	r3, [r7, #11]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d10f      	bne.n	800aa1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa02:	461a      	mov	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800aa1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	4f54300a 	.word	0x4f54300a

0800aa30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	3301      	adds	r3, #1
 800aa40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4a13      	ldr	r2, [pc, #76]	; (800aa94 <USB_CoreReset+0x64>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d901      	bls.n	800aa4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	e01b      	b.n	800aa86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	daf2      	bge.n	800aa3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa56:	2300      	movs	r3, #0
 800aa58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	f043 0201 	orr.w	r2, r3, #1
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4a09      	ldr	r2, [pc, #36]	; (800aa94 <USB_CoreReset+0x64>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d901      	bls.n	800aa78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa74:	2303      	movs	r3, #3
 800aa76:	e006      	b.n	800aa86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d0f0      	beq.n	800aa66 <USB_CoreReset+0x36>

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	00030d40 	.word	0x00030d40

0800aa98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aaa4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800aaa8:	f002 fc40 	bl	800d32c <USBD_static_malloc>
 800aaac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d109      	bne.n	800aac8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	32b0      	adds	r2, #176	; 0xb0
 800aabe:	2100      	movs	r1, #0
 800aac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aac4:	2302      	movs	r3, #2
 800aac6:	e0d4      	b.n	800ac72 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aac8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800aacc:	2100      	movs	r1, #0
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f002 fca8 	bl	800d424 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	32b0      	adds	r2, #176	; 0xb0
 800aade:	68f9      	ldr	r1, [r7, #12]
 800aae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	32b0      	adds	r2, #176	; 0xb0
 800aaee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	7c1b      	ldrb	r3, [r3, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d138      	bne.n	800ab72 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab00:	4b5e      	ldr	r3, [pc, #376]	; (800ac7c <USBD_CDC_Init+0x1e4>)
 800ab02:	7819      	ldrb	r1, [r3, #0]
 800ab04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab08:	2202      	movs	r2, #2
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f002 faeb 	bl	800d0e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab10:	4b5a      	ldr	r3, [pc, #360]	; (800ac7c <USBD_CDC_Init+0x1e4>)
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	f003 020f 	and.w	r2, r3, #15
 800ab18:	6879      	ldr	r1, [r7, #4]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4413      	add	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	440b      	add	r3, r1
 800ab24:	3324      	adds	r3, #36	; 0x24
 800ab26:	2201      	movs	r2, #1
 800ab28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab2a:	4b55      	ldr	r3, [pc, #340]	; (800ac80 <USBD_CDC_Init+0x1e8>)
 800ab2c:	7819      	ldrb	r1, [r3, #0]
 800ab2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab32:	2202      	movs	r2, #2
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f002 fad6 	bl	800d0e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab3a:	4b51      	ldr	r3, [pc, #324]	; (800ac80 <USBD_CDC_Init+0x1e8>)
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	f003 020f 	and.w	r2, r3, #15
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	4613      	mov	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	440b      	add	r3, r1
 800ab4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab52:	2201      	movs	r2, #1
 800ab54:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ab56:	4b4b      	ldr	r3, [pc, #300]	; (800ac84 <USBD_CDC_Init+0x1ec>)
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	f003 020f 	and.w	r2, r3, #15
 800ab5e:	6879      	ldr	r1, [r7, #4]
 800ab60:	4613      	mov	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	440b      	add	r3, r1
 800ab6a:	3326      	adds	r3, #38	; 0x26
 800ab6c:	2210      	movs	r2, #16
 800ab6e:	801a      	strh	r2, [r3, #0]
 800ab70:	e035      	b.n	800abde <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab72:	4b42      	ldr	r3, [pc, #264]	; (800ac7c <USBD_CDC_Init+0x1e4>)
 800ab74:	7819      	ldrb	r1, [r3, #0]
 800ab76:	2340      	movs	r3, #64	; 0x40
 800ab78:	2202      	movs	r2, #2
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f002 fab3 	bl	800d0e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab80:	4b3e      	ldr	r3, [pc, #248]	; (800ac7c <USBD_CDC_Init+0x1e4>)
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	f003 020f 	and.w	r2, r3, #15
 800ab88:	6879      	ldr	r1, [r7, #4]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	440b      	add	r3, r1
 800ab94:	3324      	adds	r3, #36	; 0x24
 800ab96:	2201      	movs	r2, #1
 800ab98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab9a:	4b39      	ldr	r3, [pc, #228]	; (800ac80 <USBD_CDC_Init+0x1e8>)
 800ab9c:	7819      	ldrb	r1, [r3, #0]
 800ab9e:	2340      	movs	r3, #64	; 0x40
 800aba0:	2202      	movs	r2, #2
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f002 fa9f 	bl	800d0e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aba8:	4b35      	ldr	r3, [pc, #212]	; (800ac80 <USBD_CDC_Init+0x1e8>)
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	f003 020f 	and.w	r2, r3, #15
 800abb0:	6879      	ldr	r1, [r7, #4]
 800abb2:	4613      	mov	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	440b      	add	r3, r1
 800abbc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800abc0:	2201      	movs	r2, #1
 800abc2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800abc4:	4b2f      	ldr	r3, [pc, #188]	; (800ac84 <USBD_CDC_Init+0x1ec>)
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	f003 020f 	and.w	r2, r3, #15
 800abcc:	6879      	ldr	r1, [r7, #4]
 800abce:	4613      	mov	r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	4413      	add	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	440b      	add	r3, r1
 800abd8:	3326      	adds	r3, #38	; 0x26
 800abda:	2210      	movs	r2, #16
 800abdc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800abde:	4b29      	ldr	r3, [pc, #164]	; (800ac84 <USBD_CDC_Init+0x1ec>)
 800abe0:	7819      	ldrb	r1, [r3, #0]
 800abe2:	2308      	movs	r3, #8
 800abe4:	2203      	movs	r2, #3
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f002 fa7d 	bl	800d0e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800abec:	4b25      	ldr	r3, [pc, #148]	; (800ac84 <USBD_CDC_Init+0x1ec>)
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	f003 020f 	and.w	r2, r3, #15
 800abf4:	6879      	ldr	r1, [r7, #4]
 800abf6:	4613      	mov	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	4413      	add	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	440b      	add	r3, r1
 800ac00:	3324      	adds	r3, #36	; 0x24
 800ac02:	2201      	movs	r2, #1
 800ac04:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	33b0      	adds	r3, #176	; 0xb0
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	4413      	add	r3, r2
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2200      	movs	r2, #0
 800ac26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d101      	bne.n	800ac40 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	e018      	b.n	800ac72 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	7c1b      	ldrb	r3, [r3, #16]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10a      	bne.n	800ac5e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac48:	4b0d      	ldr	r3, [pc, #52]	; (800ac80 <USBD_CDC_Init+0x1e8>)
 800ac4a:	7819      	ldrb	r1, [r3, #0]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f002 fb34 	bl	800d2c4 <USBD_LL_PrepareReceive>
 800ac5c:	e008      	b.n	800ac70 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac5e:	4b08      	ldr	r3, [pc, #32]	; (800ac80 <USBD_CDC_Init+0x1e8>)
 800ac60:	7819      	ldrb	r1, [r3, #0]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac68:	2340      	movs	r3, #64	; 0x40
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f002 fb2a 	bl	800d2c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	200000ab 	.word	0x200000ab
 800ac80:	200000ac 	.word	0x200000ac
 800ac84:	200000ad 	.word	0x200000ad

0800ac88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	460b      	mov	r3, r1
 800ac92:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ac94:	4b3a      	ldr	r3, [pc, #232]	; (800ad80 <USBD_CDC_DeInit+0xf8>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	4619      	mov	r1, r3
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f002 fa49 	bl	800d132 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aca0:	4b37      	ldr	r3, [pc, #220]	; (800ad80 <USBD_CDC_DeInit+0xf8>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 020f 	and.w	r2, r3, #15
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	440b      	add	r3, r1
 800acb4:	3324      	adds	r3, #36	; 0x24
 800acb6:	2200      	movs	r2, #0
 800acb8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800acba:	4b32      	ldr	r3, [pc, #200]	; (800ad84 <USBD_CDC_DeInit+0xfc>)
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f002 fa36 	bl	800d132 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800acc6:	4b2f      	ldr	r3, [pc, #188]	; (800ad84 <USBD_CDC_DeInit+0xfc>)
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	f003 020f 	and.w	r2, r3, #15
 800acce:	6879      	ldr	r1, [r7, #4]
 800acd0:	4613      	mov	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4413      	add	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	440b      	add	r3, r1
 800acda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acde:	2200      	movs	r2, #0
 800ace0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ace2:	4b29      	ldr	r3, [pc, #164]	; (800ad88 <USBD_CDC_DeInit+0x100>)
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f002 fa22 	bl	800d132 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800acee:	4b26      	ldr	r3, [pc, #152]	; (800ad88 <USBD_CDC_DeInit+0x100>)
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	f003 020f 	and.w	r2, r3, #15
 800acf6:	6879      	ldr	r1, [r7, #4]
 800acf8:	4613      	mov	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4413      	add	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	440b      	add	r3, r1
 800ad02:	3324      	adds	r3, #36	; 0x24
 800ad04:	2200      	movs	r2, #0
 800ad06:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ad08:	4b1f      	ldr	r3, [pc, #124]	; (800ad88 <USBD_CDC_DeInit+0x100>)
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	f003 020f 	and.w	r2, r3, #15
 800ad10:	6879      	ldr	r1, [r7, #4]
 800ad12:	4613      	mov	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	440b      	add	r3, r1
 800ad1c:	3326      	adds	r3, #38	; 0x26
 800ad1e:	2200      	movs	r2, #0
 800ad20:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	32b0      	adds	r2, #176	; 0xb0
 800ad2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d01f      	beq.n	800ad74 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	33b0      	adds	r3, #176	; 0xb0
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	32b0      	adds	r2, #176	; 0xb0
 800ad52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f002 faf6 	bl	800d348 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	32b0      	adds	r2, #176	; 0xb0
 800ad66:	2100      	movs	r1, #0
 800ad68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	200000ab 	.word	0x200000ab
 800ad84:	200000ac 	.word	0x200000ac
 800ad88:	200000ad 	.word	0x200000ad

0800ad8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	32b0      	adds	r2, #176	; 0xb0
 800ada0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ada6:	2300      	movs	r3, #0
 800ada8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800adae:	2300      	movs	r3, #0
 800adb0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d101      	bne.n	800adbc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800adb8:	2303      	movs	r3, #3
 800adba:	e0bf      	b.n	800af3c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d050      	beq.n	800ae6a <USBD_CDC_Setup+0xde>
 800adc8:	2b20      	cmp	r3, #32
 800adca:	f040 80af 	bne.w	800af2c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	88db      	ldrh	r3, [r3, #6]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d03a      	beq.n	800ae4c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	b25b      	sxtb	r3, r3
 800addc:	2b00      	cmp	r3, #0
 800adde:	da1b      	bge.n	800ae18 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	33b0      	adds	r3, #176	; 0xb0
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800adf6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	88d2      	ldrh	r2, [r2, #6]
 800adfc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	88db      	ldrh	r3, [r3, #6]
 800ae02:	2b07      	cmp	r3, #7
 800ae04:	bf28      	it	cs
 800ae06:	2307      	movcs	r3, #7
 800ae08:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	89fa      	ldrh	r2, [r7, #14]
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f001 fd43 	bl	800c89c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ae16:	e090      	b.n	800af3a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	785a      	ldrb	r2, [r3, #1]
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	88db      	ldrh	r3, [r3, #6]
 800ae26:	2b3f      	cmp	r3, #63	; 0x3f
 800ae28:	d803      	bhi.n	800ae32 <USBD_CDC_Setup+0xa6>
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	88db      	ldrh	r3, [r3, #6]
 800ae2e:	b2da      	uxtb	r2, r3
 800ae30:	e000      	b.n	800ae34 <USBD_CDC_Setup+0xa8>
 800ae32:	2240      	movs	r2, #64	; 0x40
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ae3a:	6939      	ldr	r1, [r7, #16]
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ae42:	461a      	mov	r2, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f001 fd55 	bl	800c8f4 <USBD_CtlPrepareRx>
      break;
 800ae4a:	e076      	b.n	800af3a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	33b0      	adds	r3, #176	; 0xb0
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	683a      	ldr	r2, [r7, #0]
 800ae60:	7850      	ldrb	r0, [r2, #1]
 800ae62:	2200      	movs	r2, #0
 800ae64:	6839      	ldr	r1, [r7, #0]
 800ae66:	4798      	blx	r3
      break;
 800ae68:	e067      	b.n	800af3a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	785b      	ldrb	r3, [r3, #1]
 800ae6e:	2b0b      	cmp	r3, #11
 800ae70:	d851      	bhi.n	800af16 <USBD_CDC_Setup+0x18a>
 800ae72:	a201      	add	r2, pc, #4	; (adr r2, 800ae78 <USBD_CDC_Setup+0xec>)
 800ae74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae78:	0800aea9 	.word	0x0800aea9
 800ae7c:	0800af25 	.word	0x0800af25
 800ae80:	0800af17 	.word	0x0800af17
 800ae84:	0800af17 	.word	0x0800af17
 800ae88:	0800af17 	.word	0x0800af17
 800ae8c:	0800af17 	.word	0x0800af17
 800ae90:	0800af17 	.word	0x0800af17
 800ae94:	0800af17 	.word	0x0800af17
 800ae98:	0800af17 	.word	0x0800af17
 800ae9c:	0800af17 	.word	0x0800af17
 800aea0:	0800aed3 	.word	0x0800aed3
 800aea4:	0800aefd 	.word	0x0800aefd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2b03      	cmp	r3, #3
 800aeb2:	d107      	bne.n	800aec4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aeb4:	f107 030a 	add.w	r3, r7, #10
 800aeb8:	2202      	movs	r2, #2
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f001 fced 	bl	800c89c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aec2:	e032      	b.n	800af2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f001 fc77 	bl	800c7ba <USBD_CtlError>
            ret = USBD_FAIL;
 800aecc:	2303      	movs	r3, #3
 800aece:	75fb      	strb	r3, [r7, #23]
          break;
 800aed0:	e02b      	b.n	800af2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	2b03      	cmp	r3, #3
 800aedc:	d107      	bne.n	800aeee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aede:	f107 030d 	add.w	r3, r7, #13
 800aee2:	2201      	movs	r2, #1
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f001 fcd8 	bl	800c89c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aeec:	e01d      	b.n	800af2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f001 fc62 	bl	800c7ba <USBD_CtlError>
            ret = USBD_FAIL;
 800aef6:	2303      	movs	r3, #3
 800aef8:	75fb      	strb	r3, [r7, #23]
          break;
 800aefa:	e016      	b.n	800af2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af02:	b2db      	uxtb	r3, r3
 800af04:	2b03      	cmp	r3, #3
 800af06:	d00f      	beq.n	800af28 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f001 fc55 	bl	800c7ba <USBD_CtlError>
            ret = USBD_FAIL;
 800af10:	2303      	movs	r3, #3
 800af12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af14:	e008      	b.n	800af28 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f001 fc4e 	bl	800c7ba <USBD_CtlError>
          ret = USBD_FAIL;
 800af1e:	2303      	movs	r3, #3
 800af20:	75fb      	strb	r3, [r7, #23]
          break;
 800af22:	e002      	b.n	800af2a <USBD_CDC_Setup+0x19e>
          break;
 800af24:	bf00      	nop
 800af26:	e008      	b.n	800af3a <USBD_CDC_Setup+0x1ae>
          break;
 800af28:	bf00      	nop
      }
      break;
 800af2a:	e006      	b.n	800af3a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f001 fc43 	bl	800c7ba <USBD_CtlError>
      ret = USBD_FAIL;
 800af34:	2303      	movs	r3, #3
 800af36:	75fb      	strb	r3, [r7, #23]
      break;
 800af38:	bf00      	nop
  }

  return (uint8_t)ret;
 800af3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3718      	adds	r7, #24
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	460b      	mov	r3, r1
 800af4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	32b0      	adds	r2, #176	; 0xb0
 800af62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e065      	b.n	800b03a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	32b0      	adds	r2, #176	; 0xb0
 800af78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af7e:	78fb      	ldrb	r3, [r7, #3]
 800af80:	f003 020f 	and.w	r2, r3, #15
 800af84:	6879      	ldr	r1, [r7, #4]
 800af86:	4613      	mov	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4413      	add	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	440b      	add	r3, r1
 800af90:	3318      	adds	r3, #24
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d02f      	beq.n	800aff8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800af98:	78fb      	ldrb	r3, [r7, #3]
 800af9a:	f003 020f 	and.w	r2, r3, #15
 800af9e:	6879      	ldr	r1, [r7, #4]
 800afa0:	4613      	mov	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	4413      	add	r3, r2
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	440b      	add	r3, r1
 800afaa:	3318      	adds	r3, #24
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	78fb      	ldrb	r3, [r7, #3]
 800afb0:	f003 010f 	and.w	r1, r3, #15
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	460b      	mov	r3, r1
 800afb8:	00db      	lsls	r3, r3, #3
 800afba:	440b      	add	r3, r1
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4403      	add	r3, r0
 800afc0:	3348      	adds	r3, #72	; 0x48
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	fbb2 f1f3 	udiv	r1, r2, r3
 800afc8:	fb01 f303 	mul.w	r3, r1, r3
 800afcc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d112      	bne.n	800aff8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800afd2:	78fb      	ldrb	r3, [r7, #3]
 800afd4:	f003 020f 	and.w	r2, r3, #15
 800afd8:	6879      	ldr	r1, [r7, #4]
 800afda:	4613      	mov	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	440b      	add	r3, r1
 800afe4:	3318      	adds	r3, #24
 800afe6:	2200      	movs	r2, #0
 800afe8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800afea:	78f9      	ldrb	r1, [r7, #3]
 800afec:	2300      	movs	r3, #0
 800afee:	2200      	movs	r2, #0
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f002 f946 	bl	800d282 <USBD_LL_Transmit>
 800aff6:	e01f      	b.n	800b038 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	2200      	movs	r2, #0
 800affc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	33b0      	adds	r3, #176	; 0xb0
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4413      	add	r3, r2
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d010      	beq.n	800b038 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	33b0      	adds	r3, #176	; 0xb0
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	4413      	add	r3, r2
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b02e:	68ba      	ldr	r2, [r7, #8]
 800b030:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b034:	78fa      	ldrb	r2, [r7, #3]
 800b036:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b084      	sub	sp, #16
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	460b      	mov	r3, r1
 800b04c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	32b0      	adds	r2, #176	; 0xb0
 800b058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	32b0      	adds	r2, #176	; 0xb0
 800b068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b070:	2303      	movs	r3, #3
 800b072:	e01a      	b.n	800b0aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f002 f944 	bl	800d306 <USBD_LL_GetRxDataSize>
 800b07e:	4602      	mov	r2, r0
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	33b0      	adds	r3, #176	; 0xb0
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b084      	sub	sp, #16
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	32b0      	adds	r2, #176	; 0xb0
 800b0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d101      	bne.n	800b0d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e025      	b.n	800b120 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	33b0      	adds	r3, #176	; 0xb0
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4413      	add	r3, r2
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d01a      	beq.n	800b11e <USBD_CDC_EP0_RxReady+0x6c>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b0ee:	2bff      	cmp	r3, #255	; 0xff
 800b0f0:	d015      	beq.n	800b11e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	33b0      	adds	r3, #176	; 0xb0
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	4413      	add	r3, r2
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b10a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b112:	b292      	uxth	r2, r2
 800b114:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	22ff      	movs	r2, #255	; 0xff
 800b11a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b130:	2182      	movs	r1, #130	; 0x82
 800b132:	4818      	ldr	r0, [pc, #96]	; (800b194 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b134:	f000 fd09 	bl	800bb4a <USBD_GetEpDesc>
 800b138:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b13a:	2101      	movs	r1, #1
 800b13c:	4815      	ldr	r0, [pc, #84]	; (800b194 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b13e:	f000 fd04 	bl	800bb4a <USBD_GetEpDesc>
 800b142:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b144:	2181      	movs	r1, #129	; 0x81
 800b146:	4813      	ldr	r0, [pc, #76]	; (800b194 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b148:	f000 fcff 	bl	800bb4a <USBD_GetEpDesc>
 800b14c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	2210      	movs	r2, #16
 800b158:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d006      	beq.n	800b16e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	2200      	movs	r2, #0
 800b164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b168:	711a      	strb	r2, [r3, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d006      	beq.n	800b182 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b17c:	711a      	strb	r2, [r3, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2243      	movs	r2, #67	; 0x43
 800b186:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b188:	4b02      	ldr	r3, [pc, #8]	; (800b194 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000068 	.word	0x20000068

0800b198 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1a0:	2182      	movs	r1, #130	; 0x82
 800b1a2:	4818      	ldr	r0, [pc, #96]	; (800b204 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1a4:	f000 fcd1 	bl	800bb4a <USBD_GetEpDesc>
 800b1a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	4815      	ldr	r0, [pc, #84]	; (800b204 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1ae:	f000 fccc 	bl	800bb4a <USBD_GetEpDesc>
 800b1b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1b4:	2181      	movs	r1, #129	; 0x81
 800b1b6:	4813      	ldr	r0, [pc, #76]	; (800b204 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1b8:	f000 fcc7 	bl	800bb4a <USBD_GetEpDesc>
 800b1bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d002      	beq.n	800b1ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	2210      	movs	r2, #16
 800b1c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d006      	beq.n	800b1de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	711a      	strb	r2, [r3, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f042 0202 	orr.w	r2, r2, #2
 800b1dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d006      	beq.n	800b1f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	711a      	strb	r2, [r3, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f042 0202 	orr.w	r2, r2, #2
 800b1f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2243      	movs	r2, #67	; 0x43
 800b1f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1f8:	4b02      	ldr	r3, [pc, #8]	; (800b204 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20000068 	.word	0x20000068

0800b208 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b210:	2182      	movs	r1, #130	; 0x82
 800b212:	4818      	ldr	r0, [pc, #96]	; (800b274 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b214:	f000 fc99 	bl	800bb4a <USBD_GetEpDesc>
 800b218:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b21a:	2101      	movs	r1, #1
 800b21c:	4815      	ldr	r0, [pc, #84]	; (800b274 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b21e:	f000 fc94 	bl	800bb4a <USBD_GetEpDesc>
 800b222:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b224:	2181      	movs	r1, #129	; 0x81
 800b226:	4813      	ldr	r0, [pc, #76]	; (800b274 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b228:	f000 fc8f 	bl	800bb4a <USBD_GetEpDesc>
 800b22c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d002      	beq.n	800b23a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2210      	movs	r2, #16
 800b238:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d006      	beq.n	800b24e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	2200      	movs	r2, #0
 800b244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b248:	711a      	strb	r2, [r3, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d006      	beq.n	800b262 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b25c:	711a      	strb	r2, [r3, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2243      	movs	r2, #67	; 0x43
 800b266:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b268:	4b02      	ldr	r3, [pc, #8]	; (800b274 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20000068 	.word	0x20000068

0800b278 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	220a      	movs	r2, #10
 800b284:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b286:	4b03      	ldr	r3, [pc, #12]	; (800b294 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b288:	4618      	mov	r0, r3
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	20000024 	.word	0x20000024

0800b298 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	e009      	b.n	800b2c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	33b0      	adds	r3, #176	; 0xb0
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	683a      	ldr	r2, [r7, #0]
 800b2bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b087      	sub	sp, #28
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	32b0      	adds	r2, #176	; 0xb0
 800b2e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2e6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e008      	b.n	800b304 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	371c      	adds	r7, #28
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	32b0      	adds	r2, #176	; 0xb0
 800b324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b328:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b330:	2303      	movs	r3, #3
 800b332:	e004      	b.n	800b33e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3714      	adds	r7, #20
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
	...

0800b34c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	32b0      	adds	r2, #176	; 0xb0
 800b35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b362:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	32b0      	adds	r2, #176	; 0xb0
 800b36e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b376:	2303      	movs	r3, #3
 800b378:	e018      	b.n	800b3ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	7c1b      	ldrb	r3, [r3, #16]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10a      	bne.n	800b398 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b382:	4b0c      	ldr	r3, [pc, #48]	; (800b3b4 <USBD_CDC_ReceivePacket+0x68>)
 800b384:	7819      	ldrb	r1, [r3, #0]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b38c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f001 ff97 	bl	800d2c4 <USBD_LL_PrepareReceive>
 800b396:	e008      	b.n	800b3aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b398:	4b06      	ldr	r3, [pc, #24]	; (800b3b4 <USBD_CDC_ReceivePacket+0x68>)
 800b39a:	7819      	ldrb	r1, [r3, #0]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3a2:	2340      	movs	r3, #64	; 0x40
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f001 ff8d 	bl	800d2c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	200000ac 	.word	0x200000ac

0800b3b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d101      	bne.n	800b3d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	e01f      	b.n	800b410 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d003      	beq.n	800b3f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	79fa      	ldrb	r2, [r7, #7]
 800b402:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f001 fe01 	bl	800d00c <USBD_LL_Init>
 800b40a:	4603      	mov	r3, r0
 800b40c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b40e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b422:	2300      	movs	r3, #0
 800b424:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d101      	bne.n	800b430 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b42c:	2303      	movs	r3, #3
 800b42e:	e025      	b.n	800b47c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	32ae      	adds	r2, #174	; 0xae
 800b442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00f      	beq.n	800b46c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	32ae      	adds	r2, #174	; 0xae
 800b456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45c:	f107 020e 	add.w	r2, r7, #14
 800b460:	4610      	mov	r0, r2
 800b462:	4798      	blx	r3
 800b464:	4602      	mov	r2, r0
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f001 fe0f 	bl	800d0b0 <USBD_LL_Start>
 800b492:	4603      	mov	r3, r0
}
 800b494:	4618      	mov	r0, r3
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	370c      	adds	r7, #12
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b084      	sub	sp, #16
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d009      	beq.n	800b4e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	78fa      	ldrb	r2, [r7, #3]
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	4798      	blx	r3
 800b4dc:	4603      	mov	r3, r0
 800b4de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	78fa      	ldrb	r2, [r7, #3]
 800b504:	4611      	mov	r1, r2
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	4798      	blx	r3
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b510:	2303      	movs	r3, #3
 800b512:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b514:	7bfb      	ldrb	r3, [r7, #15]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b084      	sub	sp, #16
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b52e:	6839      	ldr	r1, [r7, #0]
 800b530:	4618      	mov	r0, r3
 800b532:	f001 f908 	bl	800c746 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2201      	movs	r2, #1
 800b53a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b544:	461a      	mov	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b552:	f003 031f 	and.w	r3, r3, #31
 800b556:	2b02      	cmp	r3, #2
 800b558:	d01a      	beq.n	800b590 <USBD_LL_SetupStage+0x72>
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d822      	bhi.n	800b5a4 <USBD_LL_SetupStage+0x86>
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d002      	beq.n	800b568 <USBD_LL_SetupStage+0x4a>
 800b562:	2b01      	cmp	r3, #1
 800b564:	d00a      	beq.n	800b57c <USBD_LL_SetupStage+0x5e>
 800b566:	e01d      	b.n	800b5a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b56e:	4619      	mov	r1, r3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fb5f 	bl	800bc34 <USBD_StdDevReq>
 800b576:	4603      	mov	r3, r0
 800b578:	73fb      	strb	r3, [r7, #15]
      break;
 800b57a:	e020      	b.n	800b5be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b582:	4619      	mov	r1, r3
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fbc7 	bl	800bd18 <USBD_StdItfReq>
 800b58a:	4603      	mov	r3, r0
 800b58c:	73fb      	strb	r3, [r7, #15]
      break;
 800b58e:	e016      	b.n	800b5be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b596:	4619      	mov	r1, r3
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 fc29 	bl	800bdf0 <USBD_StdEPReq>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b5a2:	e00c      	b.n	800b5be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b5aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f001 fddc 	bl	800d170 <USBD_LL_StallEP>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b5bc:	bf00      	nop
  }

  return ret;
 800b5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	607a      	str	r2, [r7, #4]
 800b5d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b5da:	7afb      	ldrb	r3, [r7, #11]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d16e      	bne.n	800b6be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b5e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	f040 8098 	bne.w	800b724 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	689a      	ldr	r2, [r3, #8]
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d913      	bls.n	800b628 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	689a      	ldr	r2, [r3, #8]
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	1ad2      	subs	r2, r2, r3
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	68da      	ldr	r2, [r3, #12]
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	4293      	cmp	r3, r2
 800b618:	bf28      	it	cs
 800b61a:	4613      	movcs	r3, r2
 800b61c:	461a      	mov	r2, r3
 800b61e:	6879      	ldr	r1, [r7, #4]
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f001 f984 	bl	800c92e <USBD_CtlContinueRx>
 800b626:	e07d      	b.n	800b724 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b62e:	f003 031f 	and.w	r3, r3, #31
 800b632:	2b02      	cmp	r3, #2
 800b634:	d014      	beq.n	800b660 <USBD_LL_DataOutStage+0x98>
 800b636:	2b02      	cmp	r3, #2
 800b638:	d81d      	bhi.n	800b676 <USBD_LL_DataOutStage+0xae>
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d002      	beq.n	800b644 <USBD_LL_DataOutStage+0x7c>
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d003      	beq.n	800b64a <USBD_LL_DataOutStage+0x82>
 800b642:	e018      	b.n	800b676 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b644:	2300      	movs	r3, #0
 800b646:	75bb      	strb	r3, [r7, #22]
            break;
 800b648:	e018      	b.n	800b67c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b650:	b2db      	uxtb	r3, r3
 800b652:	4619      	mov	r1, r3
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f000 fa5e 	bl	800bb16 <USBD_CoreFindIF>
 800b65a:	4603      	mov	r3, r0
 800b65c:	75bb      	strb	r3, [r7, #22]
            break;
 800b65e:	e00d      	b.n	800b67c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b666:	b2db      	uxtb	r3, r3
 800b668:	4619      	mov	r1, r3
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f000 fa60 	bl	800bb30 <USBD_CoreFindEP>
 800b670:	4603      	mov	r3, r0
 800b672:	75bb      	strb	r3, [r7, #22]
            break;
 800b674:	e002      	b.n	800b67c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b676:	2300      	movs	r3, #0
 800b678:	75bb      	strb	r3, [r7, #22]
            break;
 800b67a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b67c:	7dbb      	ldrb	r3, [r7, #22]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d119      	bne.n	800b6b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	2b03      	cmp	r3, #3
 800b68c:	d113      	bne.n	800b6b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b68e:	7dba      	ldrb	r2, [r7, #22]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	32ae      	adds	r2, #174	; 0xae
 800b694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00b      	beq.n	800b6b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b69e:	7dba      	ldrb	r2, [r7, #22]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b6a6:	7dba      	ldrb	r2, [r7, #22]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	32ae      	adds	r2, #174	; 0xae
 800b6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f001 f94a 	bl	800c950 <USBD_CtlSendStatus>
 800b6bc:	e032      	b.n	800b724 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b6be:	7afb      	ldrb	r3, [r7, #11]
 800b6c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f000 fa31 	bl	800bb30 <USBD_CoreFindEP>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6d2:	7dbb      	ldrb	r3, [r7, #22]
 800b6d4:	2bff      	cmp	r3, #255	; 0xff
 800b6d6:	d025      	beq.n	800b724 <USBD_LL_DataOutStage+0x15c>
 800b6d8:	7dbb      	ldrb	r3, [r7, #22]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d122      	bne.n	800b724 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b03      	cmp	r3, #3
 800b6e8:	d117      	bne.n	800b71a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b6ea:	7dba      	ldrb	r2, [r7, #22]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	32ae      	adds	r2, #174	; 0xae
 800b6f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6f4:	699b      	ldr	r3, [r3, #24]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00f      	beq.n	800b71a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b6fa:	7dba      	ldrb	r2, [r7, #22]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b702:	7dba      	ldrb	r2, [r7, #22]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	32ae      	adds	r2, #174	; 0xae
 800b708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	7afa      	ldrb	r2, [r7, #11]
 800b710:	4611      	mov	r1, r2
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	4798      	blx	r3
 800b716:	4603      	mov	r3, r0
 800b718:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b71a:	7dfb      	ldrb	r3, [r7, #23]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b720:	7dfb      	ldrb	r3, [r7, #23]
 800b722:	e000      	b.n	800b726 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b086      	sub	sp, #24
 800b732:	af00      	add	r7, sp, #0
 800b734:	60f8      	str	r0, [r7, #12]
 800b736:	460b      	mov	r3, r1
 800b738:	607a      	str	r2, [r7, #4]
 800b73a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b73c:	7afb      	ldrb	r3, [r7, #11]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d16f      	bne.n	800b822 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	3314      	adds	r3, #20
 800b746:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d15a      	bne.n	800b808 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	689a      	ldr	r2, [r3, #8]
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d914      	bls.n	800b788 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	689a      	ldr	r2, [r3, #8]
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	1ad2      	subs	r2, r2, r3
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	461a      	mov	r2, r3
 800b772:	6879      	ldr	r1, [r7, #4]
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f001 f8ac 	bl	800c8d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b77a:	2300      	movs	r3, #0
 800b77c:	2200      	movs	r2, #0
 800b77e:	2100      	movs	r1, #0
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f001 fd9f 	bl	800d2c4 <USBD_LL_PrepareReceive>
 800b786:	e03f      	b.n	800b808 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	68da      	ldr	r2, [r3, #12]
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	429a      	cmp	r2, r3
 800b792:	d11c      	bne.n	800b7ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	685a      	ldr	r2, [r3, #4]
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d316      	bcc.n	800b7ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	685a      	ldr	r2, [r3, #4]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d20f      	bcs.n	800b7ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f001 f88d 	bl	800c8d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f001 fd7c 	bl	800d2c4 <USBD_LL_PrepareReceive>
 800b7cc:	e01c      	b.n	800b808 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d10f      	bne.n	800b7fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d009      	beq.n	800b7fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7fa:	2180      	movs	r1, #128	; 0x80
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f001 fcb7 	bl	800d170 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f001 f8b7 	bl	800c976 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d03a      	beq.n	800b888 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f7ff fe42 	bl	800b49c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b820:	e032      	b.n	800b888 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b822:	7afb      	ldrb	r3, [r7, #11]
 800b824:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	4619      	mov	r1, r3
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f000 f97f 	bl	800bb30 <USBD_CoreFindEP>
 800b832:	4603      	mov	r3, r0
 800b834:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b836:	7dfb      	ldrb	r3, [r7, #23]
 800b838:	2bff      	cmp	r3, #255	; 0xff
 800b83a:	d025      	beq.n	800b888 <USBD_LL_DataInStage+0x15a>
 800b83c:	7dfb      	ldrb	r3, [r7, #23]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d122      	bne.n	800b888 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	2b03      	cmp	r3, #3
 800b84c:	d11c      	bne.n	800b888 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b84e:	7dfa      	ldrb	r2, [r7, #23]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	32ae      	adds	r2, #174	; 0xae
 800b854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b858:	695b      	ldr	r3, [r3, #20]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d014      	beq.n	800b888 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b85e:	7dfa      	ldrb	r2, [r7, #23]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b866:	7dfa      	ldrb	r2, [r7, #23]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	32ae      	adds	r2, #174	; 0xae
 800b86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	7afa      	ldrb	r2, [r7, #11]
 800b874:	4611      	mov	r1, r2
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	4798      	blx	r3
 800b87a:	4603      	mov	r3, r0
 800b87c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b87e:	7dbb      	ldrb	r3, [r7, #22]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b884:	7dbb      	ldrb	r3, [r7, #22]
 800b886:	e000      	b.n	800b88a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3718      	adds	r7, #24
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b084      	sub	sp, #16
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b89a:	2300      	movs	r3, #0
 800b89c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d014      	beq.n	800b8f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00e      	beq.n	800b8f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	6852      	ldr	r2, [r2, #4]
 800b8e6:	b2d2      	uxtb	r2, r2
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	4798      	blx	r3
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8f8:	2340      	movs	r3, #64	; 0x40
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f001 fbf1 	bl	800d0e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2240      	movs	r2, #64	; 0x40
 800b910:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b914:	2340      	movs	r3, #64	; 0x40
 800b916:	2200      	movs	r2, #0
 800b918:	2180      	movs	r1, #128	; 0x80
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f001 fbe3 	bl	800d0e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2240      	movs	r2, #64	; 0x40
 800b92a:	621a      	str	r2, [r3, #32]

  return ret;
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b936:	b480      	push	{r7}
 800b938:	b083      	sub	sp, #12
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
 800b93e:	460b      	mov	r3, r1
 800b940:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	78fa      	ldrb	r2, [r7, #3]
 800b946:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	370c      	adds	r7, #12
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b956:	b480      	push	{r7}
 800b958:	b083      	sub	sp, #12
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b964:	b2da      	uxtb	r2, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2204      	movs	r2, #4
 800b970:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b982:	b480      	push	{r7}
 800b984:	b083      	sub	sp, #12
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b04      	cmp	r3, #4
 800b994:	d106      	bne.n	800b9a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b99c:	b2da      	uxtb	r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	370c      	adds	r7, #12
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b082      	sub	sp, #8
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b03      	cmp	r3, #3
 800b9c4:	d110      	bne.n	800b9e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00b      	beq.n	800b9e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d6:	69db      	ldr	r3, [r3, #28]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d005      	beq.n	800b9e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9e2:	69db      	ldr	r3, [r3, #28]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b082      	sub	sp, #8
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	32ae      	adds	r2, #174	; 0xae
 800ba08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e01c      	b.n	800ba4e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	2b03      	cmp	r3, #3
 800ba1e:	d115      	bne.n	800ba4c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	32ae      	adds	r2, #174	; 0xae
 800ba2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2e:	6a1b      	ldr	r3, [r3, #32]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00b      	beq.n	800ba4c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	32ae      	adds	r2, #174	; 0xae
 800ba3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba42:	6a1b      	ldr	r3, [r3, #32]
 800ba44:	78fa      	ldrb	r2, [r7, #3]
 800ba46:	4611      	mov	r1, r2
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b082      	sub	sp, #8
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	460b      	mov	r3, r1
 800ba60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	32ae      	adds	r2, #174	; 0xae
 800ba6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d101      	bne.n	800ba78 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba74:	2303      	movs	r3, #3
 800ba76:	e01c      	b.n	800bab2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d115      	bne.n	800bab0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	32ae      	adds	r2, #174	; 0xae
 800ba8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00b      	beq.n	800bab0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	32ae      	adds	r2, #174	; 0xae
 800baa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa8:	78fa      	ldrb	r2, [r7, #3]
 800baaa:	4611      	mov	r1, r2
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800baba:	b480      	push	{r7}
 800babc:	b083      	sub	sp, #12
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00e      	beq.n	800bb0c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	6852      	ldr	r2, [r2, #4]
 800bafa:	b2d2      	uxtb	r2, r2
 800bafc:	4611      	mov	r1, r2
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	4798      	blx	r3
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b083      	sub	sp, #12
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	460b      	mov	r3, r1
 800bb20:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb22:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb3c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	370c      	adds	r7, #12
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b086      	sub	sp, #24
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
 800bb52:	460b      	mov	r3, r1
 800bb54:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	885b      	ldrh	r3, [r3, #2]
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d920      	bls.n	800bbb4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bb7a:	e013      	b.n	800bba4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bb7c:	f107 030a 	add.w	r3, r7, #10
 800bb80:	4619      	mov	r1, r3
 800bb82:	6978      	ldr	r0, [r7, #20]
 800bb84:	f000 f81b 	bl	800bbbe <USBD_GetNextDesc>
 800bb88:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	785b      	ldrb	r3, [r3, #1]
 800bb8e:	2b05      	cmp	r3, #5
 800bb90:	d108      	bne.n	800bba4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	789b      	ldrb	r3, [r3, #2]
 800bb9a:	78fa      	ldrb	r2, [r7, #3]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d008      	beq.n	800bbb2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bba0:	2300      	movs	r3, #0
 800bba2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	885b      	ldrh	r3, [r3, #2]
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	897b      	ldrh	r3, [r7, #10]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d8e5      	bhi.n	800bb7c <USBD_GetEpDesc+0x32>
 800bbb0:	e000      	b.n	800bbb4 <USBD_GetEpDesc+0x6a>
          break;
 800bbb2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bbb4:	693b      	ldr	r3, [r7, #16]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3718      	adds	r7, #24
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b085      	sub	sp, #20
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	881a      	ldrh	r2, [r3, #0]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	4413      	add	r3, r2
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bbea:	68fb      	ldr	r3, [r7, #12]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b087      	sub	sp, #28
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bc16:	8a3b      	ldrh	r3, [r7, #16]
 800bc18:	021b      	lsls	r3, r3, #8
 800bc1a:	b21a      	sxth	r2, r3
 800bc1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	b21b      	sxth	r3, r3
 800bc24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bc26:	89fb      	ldrh	r3, [r7, #14]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	371c      	adds	r7, #28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc4a:	2b40      	cmp	r3, #64	; 0x40
 800bc4c:	d005      	beq.n	800bc5a <USBD_StdDevReq+0x26>
 800bc4e:	2b40      	cmp	r3, #64	; 0x40
 800bc50:	d857      	bhi.n	800bd02 <USBD_StdDevReq+0xce>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00f      	beq.n	800bc76 <USBD_StdDevReq+0x42>
 800bc56:	2b20      	cmp	r3, #32
 800bc58:	d153      	bne.n	800bd02 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	32ae      	adds	r2, #174	; 0xae
 800bc64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	6839      	ldr	r1, [r7, #0]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	4798      	blx	r3
 800bc70:	4603      	mov	r3, r0
 800bc72:	73fb      	strb	r3, [r7, #15]
      break;
 800bc74:	e04a      	b.n	800bd0c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	785b      	ldrb	r3, [r3, #1]
 800bc7a:	2b09      	cmp	r3, #9
 800bc7c:	d83b      	bhi.n	800bcf6 <USBD_StdDevReq+0xc2>
 800bc7e:	a201      	add	r2, pc, #4	; (adr r2, 800bc84 <USBD_StdDevReq+0x50>)
 800bc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc84:	0800bcd9 	.word	0x0800bcd9
 800bc88:	0800bced 	.word	0x0800bced
 800bc8c:	0800bcf7 	.word	0x0800bcf7
 800bc90:	0800bce3 	.word	0x0800bce3
 800bc94:	0800bcf7 	.word	0x0800bcf7
 800bc98:	0800bcb7 	.word	0x0800bcb7
 800bc9c:	0800bcad 	.word	0x0800bcad
 800bca0:	0800bcf7 	.word	0x0800bcf7
 800bca4:	0800bccf 	.word	0x0800bccf
 800bca8:	0800bcc1 	.word	0x0800bcc1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fa3c 	bl	800c12c <USBD_GetDescriptor>
          break;
 800bcb4:	e024      	b.n	800bd00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bcb6:	6839      	ldr	r1, [r7, #0]
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 fba1 	bl	800c400 <USBD_SetAddress>
          break;
 800bcbe:	e01f      	b.n	800bd00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fbe0 	bl	800c488 <USBD_SetConfig>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	73fb      	strb	r3, [r7, #15]
          break;
 800bccc:	e018      	b.n	800bd00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bcce:	6839      	ldr	r1, [r7, #0]
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fc83 	bl	800c5dc <USBD_GetConfig>
          break;
 800bcd6:	e013      	b.n	800bd00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fcb4 	bl	800c648 <USBD_GetStatus>
          break;
 800bce0:	e00e      	b.n	800bd00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fce3 	bl	800c6b0 <USBD_SetFeature>
          break;
 800bcea:	e009      	b.n	800bd00 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bcec:	6839      	ldr	r1, [r7, #0]
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fd07 	bl	800c702 <USBD_ClrFeature>
          break;
 800bcf4:	e004      	b.n	800bd00 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bcf6:	6839      	ldr	r1, [r7, #0]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fd5e 	bl	800c7ba <USBD_CtlError>
          break;
 800bcfe:	bf00      	nop
      }
      break;
 800bd00:	e004      	b.n	800bd0c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 fd58 	bl	800c7ba <USBD_CtlError>
      break;
 800bd0a:	bf00      	nop
  }

  return ret;
 800bd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop

0800bd18 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd2e:	2b40      	cmp	r3, #64	; 0x40
 800bd30:	d005      	beq.n	800bd3e <USBD_StdItfReq+0x26>
 800bd32:	2b40      	cmp	r3, #64	; 0x40
 800bd34:	d852      	bhi.n	800bddc <USBD_StdItfReq+0xc4>
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d001      	beq.n	800bd3e <USBD_StdItfReq+0x26>
 800bd3a:	2b20      	cmp	r3, #32
 800bd3c:	d14e      	bne.n	800bddc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	3b01      	subs	r3, #1
 800bd48:	2b02      	cmp	r3, #2
 800bd4a:	d840      	bhi.n	800bdce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	889b      	ldrh	r3, [r3, #4]
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d836      	bhi.n	800bdc4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	889b      	ldrh	r3, [r3, #4]
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7ff fed9 	bl	800bb16 <USBD_CoreFindIF>
 800bd64:	4603      	mov	r3, r0
 800bd66:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd68:	7bbb      	ldrb	r3, [r7, #14]
 800bd6a:	2bff      	cmp	r3, #255	; 0xff
 800bd6c:	d01d      	beq.n	800bdaa <USBD_StdItfReq+0x92>
 800bd6e:	7bbb      	ldrb	r3, [r7, #14]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d11a      	bne.n	800bdaa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bd74:	7bba      	ldrb	r2, [r7, #14]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	32ae      	adds	r2, #174	; 0xae
 800bd7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00f      	beq.n	800bda4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bd84:	7bba      	ldrb	r2, [r7, #14]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bd8c:	7bba      	ldrb	r2, [r7, #14]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	32ae      	adds	r2, #174	; 0xae
 800bd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	6839      	ldr	r1, [r7, #0]
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	4798      	blx	r3
 800bd9e:	4603      	mov	r3, r0
 800bda0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bda2:	e004      	b.n	800bdae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bda4:	2303      	movs	r3, #3
 800bda6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bda8:	e001      	b.n	800bdae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bdaa:	2303      	movs	r3, #3
 800bdac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	88db      	ldrh	r3, [r3, #6]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d110      	bne.n	800bdd8 <USBD_StdItfReq+0xc0>
 800bdb6:	7bfb      	ldrb	r3, [r7, #15]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10d      	bne.n	800bdd8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fdc7 	bl	800c950 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bdc2:	e009      	b.n	800bdd8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bdc4:	6839      	ldr	r1, [r7, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fcf7 	bl	800c7ba <USBD_CtlError>
          break;
 800bdcc:	e004      	b.n	800bdd8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bdce:	6839      	ldr	r1, [r7, #0]
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f000 fcf2 	bl	800c7ba <USBD_CtlError>
          break;
 800bdd6:	e000      	b.n	800bdda <USBD_StdItfReq+0xc2>
          break;
 800bdd8:	bf00      	nop
      }
      break;
 800bdda:	e004      	b.n	800bde6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fceb 	bl	800c7ba <USBD_CtlError>
      break;
 800bde4:	bf00      	nop
  }

  return ret;
 800bde6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	889b      	ldrh	r3, [r3, #4]
 800be02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be0c:	2b40      	cmp	r3, #64	; 0x40
 800be0e:	d007      	beq.n	800be20 <USBD_StdEPReq+0x30>
 800be10:	2b40      	cmp	r3, #64	; 0x40
 800be12:	f200 817f 	bhi.w	800c114 <USBD_StdEPReq+0x324>
 800be16:	2b00      	cmp	r3, #0
 800be18:	d02a      	beq.n	800be70 <USBD_StdEPReq+0x80>
 800be1a:	2b20      	cmp	r3, #32
 800be1c:	f040 817a 	bne.w	800c114 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800be20:	7bbb      	ldrb	r3, [r7, #14]
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7ff fe83 	bl	800bb30 <USBD_CoreFindEP>
 800be2a:	4603      	mov	r3, r0
 800be2c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be2e:	7b7b      	ldrb	r3, [r7, #13]
 800be30:	2bff      	cmp	r3, #255	; 0xff
 800be32:	f000 8174 	beq.w	800c11e <USBD_StdEPReq+0x32e>
 800be36:	7b7b      	ldrb	r3, [r7, #13]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f040 8170 	bne.w	800c11e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800be3e:	7b7a      	ldrb	r2, [r7, #13]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800be46:	7b7a      	ldrb	r2, [r7, #13]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	32ae      	adds	r2, #174	; 0xae
 800be4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	2b00      	cmp	r3, #0
 800be54:	f000 8163 	beq.w	800c11e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800be58:	7b7a      	ldrb	r2, [r7, #13]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	32ae      	adds	r2, #174	; 0xae
 800be5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	4798      	blx	r3
 800be6a:	4603      	mov	r3, r0
 800be6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800be6e:	e156      	b.n	800c11e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	785b      	ldrb	r3, [r3, #1]
 800be74:	2b03      	cmp	r3, #3
 800be76:	d008      	beq.n	800be8a <USBD_StdEPReq+0x9a>
 800be78:	2b03      	cmp	r3, #3
 800be7a:	f300 8145 	bgt.w	800c108 <USBD_StdEPReq+0x318>
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f000 809b 	beq.w	800bfba <USBD_StdEPReq+0x1ca>
 800be84:	2b01      	cmp	r3, #1
 800be86:	d03c      	beq.n	800bf02 <USBD_StdEPReq+0x112>
 800be88:	e13e      	b.n	800c108 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be90:	b2db      	uxtb	r3, r3
 800be92:	2b02      	cmp	r3, #2
 800be94:	d002      	beq.n	800be9c <USBD_StdEPReq+0xac>
 800be96:	2b03      	cmp	r3, #3
 800be98:	d016      	beq.n	800bec8 <USBD_StdEPReq+0xd8>
 800be9a:	e02c      	b.n	800bef6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be9c:	7bbb      	ldrb	r3, [r7, #14]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00d      	beq.n	800bebe <USBD_StdEPReq+0xce>
 800bea2:	7bbb      	ldrb	r3, [r7, #14]
 800bea4:	2b80      	cmp	r3, #128	; 0x80
 800bea6:	d00a      	beq.n	800bebe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bea8:	7bbb      	ldrb	r3, [r7, #14]
 800beaa:	4619      	mov	r1, r3
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f001 f95f 	bl	800d170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800beb2:	2180      	movs	r1, #128	; 0x80
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f001 f95b 	bl	800d170 <USBD_LL_StallEP>
 800beba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bebc:	e020      	b.n	800bf00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bebe:	6839      	ldr	r1, [r7, #0]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 fc7a 	bl	800c7ba <USBD_CtlError>
              break;
 800bec6:	e01b      	b.n	800bf00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	885b      	ldrh	r3, [r3, #2]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d10e      	bne.n	800beee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bed0:	7bbb      	ldrb	r3, [r7, #14]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00b      	beq.n	800beee <USBD_StdEPReq+0xfe>
 800bed6:	7bbb      	ldrb	r3, [r7, #14]
 800bed8:	2b80      	cmp	r3, #128	; 0x80
 800beda:	d008      	beq.n	800beee <USBD_StdEPReq+0xfe>
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	88db      	ldrh	r3, [r3, #6]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d104      	bne.n	800beee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bee4:	7bbb      	ldrb	r3, [r7, #14]
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f001 f941 	bl	800d170 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fd2e 	bl	800c950 <USBD_CtlSendStatus>

              break;
 800bef4:	e004      	b.n	800bf00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bef6:	6839      	ldr	r1, [r7, #0]
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fc5e 	bl	800c7ba <USBD_CtlError>
              break;
 800befe:	bf00      	nop
          }
          break;
 800bf00:	e107      	b.n	800c112 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	d002      	beq.n	800bf14 <USBD_StdEPReq+0x124>
 800bf0e:	2b03      	cmp	r3, #3
 800bf10:	d016      	beq.n	800bf40 <USBD_StdEPReq+0x150>
 800bf12:	e04b      	b.n	800bfac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf14:	7bbb      	ldrb	r3, [r7, #14]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00d      	beq.n	800bf36 <USBD_StdEPReq+0x146>
 800bf1a:	7bbb      	ldrb	r3, [r7, #14]
 800bf1c:	2b80      	cmp	r3, #128	; 0x80
 800bf1e:	d00a      	beq.n	800bf36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf20:	7bbb      	ldrb	r3, [r7, #14]
 800bf22:	4619      	mov	r1, r3
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f001 f923 	bl	800d170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf2a:	2180      	movs	r1, #128	; 0x80
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f001 f91f 	bl	800d170 <USBD_LL_StallEP>
 800bf32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf34:	e040      	b.n	800bfb8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bf36:	6839      	ldr	r1, [r7, #0]
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 fc3e 	bl	800c7ba <USBD_CtlError>
              break;
 800bf3e:	e03b      	b.n	800bfb8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	885b      	ldrh	r3, [r3, #2]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d136      	bne.n	800bfb6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bf48:	7bbb      	ldrb	r3, [r7, #14]
 800bf4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d004      	beq.n	800bf5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bf52:	7bbb      	ldrb	r3, [r7, #14]
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f001 f929 	bl	800d1ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fcf7 	bl	800c950 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf62:	7bbb      	ldrb	r3, [r7, #14]
 800bf64:	4619      	mov	r1, r3
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7ff fde2 	bl	800bb30 <USBD_CoreFindEP>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf70:	7b7b      	ldrb	r3, [r7, #13]
 800bf72:	2bff      	cmp	r3, #255	; 0xff
 800bf74:	d01f      	beq.n	800bfb6 <USBD_StdEPReq+0x1c6>
 800bf76:	7b7b      	ldrb	r3, [r7, #13]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d11c      	bne.n	800bfb6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bf7c:	7b7a      	ldrb	r2, [r7, #13]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bf84:	7b7a      	ldrb	r2, [r7, #13]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	32ae      	adds	r2, #174	; 0xae
 800bf8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d010      	beq.n	800bfb6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf94:	7b7a      	ldrb	r2, [r7, #13]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	32ae      	adds	r2, #174	; 0xae
 800bf9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	4798      	blx	r3
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bfaa:	e004      	b.n	800bfb6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fc03 	bl	800c7ba <USBD_CtlError>
              break;
 800bfb4:	e000      	b.n	800bfb8 <USBD_StdEPReq+0x1c8>
              break;
 800bfb6:	bf00      	nop
          }
          break;
 800bfb8:	e0ab      	b.n	800c112 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d002      	beq.n	800bfcc <USBD_StdEPReq+0x1dc>
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	d032      	beq.n	800c030 <USBD_StdEPReq+0x240>
 800bfca:	e097      	b.n	800c0fc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfcc:	7bbb      	ldrb	r3, [r7, #14]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d007      	beq.n	800bfe2 <USBD_StdEPReq+0x1f2>
 800bfd2:	7bbb      	ldrb	r3, [r7, #14]
 800bfd4:	2b80      	cmp	r3, #128	; 0x80
 800bfd6:	d004      	beq.n	800bfe2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fbed 	bl	800c7ba <USBD_CtlError>
                break;
 800bfe0:	e091      	b.n	800c106 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	da0b      	bge.n	800c002 <USBD_StdEPReq+0x212>
 800bfea:	7bbb      	ldrb	r3, [r7, #14]
 800bfec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bff0:	4613      	mov	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	4413      	add	r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	3310      	adds	r3, #16
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	4413      	add	r3, r2
 800bffe:	3304      	adds	r3, #4
 800c000:	e00b      	b.n	800c01a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c002:	7bbb      	ldrb	r3, [r7, #14]
 800c004:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c008:	4613      	mov	r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	4413      	add	r3, r2
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	4413      	add	r3, r2
 800c018:	3304      	adds	r3, #4
 800c01a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	2200      	movs	r2, #0
 800c020:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2202      	movs	r2, #2
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 fc37 	bl	800c89c <USBD_CtlSendData>
              break;
 800c02e:	e06a      	b.n	800c106 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c034:	2b00      	cmp	r3, #0
 800c036:	da11      	bge.n	800c05c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	f003 020f 	and.w	r2, r3, #15
 800c03e:	6879      	ldr	r1, [r7, #4]
 800c040:	4613      	mov	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	4413      	add	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	440b      	add	r3, r1
 800c04a:	3324      	adds	r3, #36	; 0x24
 800c04c:	881b      	ldrh	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d117      	bne.n	800c082 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fbb0 	bl	800c7ba <USBD_CtlError>
                  break;
 800c05a:	e054      	b.n	800c106 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	f003 020f 	and.w	r2, r3, #15
 800c062:	6879      	ldr	r1, [r7, #4]
 800c064:	4613      	mov	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	440b      	add	r3, r1
 800c06e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c072:	881b      	ldrh	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d104      	bne.n	800c082 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fb9d 	bl	800c7ba <USBD_CtlError>
                  break;
 800c080:	e041      	b.n	800c106 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c082:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c086:	2b00      	cmp	r3, #0
 800c088:	da0b      	bge.n	800c0a2 <USBD_StdEPReq+0x2b2>
 800c08a:	7bbb      	ldrb	r3, [r7, #14]
 800c08c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c090:	4613      	mov	r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	4413      	add	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	3310      	adds	r3, #16
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	4413      	add	r3, r2
 800c09e:	3304      	adds	r3, #4
 800c0a0:	e00b      	b.n	800c0ba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0a2:	7bbb      	ldrb	r3, [r7, #14]
 800c0a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d002      	beq.n	800c0c8 <USBD_StdEPReq+0x2d8>
 800c0c2:	7bbb      	ldrb	r3, [r7, #14]
 800c0c4:	2b80      	cmp	r3, #128	; 0x80
 800c0c6:	d103      	bne.n	800c0d0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	601a      	str	r2, [r3, #0]
 800c0ce:	e00e      	b.n	800c0ee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c0d0:	7bbb      	ldrb	r3, [r7, #14]
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f001 f889 	bl	800d1ec <USBD_LL_IsStallEP>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d003      	beq.n	800c0e8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	601a      	str	r2, [r3, #0]
 800c0e6:	e002      	b.n	800c0ee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	2202      	movs	r2, #2
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fbd1 	bl	800c89c <USBD_CtlSendData>
              break;
 800c0fa:	e004      	b.n	800c106 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fb5b 	bl	800c7ba <USBD_CtlError>
              break;
 800c104:	bf00      	nop
          }
          break;
 800c106:	e004      	b.n	800c112 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 fb55 	bl	800c7ba <USBD_CtlError>
          break;
 800c110:	bf00      	nop
      }
      break;
 800c112:	e005      	b.n	800c120 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 fb4f 	bl	800c7ba <USBD_CtlError>
      break;
 800c11c:	e000      	b.n	800c120 <USBD_StdEPReq+0x330>
      break;
 800c11e:	bf00      	nop
  }

  return ret;
 800c120:	7bfb      	ldrb	r3, [r7, #15]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
	...

0800c12c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c136:	2300      	movs	r3, #0
 800c138:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c13a:	2300      	movs	r3, #0
 800c13c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c13e:	2300      	movs	r3, #0
 800c140:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	885b      	ldrh	r3, [r3, #2]
 800c146:	0a1b      	lsrs	r3, r3, #8
 800c148:	b29b      	uxth	r3, r3
 800c14a:	3b01      	subs	r3, #1
 800c14c:	2b06      	cmp	r3, #6
 800c14e:	f200 8128 	bhi.w	800c3a2 <USBD_GetDescriptor+0x276>
 800c152:	a201      	add	r2, pc, #4	; (adr r2, 800c158 <USBD_GetDescriptor+0x2c>)
 800c154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c158:	0800c175 	.word	0x0800c175
 800c15c:	0800c18d 	.word	0x0800c18d
 800c160:	0800c1cd 	.word	0x0800c1cd
 800c164:	0800c3a3 	.word	0x0800c3a3
 800c168:	0800c3a3 	.word	0x0800c3a3
 800c16c:	0800c343 	.word	0x0800c343
 800c170:	0800c36f 	.word	0x0800c36f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	7c12      	ldrb	r2, [r2, #16]
 800c180:	f107 0108 	add.w	r1, r7, #8
 800c184:	4610      	mov	r0, r2
 800c186:	4798      	blx	r3
 800c188:	60f8      	str	r0, [r7, #12]
      break;
 800c18a:	e112      	b.n	800c3b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	7c1b      	ldrb	r3, [r3, #16]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10d      	bne.n	800c1b0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c19c:	f107 0208 	add.w	r2, r7, #8
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	4798      	blx	r3
 800c1a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c1ae:	e100      	b.n	800c3b2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b8:	f107 0208 	add.w	r2, r7, #8
 800c1bc:	4610      	mov	r0, r2
 800c1be:	4798      	blx	r3
 800c1c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	2202      	movs	r2, #2
 800c1c8:	701a      	strb	r2, [r3, #0]
      break;
 800c1ca:	e0f2      	b.n	800c3b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	885b      	ldrh	r3, [r3, #2]
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	2b05      	cmp	r3, #5
 800c1d4:	f200 80ac 	bhi.w	800c330 <USBD_GetDescriptor+0x204>
 800c1d8:	a201      	add	r2, pc, #4	; (adr r2, 800c1e0 <USBD_GetDescriptor+0xb4>)
 800c1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1de:	bf00      	nop
 800c1e0:	0800c1f9 	.word	0x0800c1f9
 800c1e4:	0800c22d 	.word	0x0800c22d
 800c1e8:	0800c261 	.word	0x0800c261
 800c1ec:	0800c295 	.word	0x0800c295
 800c1f0:	0800c2c9 	.word	0x0800c2c9
 800c1f4:	0800c2fd 	.word	0x0800c2fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00b      	beq.n	800c21c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	7c12      	ldrb	r2, [r2, #16]
 800c210:	f107 0108 	add.w	r1, r7, #8
 800c214:	4610      	mov	r0, r2
 800c216:	4798      	blx	r3
 800c218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c21a:	e091      	b.n	800c340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 facb 	bl	800c7ba <USBD_CtlError>
            err++;
 800c224:	7afb      	ldrb	r3, [r7, #11]
 800c226:	3301      	adds	r3, #1
 800c228:	72fb      	strb	r3, [r7, #11]
          break;
 800c22a:	e089      	b.n	800c340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00b      	beq.n	800c250 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	7c12      	ldrb	r2, [r2, #16]
 800c244:	f107 0108 	add.w	r1, r7, #8
 800c248:	4610      	mov	r0, r2
 800c24a:	4798      	blx	r3
 800c24c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c24e:	e077      	b.n	800c340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c250:	6839      	ldr	r1, [r7, #0]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f000 fab1 	bl	800c7ba <USBD_CtlError>
            err++;
 800c258:	7afb      	ldrb	r3, [r7, #11]
 800c25a:	3301      	adds	r3, #1
 800c25c:	72fb      	strb	r3, [r7, #11]
          break;
 800c25e:	e06f      	b.n	800c340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00b      	beq.n	800c284 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	7c12      	ldrb	r2, [r2, #16]
 800c278:	f107 0108 	add.w	r1, r7, #8
 800c27c:	4610      	mov	r0, r2
 800c27e:	4798      	blx	r3
 800c280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c282:	e05d      	b.n	800c340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c284:	6839      	ldr	r1, [r7, #0]
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fa97 	bl	800c7ba <USBD_CtlError>
            err++;
 800c28c:	7afb      	ldrb	r3, [r7, #11]
 800c28e:	3301      	adds	r3, #1
 800c290:	72fb      	strb	r3, [r7, #11]
          break;
 800c292:	e055      	b.n	800c340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00b      	beq.n	800c2b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	7c12      	ldrb	r2, [r2, #16]
 800c2ac:	f107 0108 	add.w	r1, r7, #8
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	4798      	blx	r3
 800c2b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2b6:	e043      	b.n	800c340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 fa7d 	bl	800c7ba <USBD_CtlError>
            err++;
 800c2c0:	7afb      	ldrb	r3, [r7, #11]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2c6:	e03b      	b.n	800c340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ce:	695b      	ldr	r3, [r3, #20]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00b      	beq.n	800c2ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2da:	695b      	ldr	r3, [r3, #20]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	7c12      	ldrb	r2, [r2, #16]
 800c2e0:	f107 0108 	add.w	r1, r7, #8
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	4798      	blx	r3
 800c2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ea:	e029      	b.n	800c340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fa63 	bl	800c7ba <USBD_CtlError>
            err++;
 800c2f4:	7afb      	ldrb	r3, [r7, #11]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2fa:	e021      	b.n	800c340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c302:	699b      	ldr	r3, [r3, #24]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00b      	beq.n	800c320 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c30e:	699b      	ldr	r3, [r3, #24]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	7c12      	ldrb	r2, [r2, #16]
 800c314:	f107 0108 	add.w	r1, r7, #8
 800c318:	4610      	mov	r0, r2
 800c31a:	4798      	blx	r3
 800c31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c31e:	e00f      	b.n	800c340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fa49 	bl	800c7ba <USBD_CtlError>
            err++;
 800c328:	7afb      	ldrb	r3, [r7, #11]
 800c32a:	3301      	adds	r3, #1
 800c32c:	72fb      	strb	r3, [r7, #11]
          break;
 800c32e:	e007      	b.n	800c340 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c330:	6839      	ldr	r1, [r7, #0]
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 fa41 	bl	800c7ba <USBD_CtlError>
          err++;
 800c338:	7afb      	ldrb	r3, [r7, #11]
 800c33a:	3301      	adds	r3, #1
 800c33c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c33e:	bf00      	nop
      }
      break;
 800c340:	e037      	b.n	800c3b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	7c1b      	ldrb	r3, [r3, #16]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d109      	bne.n	800c35e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c352:	f107 0208 	add.w	r2, r7, #8
 800c356:	4610      	mov	r0, r2
 800c358:	4798      	blx	r3
 800c35a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c35c:	e029      	b.n	800c3b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c35e:	6839      	ldr	r1, [r7, #0]
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fa2a 	bl	800c7ba <USBD_CtlError>
        err++;
 800c366:	7afb      	ldrb	r3, [r7, #11]
 800c368:	3301      	adds	r3, #1
 800c36a:	72fb      	strb	r3, [r7, #11]
      break;
 800c36c:	e021      	b.n	800c3b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	7c1b      	ldrb	r3, [r3, #16]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10d      	bne.n	800c392 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c37e:	f107 0208 	add.w	r2, r7, #8
 800c382:	4610      	mov	r0, r2
 800c384:	4798      	blx	r3
 800c386:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	3301      	adds	r3, #1
 800c38c:	2207      	movs	r2, #7
 800c38e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c390:	e00f      	b.n	800c3b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 fa10 	bl	800c7ba <USBD_CtlError>
        err++;
 800c39a:	7afb      	ldrb	r3, [r7, #11]
 800c39c:	3301      	adds	r3, #1
 800c39e:	72fb      	strb	r3, [r7, #11]
      break;
 800c3a0:	e007      	b.n	800c3b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c3a2:	6839      	ldr	r1, [r7, #0]
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fa08 	bl	800c7ba <USBD_CtlError>
      err++;
 800c3aa:	7afb      	ldrb	r3, [r7, #11]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	72fb      	strb	r3, [r7, #11]
      break;
 800c3b0:	bf00      	nop
  }

  if (err != 0U)
 800c3b2:	7afb      	ldrb	r3, [r7, #11]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d11e      	bne.n	800c3f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	88db      	ldrh	r3, [r3, #6]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d016      	beq.n	800c3ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c3c0:	893b      	ldrh	r3, [r7, #8]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00e      	beq.n	800c3e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	88da      	ldrh	r2, [r3, #6]
 800c3ca:	893b      	ldrh	r3, [r7, #8]
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	bf28      	it	cs
 800c3d0:	4613      	movcs	r3, r2
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c3d6:	893b      	ldrh	r3, [r7, #8]
 800c3d8:	461a      	mov	r2, r3
 800c3da:	68f9      	ldr	r1, [r7, #12]
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fa5d 	bl	800c89c <USBD_CtlSendData>
 800c3e2:	e009      	b.n	800c3f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f9e7 	bl	800c7ba <USBD_CtlError>
 800c3ec:	e004      	b.n	800c3f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 faae 	bl	800c950 <USBD_CtlSendStatus>
 800c3f4:	e000      	b.n	800c3f8 <USBD_GetDescriptor+0x2cc>
    return;
 800c3f6:	bf00      	nop
  }
}
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop

0800c400 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	889b      	ldrh	r3, [r3, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d131      	bne.n	800c476 <USBD_SetAddress+0x76>
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	88db      	ldrh	r3, [r3, #6]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d12d      	bne.n	800c476 <USBD_SetAddress+0x76>
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	885b      	ldrh	r3, [r3, #2]
 800c41e:	2b7f      	cmp	r3, #127	; 0x7f
 800c420:	d829      	bhi.n	800c476 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	885b      	ldrh	r3, [r3, #2]
 800c426:	b2db      	uxtb	r3, r3
 800c428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c42c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c434:	b2db      	uxtb	r3, r3
 800c436:	2b03      	cmp	r3, #3
 800c438:	d104      	bne.n	800c444 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 f9bc 	bl	800c7ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c442:	e01d      	b.n	800c480 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	7bfa      	ldrb	r2, [r7, #15]
 800c448:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c44c:	7bfb      	ldrb	r3, [r7, #15]
 800c44e:	4619      	mov	r1, r3
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fef7 	bl	800d244 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fa7a 	bl	800c950 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c45c:	7bfb      	ldrb	r3, [r7, #15]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d004      	beq.n	800c46c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2202      	movs	r2, #2
 800c466:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c46a:	e009      	b.n	800c480 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c474:	e004      	b.n	800c480 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c476:	6839      	ldr	r1, [r7, #0]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 f99e 	bl	800c7ba <USBD_CtlError>
  }
}
 800c47e:	bf00      	nop
 800c480:	bf00      	nop
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	885b      	ldrh	r3, [r3, #2]
 800c49a:	b2da      	uxtb	r2, r3
 800c49c:	4b4e      	ldr	r3, [pc, #312]	; (800c5d8 <USBD_SetConfig+0x150>)
 800c49e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c4a0:	4b4d      	ldr	r3, [pc, #308]	; (800c5d8 <USBD_SetConfig+0x150>)
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d905      	bls.n	800c4b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c4a8:	6839      	ldr	r1, [r7, #0]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f985 	bl	800c7ba <USBD_CtlError>
    return USBD_FAIL;
 800c4b0:	2303      	movs	r3, #3
 800c4b2:	e08c      	b.n	800c5ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d002      	beq.n	800c4c6 <USBD_SetConfig+0x3e>
 800c4c0:	2b03      	cmp	r3, #3
 800c4c2:	d029      	beq.n	800c518 <USBD_SetConfig+0x90>
 800c4c4:	e075      	b.n	800c5b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c4c6:	4b44      	ldr	r3, [pc, #272]	; (800c5d8 <USBD_SetConfig+0x150>)
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d020      	beq.n	800c510 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c4ce:	4b42      	ldr	r3, [pc, #264]	; (800c5d8 <USBD_SetConfig+0x150>)
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c4d8:	4b3f      	ldr	r3, [pc, #252]	; (800c5d8 <USBD_SetConfig+0x150>)
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7fe ffe7 	bl	800b4b2 <USBD_SetClassConfig>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c4e8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d008      	beq.n	800c500 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c4ee:	6839      	ldr	r1, [r7, #0]
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 f962 	bl	800c7ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2202      	movs	r2, #2
 800c4fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c4fe:	e065      	b.n	800c5cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 fa25 	bl	800c950 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2203      	movs	r2, #3
 800c50a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c50e:	e05d      	b.n	800c5cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 fa1d 	bl	800c950 <USBD_CtlSendStatus>
      break;
 800c516:	e059      	b.n	800c5cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c518:	4b2f      	ldr	r3, [pc, #188]	; (800c5d8 <USBD_SetConfig+0x150>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d112      	bne.n	800c546 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2202      	movs	r2, #2
 800c524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c528:	4b2b      	ldr	r3, [pc, #172]	; (800c5d8 <USBD_SetConfig+0x150>)
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	461a      	mov	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c532:	4b29      	ldr	r3, [pc, #164]	; (800c5d8 <USBD_SetConfig+0x150>)
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	4619      	mov	r1, r3
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7fe ffd6 	bl	800b4ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fa06 	bl	800c950 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c544:	e042      	b.n	800c5cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c546:	4b24      	ldr	r3, [pc, #144]	; (800c5d8 <USBD_SetConfig+0x150>)
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	429a      	cmp	r2, r3
 800c552:	d02a      	beq.n	800c5aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	4619      	mov	r1, r3
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f7fe ffc4 	bl	800b4ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c562:	4b1d      	ldr	r3, [pc, #116]	; (800c5d8 <USBD_SetConfig+0x150>)
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	461a      	mov	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c56c:	4b1a      	ldr	r3, [pc, #104]	; (800c5d8 <USBD_SetConfig+0x150>)
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	4619      	mov	r1, r3
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7fe ff9d 	bl	800b4b2 <USBD_SetClassConfig>
 800c578:	4603      	mov	r3, r0
 800c57a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c57c:	7bfb      	ldrb	r3, [r7, #15]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00f      	beq.n	800c5a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c582:	6839      	ldr	r1, [r7, #0]
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 f918 	bl	800c7ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	4619      	mov	r1, r3
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7fe ffa9 	bl	800b4ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2202      	movs	r2, #2
 800c59c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c5a0:	e014      	b.n	800c5cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 f9d4 	bl	800c950 <USBD_CtlSendStatus>
      break;
 800c5a8:	e010      	b.n	800c5cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 f9d0 	bl	800c950 <USBD_CtlSendStatus>
      break;
 800c5b0:	e00c      	b.n	800c5cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c5b2:	6839      	ldr	r1, [r7, #0]
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 f900 	bl	800c7ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5ba:	4b07      	ldr	r3, [pc, #28]	; (800c5d8 <USBD_SetConfig+0x150>)
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7fe ff92 	bl	800b4ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	73fb      	strb	r3, [r7, #15]
      break;
 800c5ca:	bf00      	nop
  }

  return ret;
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	200010f4 	.word	0x200010f4

0800c5dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	88db      	ldrh	r3, [r3, #6]
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d004      	beq.n	800c5f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c5ee:	6839      	ldr	r1, [r7, #0]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f8e2 	bl	800c7ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c5f6:	e023      	b.n	800c640 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	2b02      	cmp	r3, #2
 800c602:	dc02      	bgt.n	800c60a <USBD_GetConfig+0x2e>
 800c604:	2b00      	cmp	r3, #0
 800c606:	dc03      	bgt.n	800c610 <USBD_GetConfig+0x34>
 800c608:	e015      	b.n	800c636 <USBD_GetConfig+0x5a>
 800c60a:	2b03      	cmp	r3, #3
 800c60c:	d00b      	beq.n	800c626 <USBD_GetConfig+0x4a>
 800c60e:	e012      	b.n	800c636 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	3308      	adds	r3, #8
 800c61a:	2201      	movs	r2, #1
 800c61c:	4619      	mov	r1, r3
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f93c 	bl	800c89c <USBD_CtlSendData>
        break;
 800c624:	e00c      	b.n	800c640 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	3304      	adds	r3, #4
 800c62a:	2201      	movs	r2, #1
 800c62c:	4619      	mov	r1, r3
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 f934 	bl	800c89c <USBD_CtlSendData>
        break;
 800c634:	e004      	b.n	800c640 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c636:	6839      	ldr	r1, [r7, #0]
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f8be 	bl	800c7ba <USBD_CtlError>
        break;
 800c63e:	bf00      	nop
}
 800c640:	bf00      	nop
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	3b01      	subs	r3, #1
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	d81e      	bhi.n	800c69e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	88db      	ldrh	r3, [r3, #6]
 800c664:	2b02      	cmp	r3, #2
 800c666:	d004      	beq.n	800c672 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c668:	6839      	ldr	r1, [r7, #0]
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f8a5 	bl	800c7ba <USBD_CtlError>
        break;
 800c670:	e01a      	b.n	800c6a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2201      	movs	r2, #1
 800c676:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d005      	beq.n	800c68e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	f043 0202 	orr.w	r2, r3, #2
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	330c      	adds	r3, #12
 800c692:	2202      	movs	r2, #2
 800c694:	4619      	mov	r1, r3
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f900 	bl	800c89c <USBD_CtlSendData>
      break;
 800c69c:	e004      	b.n	800c6a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 f88a 	bl	800c7ba <USBD_CtlError>
      break;
 800c6a6:	bf00      	nop
  }
}
 800c6a8:	bf00      	nop
 800c6aa:	3708      	adds	r7, #8
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	885b      	ldrh	r3, [r3, #2]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d107      	bne.n	800c6d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f940 	bl	800c950 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c6d0:	e013      	b.n	800c6fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	885b      	ldrh	r3, [r3, #2]
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d10b      	bne.n	800c6f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	889b      	ldrh	r3, [r3, #4]
 800c6de:	0a1b      	lsrs	r3, r3, #8
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f930 	bl	800c950 <USBD_CtlSendStatus>
}
 800c6f0:	e003      	b.n	800c6fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f860 	bl	800c7ba <USBD_CtlError>
}
 800c6fa:	bf00      	nop
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b082      	sub	sp, #8
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c712:	b2db      	uxtb	r3, r3
 800c714:	3b01      	subs	r3, #1
 800c716:	2b02      	cmp	r3, #2
 800c718:	d80b      	bhi.n	800c732 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	885b      	ldrh	r3, [r3, #2]
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d10c      	bne.n	800c73c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2200      	movs	r2, #0
 800c726:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 f910 	bl	800c950 <USBD_CtlSendStatus>
      }
      break;
 800c730:	e004      	b.n	800c73c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c732:	6839      	ldr	r1, [r7, #0]
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 f840 	bl	800c7ba <USBD_CtlError>
      break;
 800c73a:	e000      	b.n	800c73e <USBD_ClrFeature+0x3c>
      break;
 800c73c:	bf00      	nop
  }
}
 800c73e:	bf00      	nop
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b084      	sub	sp, #16
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	781a      	ldrb	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	3301      	adds	r3, #1
 800c760:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	781a      	ldrb	r2, [r3, #0]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3301      	adds	r3, #1
 800c76e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f7ff fa41 	bl	800bbf8 <SWAPBYTE>
 800c776:	4603      	mov	r3, r0
 800c778:	461a      	mov	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	3301      	adds	r3, #1
 800c782:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	3301      	adds	r3, #1
 800c788:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f7ff fa34 	bl	800bbf8 <SWAPBYTE>
 800c790:	4603      	mov	r3, r0
 800c792:	461a      	mov	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	3301      	adds	r3, #1
 800c79c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f7ff fa27 	bl	800bbf8 <SWAPBYTE>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	80da      	strh	r2, [r3, #6]
}
 800c7b2:	bf00      	nop
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b082      	sub	sp, #8
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
 800c7c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7c4:	2180      	movs	r1, #128	; 0x80
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 fcd2 	bl	800d170 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 fcce 	bl	800d170 <USBD_LL_StallEP>
}
 800c7d4:	bf00      	nop
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d036      	beq.n	800c860 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c7f6:	6938      	ldr	r0, [r7, #16]
 800c7f8:	f000 f836 	bl	800c868 <USBD_GetLen>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	3301      	adds	r3, #1
 800c800:	b29b      	uxth	r3, r3
 800c802:	005b      	lsls	r3, r3, #1
 800c804:	b29a      	uxth	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c80a:	7dfb      	ldrb	r3, [r7, #23]
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	4413      	add	r3, r2
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	7812      	ldrb	r2, [r2, #0]
 800c814:	701a      	strb	r2, [r3, #0]
  idx++;
 800c816:	7dfb      	ldrb	r3, [r7, #23]
 800c818:	3301      	adds	r3, #1
 800c81a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c81c:	7dfb      	ldrb	r3, [r7, #23]
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	4413      	add	r3, r2
 800c822:	2203      	movs	r2, #3
 800c824:	701a      	strb	r2, [r3, #0]
  idx++;
 800c826:	7dfb      	ldrb	r3, [r7, #23]
 800c828:	3301      	adds	r3, #1
 800c82a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c82c:	e013      	b.n	800c856 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c82e:	7dfb      	ldrb	r3, [r7, #23]
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	4413      	add	r3, r2
 800c834:	693a      	ldr	r2, [r7, #16]
 800c836:	7812      	ldrb	r2, [r2, #0]
 800c838:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	3301      	adds	r3, #1
 800c83e:	613b      	str	r3, [r7, #16]
    idx++;
 800c840:	7dfb      	ldrb	r3, [r7, #23]
 800c842:	3301      	adds	r3, #1
 800c844:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c846:	7dfb      	ldrb	r3, [r7, #23]
 800c848:	68ba      	ldr	r2, [r7, #8]
 800c84a:	4413      	add	r3, r2
 800c84c:	2200      	movs	r2, #0
 800c84e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c850:	7dfb      	ldrb	r3, [r7, #23]
 800c852:	3301      	adds	r3, #1
 800c854:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1e7      	bne.n	800c82e <USBD_GetString+0x52>
 800c85e:	e000      	b.n	800c862 <USBD_GetString+0x86>
    return;
 800c860:	bf00      	nop
  }
}
 800c862:	3718      	adds	r7, #24
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c870:	2300      	movs	r3, #0
 800c872:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c878:	e005      	b.n	800c886 <USBD_GetLen+0x1e>
  {
    len++;
 800c87a:	7bfb      	ldrb	r3, [r7, #15]
 800c87c:	3301      	adds	r3, #1
 800c87e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	3301      	adds	r3, #1
 800c884:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1f5      	bne.n	800c87a <USBD_GetLen+0x12>
  }

  return len;
 800c88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3714      	adds	r7, #20
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	68ba      	ldr	r2, [r7, #8]
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	68f8      	ldr	r0, [r7, #12]
 800c8c4:	f000 fcdd 	bl	800d282 <USBD_LL_Transmit>

  return USBD_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b084      	sub	sp, #16
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	60f8      	str	r0, [r7, #12]
 800c8da:	60b9      	str	r1, [r7, #8]
 800c8dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	2100      	movs	r1, #0
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f000 fccc 	bl	800d282 <USBD_LL_Transmit>

  return USBD_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3710      	adds	r7, #16
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2203      	movs	r2, #3
 800c904:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	2100      	movs	r1, #0
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f000 fcd0 	bl	800d2c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3710      	adds	r7, #16
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b084      	sub	sp, #16
 800c932:	af00      	add	r7, sp, #0
 800c934:	60f8      	str	r0, [r7, #12]
 800c936:	60b9      	str	r1, [r7, #8]
 800c938:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	68ba      	ldr	r2, [r7, #8]
 800c93e:	2100      	movs	r1, #0
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f000 fcbf 	bl	800d2c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2204      	movs	r2, #4
 800c95c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c960:	2300      	movs	r3, #0
 800c962:	2200      	movs	r2, #0
 800c964:	2100      	movs	r1, #0
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 fc8b 	bl	800d282 <USBD_LL_Transmit>

  return USBD_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2205      	movs	r2, #5
 800c982:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c986:	2300      	movs	r3, #0
 800c988:	2200      	movs	r2, #0
 800c98a:	2100      	movs	r1, #0
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 fc99 	bl	800d2c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c992:	2300      	movs	r3, #0
}
 800c994:	4618      	mov	r0, r3
 800c996:	3708      	adds	r7, #8
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	4912      	ldr	r1, [pc, #72]	; (800c9ec <MX_USB_DEVICE_Init+0x50>)
 800c9a4:	4812      	ldr	r0, [pc, #72]	; (800c9f0 <MX_USB_DEVICE_Init+0x54>)
 800c9a6:	f7fe fd07 	bl	800b3b8 <USBD_Init>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d001      	beq.n	800c9b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c9b0:	f7f5 fa92 	bl	8001ed8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800c9b4:	490f      	ldr	r1, [pc, #60]	; (800c9f4 <MX_USB_DEVICE_Init+0x58>)
 800c9b6:	480e      	ldr	r0, [pc, #56]	; (800c9f0 <MX_USB_DEVICE_Init+0x54>)
 800c9b8:	f7fe fd2e 	bl	800b418 <USBD_RegisterClass>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d001      	beq.n	800c9c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c9c2:	f7f5 fa89 	bl	8001ed8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800c9c6:	490c      	ldr	r1, [pc, #48]	; (800c9f8 <MX_USB_DEVICE_Init+0x5c>)
 800c9c8:	4809      	ldr	r0, [pc, #36]	; (800c9f0 <MX_USB_DEVICE_Init+0x54>)
 800c9ca:	f7fe fc65 	bl	800b298 <USBD_CDC_RegisterInterface>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c9d4:	f7f5 fa80 	bl	8001ed8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800c9d8:	4805      	ldr	r0, [pc, #20]	; (800c9f0 <MX_USB_DEVICE_Init+0x54>)
 800c9da:	f7fe fd53 	bl	800b484 <USBD_Start>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d001      	beq.n	800c9e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c9e4:	f7f5 fa78 	bl	8001ed8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c9e8:	bf00      	nop
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	200000c4 	.word	0x200000c4
 800c9f0:	200010f8 	.word	0x200010f8
 800c9f4:	20000030 	.word	0x20000030
 800c9f8:	200000b0 	.word	0x200000b0

0800c9fc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800ca00:	2200      	movs	r2, #0
 800ca02:	4905      	ldr	r1, [pc, #20]	; (800ca18 <CDC_Init_HS+0x1c>)
 800ca04:	4805      	ldr	r0, [pc, #20]	; (800ca1c <CDC_Init_HS+0x20>)
 800ca06:	f7fe fc61 	bl	800b2cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800ca0a:	4905      	ldr	r1, [pc, #20]	; (800ca20 <CDC_Init_HS+0x24>)
 800ca0c:	4803      	ldr	r0, [pc, #12]	; (800ca1c <CDC_Init_HS+0x20>)
 800ca0e:	f7fe fc7f 	bl	800b310 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca12:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	20001bd4 	.word	0x20001bd4
 800ca1c:	200010f8 	.word	0x200010f8
 800ca20:	200013d4 	.word	0x200013d4

0800ca24 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ca24:	b480      	push	{r7}
 800ca26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ca28:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	6039      	str	r1, [r7, #0]
 800ca3e:	71fb      	strb	r3, [r7, #7]
 800ca40:	4613      	mov	r3, r2
 800ca42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ca44:	79fb      	ldrb	r3, [r7, #7]
 800ca46:	2b23      	cmp	r3, #35	; 0x23
 800ca48:	d84a      	bhi.n	800cae0 <CDC_Control_HS+0xac>
 800ca4a:	a201      	add	r2, pc, #4	; (adr r2, 800ca50 <CDC_Control_HS+0x1c>)
 800ca4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca50:	0800cae1 	.word	0x0800cae1
 800ca54:	0800cae1 	.word	0x0800cae1
 800ca58:	0800cae1 	.word	0x0800cae1
 800ca5c:	0800cae1 	.word	0x0800cae1
 800ca60:	0800cae1 	.word	0x0800cae1
 800ca64:	0800cae1 	.word	0x0800cae1
 800ca68:	0800cae1 	.word	0x0800cae1
 800ca6c:	0800cae1 	.word	0x0800cae1
 800ca70:	0800cae1 	.word	0x0800cae1
 800ca74:	0800cae1 	.word	0x0800cae1
 800ca78:	0800cae1 	.word	0x0800cae1
 800ca7c:	0800cae1 	.word	0x0800cae1
 800ca80:	0800cae1 	.word	0x0800cae1
 800ca84:	0800cae1 	.word	0x0800cae1
 800ca88:	0800cae1 	.word	0x0800cae1
 800ca8c:	0800cae1 	.word	0x0800cae1
 800ca90:	0800cae1 	.word	0x0800cae1
 800ca94:	0800cae1 	.word	0x0800cae1
 800ca98:	0800cae1 	.word	0x0800cae1
 800ca9c:	0800cae1 	.word	0x0800cae1
 800caa0:	0800cae1 	.word	0x0800cae1
 800caa4:	0800cae1 	.word	0x0800cae1
 800caa8:	0800cae1 	.word	0x0800cae1
 800caac:	0800cae1 	.word	0x0800cae1
 800cab0:	0800cae1 	.word	0x0800cae1
 800cab4:	0800cae1 	.word	0x0800cae1
 800cab8:	0800cae1 	.word	0x0800cae1
 800cabc:	0800cae1 	.word	0x0800cae1
 800cac0:	0800cae1 	.word	0x0800cae1
 800cac4:	0800cae1 	.word	0x0800cae1
 800cac8:	0800cae1 	.word	0x0800cae1
 800cacc:	0800cae1 	.word	0x0800cae1
 800cad0:	0800cae1 	.word	0x0800cae1
 800cad4:	0800cae1 	.word	0x0800cae1
 800cad8:	0800cae1 	.word	0x0800cae1
 800cadc:	0800cae1 	.word	0x0800cae1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cae0:	bf00      	nop
  }

  return (USBD_OK);
 800cae2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	370c      	adds	r7, #12
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800cafa:	6879      	ldr	r1, [r7, #4]
 800cafc:	480f      	ldr	r0, [pc, #60]	; (800cb3c <CDC_Receive_HS+0x4c>)
 800cafe:	f7fe fc07 	bl	800b310 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800cb02:	480e      	ldr	r0, [pc, #56]	; (800cb3c <CDC_Receive_HS+0x4c>)
 800cb04:	f7fe fc22 	bl	800b34c <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t)*Len;
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	73fb      	strb	r3, [r7, #15]
  memset(recieve_buffer, '\0', 64);
 800cb0e:	2240      	movs	r2, #64	; 0x40
 800cb10:	2100      	movs	r1, #0
 800cb12:	480b      	ldr	r0, [pc, #44]	; (800cb40 <CDC_Receive_HS+0x50>)
 800cb14:	f000 fc86 	bl	800d424 <memset>
  memcpy(recieve_buffer, Buf, len);
 800cb18:	7bfb      	ldrb	r3, [r7, #15]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	6879      	ldr	r1, [r7, #4]
 800cb1e:	4808      	ldr	r0, [pc, #32]	; (800cb40 <CDC_Receive_HS+0x50>)
 800cb20:	f000 fc72 	bl	800d408 <memcpy>
  memset(Buf, '\0', len);
 800cb24:	7bfb      	ldrb	r3, [r7, #15]
 800cb26:	461a      	mov	r2, r3
 800cb28:	2100      	movs	r1, #0
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fc7a 	bl	800d424 <memset>
  return (USBD_OK);
 800cb30:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	200010f8 	.word	0x200010f8
 800cb40:	20000884 	.word	0x20000884

0800cb44 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b087      	sub	sp, #28
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	4613      	mov	r3, r2
 800cb50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cb52:	2300      	movs	r3, #0
 800cb54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800cb56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	371c      	adds	r7, #28
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
	...

0800cb68 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	4603      	mov	r3, r0
 800cb70:	6039      	str	r1, [r7, #0]
 800cb72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	2212      	movs	r2, #18
 800cb78:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800cb7a:	4b03      	ldr	r3, [pc, #12]	; (800cb88 <USBD_HS_DeviceDescriptor+0x20>)
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	370c      	adds	r7, #12
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr
 800cb88:	200000e0 	.word	0x200000e0

0800cb8c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	4603      	mov	r3, r0
 800cb94:	6039      	str	r1, [r7, #0]
 800cb96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	2204      	movs	r2, #4
 800cb9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb9e:	4b03      	ldr	r3, [pc, #12]	; (800cbac <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	370c      	adds	r7, #12
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr
 800cbac:	200000f4 	.word	0x200000f4

0800cbb0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	6039      	str	r1, [r7, #0]
 800cbba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbbc:	79fb      	ldrb	r3, [r7, #7]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d105      	bne.n	800cbce <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800cbc2:	683a      	ldr	r2, [r7, #0]
 800cbc4:	4907      	ldr	r1, [pc, #28]	; (800cbe4 <USBD_HS_ProductStrDescriptor+0x34>)
 800cbc6:	4808      	ldr	r0, [pc, #32]	; (800cbe8 <USBD_HS_ProductStrDescriptor+0x38>)
 800cbc8:	f7ff fe08 	bl	800c7dc <USBD_GetString>
 800cbcc:	e004      	b.n	800cbd8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800cbce:	683a      	ldr	r2, [r7, #0]
 800cbd0:	4904      	ldr	r1, [pc, #16]	; (800cbe4 <USBD_HS_ProductStrDescriptor+0x34>)
 800cbd2:	4805      	ldr	r0, [pc, #20]	; (800cbe8 <USBD_HS_ProductStrDescriptor+0x38>)
 800cbd4:	f7ff fe02 	bl	800c7dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbd8:	4b02      	ldr	r3, [pc, #8]	; (800cbe4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	200023d4 	.word	0x200023d4
 800cbe8:	080103cc 	.word	0x080103cc

0800cbec <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	6039      	str	r1, [r7, #0]
 800cbf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	4904      	ldr	r1, [pc, #16]	; (800cc0c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800cbfc:	4804      	ldr	r0, [pc, #16]	; (800cc10 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800cbfe:	f7ff fded 	bl	800c7dc <USBD_GetString>
  return USBD_StrDesc;
 800cc02:	4b02      	ldr	r3, [pc, #8]	; (800cc0c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	200023d4 	.word	0x200023d4
 800cc10:	080103e4 	.word	0x080103e4

0800cc14 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	6039      	str	r1, [r7, #0]
 800cc1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	221a      	movs	r2, #26
 800cc24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc26:	f000 f843 	bl	800ccb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800cc2a:	4b02      	ldr	r3, [pc, #8]	; (800cc34 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3708      	adds	r7, #8
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	200000f8 	.word	0x200000f8

0800cc38 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	4603      	mov	r3, r0
 800cc40:	6039      	str	r1, [r7, #0]
 800cc42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc44:	79fb      	ldrb	r3, [r7, #7]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d105      	bne.n	800cc56 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800cc4a:	683a      	ldr	r2, [r7, #0]
 800cc4c:	4907      	ldr	r1, [pc, #28]	; (800cc6c <USBD_HS_ConfigStrDescriptor+0x34>)
 800cc4e:	4808      	ldr	r0, [pc, #32]	; (800cc70 <USBD_HS_ConfigStrDescriptor+0x38>)
 800cc50:	f7ff fdc4 	bl	800c7dc <USBD_GetString>
 800cc54:	e004      	b.n	800cc60 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800cc56:	683a      	ldr	r2, [r7, #0]
 800cc58:	4904      	ldr	r1, [pc, #16]	; (800cc6c <USBD_HS_ConfigStrDescriptor+0x34>)
 800cc5a:	4805      	ldr	r0, [pc, #20]	; (800cc70 <USBD_HS_ConfigStrDescriptor+0x38>)
 800cc5c:	f7ff fdbe 	bl	800c7dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc60:	4b02      	ldr	r3, [pc, #8]	; (800cc6c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	200023d4 	.word	0x200023d4
 800cc70:	080103f8 	.word	0x080103f8

0800cc74 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d105      	bne.n	800cc92 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	4907      	ldr	r1, [pc, #28]	; (800cca8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800cc8a:	4808      	ldr	r0, [pc, #32]	; (800ccac <USBD_HS_InterfaceStrDescriptor+0x38>)
 800cc8c:	f7ff fda6 	bl	800c7dc <USBD_GetString>
 800cc90:	e004      	b.n	800cc9c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800cc92:	683a      	ldr	r2, [r7, #0]
 800cc94:	4904      	ldr	r1, [pc, #16]	; (800cca8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800cc96:	4805      	ldr	r0, [pc, #20]	; (800ccac <USBD_HS_InterfaceStrDescriptor+0x38>)
 800cc98:	f7ff fda0 	bl	800c7dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc9c:	4b02      	ldr	r3, [pc, #8]	; (800cca8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	200023d4 	.word	0x200023d4
 800ccac:	08010404 	.word	0x08010404

0800ccb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccb6:	4b0f      	ldr	r3, [pc, #60]	; (800ccf4 <Get_SerialNum+0x44>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ccbc:	4b0e      	ldr	r3, [pc, #56]	; (800ccf8 <Get_SerialNum+0x48>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ccc2:	4b0e      	ldr	r3, [pc, #56]	; (800ccfc <Get_SerialNum+0x4c>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ccc8:	68fa      	ldr	r2, [r7, #12]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4413      	add	r3, r2
 800ccce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d009      	beq.n	800ccea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ccd6:	2208      	movs	r2, #8
 800ccd8:	4909      	ldr	r1, [pc, #36]	; (800cd00 <Get_SerialNum+0x50>)
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	f000 f814 	bl	800cd08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cce0:	2204      	movs	r2, #4
 800cce2:	4908      	ldr	r1, [pc, #32]	; (800cd04 <Get_SerialNum+0x54>)
 800cce4:	68b8      	ldr	r0, [r7, #8]
 800cce6:	f000 f80f 	bl	800cd08 <IntToUnicode>
  }
}
 800ccea:	bf00      	nop
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	1fff7a10 	.word	0x1fff7a10
 800ccf8:	1fff7a14 	.word	0x1fff7a14
 800ccfc:	1fff7a18 	.word	0x1fff7a18
 800cd00:	200000fa 	.word	0x200000fa
 800cd04:	2000010a 	.word	0x2000010a

0800cd08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b087      	sub	sp, #28
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	4613      	mov	r3, r2
 800cd14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd16:	2300      	movs	r3, #0
 800cd18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	75fb      	strb	r3, [r7, #23]
 800cd1e:	e027      	b.n	800cd70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	0f1b      	lsrs	r3, r3, #28
 800cd24:	2b09      	cmp	r3, #9
 800cd26:	d80b      	bhi.n	800cd40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	0f1b      	lsrs	r3, r3, #28
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	005b      	lsls	r3, r3, #1
 800cd32:	4619      	mov	r1, r3
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	440b      	add	r3, r1
 800cd38:	3230      	adds	r2, #48	; 0x30
 800cd3a:	b2d2      	uxtb	r2, r2
 800cd3c:	701a      	strb	r2, [r3, #0]
 800cd3e:	e00a      	b.n	800cd56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	0f1b      	lsrs	r3, r3, #28
 800cd44:	b2da      	uxtb	r2, r3
 800cd46:	7dfb      	ldrb	r3, [r7, #23]
 800cd48:	005b      	lsls	r3, r3, #1
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	440b      	add	r3, r1
 800cd50:	3237      	adds	r2, #55	; 0x37
 800cd52:	b2d2      	uxtb	r2, r2
 800cd54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	011b      	lsls	r3, r3, #4
 800cd5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd5c:	7dfb      	ldrb	r3, [r7, #23]
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	3301      	adds	r3, #1
 800cd62:	68ba      	ldr	r2, [r7, #8]
 800cd64:	4413      	add	r3, r2
 800cd66:	2200      	movs	r2, #0
 800cd68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd6a:	7dfb      	ldrb	r3, [r7, #23]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	75fb      	strb	r3, [r7, #23]
 800cd70:	7dfa      	ldrb	r2, [r7, #23]
 800cd72:	79fb      	ldrb	r3, [r7, #7]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d3d3      	bcc.n	800cd20 <IntToUnicode+0x18>
  }
}
 800cd78:	bf00      	nop
 800cd7a:	bf00      	nop
 800cd7c:	371c      	adds	r7, #28
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr
	...

0800cd88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b08a      	sub	sp, #40	; 0x28
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd90:	f107 0314 	add.w	r3, r7, #20
 800cd94:	2200      	movs	r2, #0
 800cd96:	601a      	str	r2, [r3, #0]
 800cd98:	605a      	str	r2, [r3, #4]
 800cd9a:	609a      	str	r2, [r3, #8]
 800cd9c:	60da      	str	r2, [r3, #12]
 800cd9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a1d      	ldr	r2, [pc, #116]	; (800ce1c <HAL_PCD_MspInit+0x94>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d134      	bne.n	800ce14 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cdaa:	2300      	movs	r3, #0
 800cdac:	613b      	str	r3, [r7, #16]
 800cdae:	4b1c      	ldr	r3, [pc, #112]	; (800ce20 <HAL_PCD_MspInit+0x98>)
 800cdb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdb2:	4a1b      	ldr	r2, [pc, #108]	; (800ce20 <HAL_PCD_MspInit+0x98>)
 800cdb4:	f043 0302 	orr.w	r3, r3, #2
 800cdb8:	6313      	str	r3, [r2, #48]	; 0x30
 800cdba:	4b19      	ldr	r3, [pc, #100]	; (800ce20 <HAL_PCD_MspInit+0x98>)
 800cdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdbe:	f003 0302 	and.w	r3, r3, #2
 800cdc2:	613b      	str	r3, [r7, #16]
 800cdc4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800cdc6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800cdca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdcc:	2302      	movs	r3, #2
 800cdce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdd4:	2303      	movs	r3, #3
 800cdd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cdd8:	230c      	movs	r3, #12
 800cdda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cddc:	f107 0314 	add.w	r3, r7, #20
 800cde0:	4619      	mov	r1, r3
 800cde2:	4810      	ldr	r0, [pc, #64]	; (800ce24 <HAL_PCD_MspInit+0x9c>)
 800cde4:	f7f7 fd10 	bl	8004808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cde8:	2300      	movs	r3, #0
 800cdea:	60fb      	str	r3, [r7, #12]
 800cdec:	4b0c      	ldr	r3, [pc, #48]	; (800ce20 <HAL_PCD_MspInit+0x98>)
 800cdee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf0:	4a0b      	ldr	r2, [pc, #44]	; (800ce20 <HAL_PCD_MspInit+0x98>)
 800cdf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cdf6:	6313      	str	r3, [r2, #48]	; 0x30
 800cdf8:	4b09      	ldr	r3, [pc, #36]	; (800ce20 <HAL_PCD_MspInit+0x98>)
 800cdfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce00:	60fb      	str	r3, [r7, #12]
 800ce02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800ce04:	2200      	movs	r2, #0
 800ce06:	2100      	movs	r1, #0
 800ce08:	204d      	movs	r0, #77	; 0x4d
 800ce0a:	f7f7 f8e6 	bl	8003fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ce0e:	204d      	movs	r0, #77	; 0x4d
 800ce10:	f7f7 f8ff 	bl	8004012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ce14:	bf00      	nop
 800ce16:	3728      	adds	r7, #40	; 0x28
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	40040000 	.word	0x40040000
 800ce20:	40023800 	.word	0x40023800
 800ce24:	40020400 	.word	0x40020400

0800ce28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	4610      	mov	r0, r2
 800ce40:	f7fe fb6d 	bl	800b51e <USBD_LL_SetupStage>
}
 800ce44:	bf00      	nop
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	460b      	mov	r3, r1
 800ce56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ce5e:	78fa      	ldrb	r2, [r7, #3]
 800ce60:	6879      	ldr	r1, [r7, #4]
 800ce62:	4613      	mov	r3, r2
 800ce64:	00db      	lsls	r3, r3, #3
 800ce66:	4413      	add	r3, r2
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	440b      	add	r3, r1
 800ce6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	78fb      	ldrb	r3, [r7, #3]
 800ce74:	4619      	mov	r1, r3
 800ce76:	f7fe fba7 	bl	800b5c8 <USBD_LL_DataOutStage>
}
 800ce7a:	bf00      	nop
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b082      	sub	sp, #8
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ce94:	78fa      	ldrb	r2, [r7, #3]
 800ce96:	6879      	ldr	r1, [r7, #4]
 800ce98:	4613      	mov	r3, r2
 800ce9a:	00db      	lsls	r3, r3, #3
 800ce9c:	4413      	add	r3, r2
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	440b      	add	r3, r1
 800cea2:	334c      	adds	r3, #76	; 0x4c
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	78fb      	ldrb	r3, [r7, #3]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	f7fe fc40 	bl	800b72e <USBD_LL_DataInStage>
}
 800ceae:	bf00      	nop
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b082      	sub	sp, #8
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fe fd74 	bl	800b9b2 <USBD_LL_SOF>
}
 800ceca:	bf00      	nop
 800cecc:	3708      	adds	r7, #8
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b084      	sub	sp, #16
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ceda:	2301      	movs	r3, #1
 800cedc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d102      	bne.n	800ceec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cee6:	2300      	movs	r3, #0
 800cee8:	73fb      	strb	r3, [r7, #15]
 800ceea:	e008      	b.n	800cefe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d102      	bne.n	800cefa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cef4:	2301      	movs	r3, #1
 800cef6:	73fb      	strb	r3, [r7, #15]
 800cef8:	e001      	b.n	800cefe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cefa:	f7f4 ffed 	bl	8001ed8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf04:	7bfa      	ldrb	r2, [r7, #15]
 800cf06:	4611      	mov	r1, r2
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fe fd14 	bl	800b936 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7fe fcbc 	bl	800b892 <USBD_LL_Reset>
}
 800cf1a:	bf00      	nop
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
	...

0800cf24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7fe fd0f 	bl	800b956 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	6812      	ldr	r2, [r2, #0]
 800cf46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf4a:	f043 0301 	orr.w	r3, r3, #1
 800cf4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6a1b      	ldr	r3, [r3, #32]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d005      	beq.n	800cf64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf58:	4b04      	ldr	r3, [pc, #16]	; (800cf6c <HAL_PCD_SuspendCallback+0x48>)
 800cf5a:	691b      	ldr	r3, [r3, #16]
 800cf5c:	4a03      	ldr	r2, [pc, #12]	; (800cf6c <HAL_PCD_SuspendCallback+0x48>)
 800cf5e:	f043 0306 	orr.w	r3, r3, #6
 800cf62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf64:	bf00      	nop
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	e000ed00 	.word	0xe000ed00

0800cf70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7fe fcff 	bl	800b982 <USBD_LL_Resume>
}
 800cf84:	bf00      	nop
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	460b      	mov	r3, r1
 800cf96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf9e:	78fa      	ldrb	r2, [r7, #3]
 800cfa0:	4611      	mov	r1, r2
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fe fd57 	bl	800ba56 <USBD_LL_IsoOUTIncomplete>
}
 800cfa8:	bf00      	nop
 800cfaa:	3708      	adds	r7, #8
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfc2:	78fa      	ldrb	r2, [r7, #3]
 800cfc4:	4611      	mov	r1, r2
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fe fd13 	bl	800b9f2 <USBD_LL_IsoINIncomplete>
}
 800cfcc:	bf00      	nop
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fe fd69 	bl	800baba <USBD_LL_DevConnected>
}
 800cfe8:	bf00      	nop
 800cfea:	3708      	adds	r7, #8
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fe fd66 	bl	800bad0 <USBD_LL_DevDisconnected>
}
 800d004:	bf00      	nop
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d140      	bne.n	800d09e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800d01c:	4a22      	ldr	r2, [pc, #136]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a20      	ldr	r2, [pc, #128]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d028:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d02c:	4b1e      	ldr	r3, [pc, #120]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d02e:	4a1f      	ldr	r2, [pc, #124]	; (800d0ac <USBD_LL_Init+0xa0>)
 800d030:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800d032:	4b1d      	ldr	r3, [pc, #116]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d034:	2206      	movs	r2, #6
 800d036:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800d038:	4b1b      	ldr	r3, [pc, #108]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d03a:	2202      	movs	r2, #2
 800d03c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d03e:	4b1a      	ldr	r3, [pc, #104]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d040:	2200      	movs	r2, #0
 800d042:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d044:	4b18      	ldr	r3, [pc, #96]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d046:	2202      	movs	r2, #2
 800d048:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d04a:	4b17      	ldr	r3, [pc, #92]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d04c:	2200      	movs	r2, #0
 800d04e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d050:	4b15      	ldr	r3, [pc, #84]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d052:	2200      	movs	r2, #0
 800d054:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800d056:	4b14      	ldr	r3, [pc, #80]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d058:	2200      	movs	r2, #0
 800d05a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d05c:	4b12      	ldr	r3, [pc, #72]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d05e:	2200      	movs	r2, #0
 800d060:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800d062:	4b11      	ldr	r3, [pc, #68]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d064:	2200      	movs	r2, #0
 800d066:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d068:	4b0f      	ldr	r3, [pc, #60]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d06a:	2200      	movs	r2, #0
 800d06c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800d06e:	480e      	ldr	r0, [pc, #56]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d070:	f7f8 fe9f 	bl	8005db2 <HAL_PCD_Init>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d001      	beq.n	800d07e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d07a:	f7f4 ff2d 	bl	8001ed8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800d07e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d082:	4809      	ldr	r0, [pc, #36]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d084:	f7fa f8f5 	bl	8007272 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800d088:	2280      	movs	r2, #128	; 0x80
 800d08a:	2100      	movs	r1, #0
 800d08c:	4806      	ldr	r0, [pc, #24]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d08e:	f7fa f8a9 	bl	80071e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800d092:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800d096:	2101      	movs	r1, #1
 800d098:	4803      	ldr	r0, [pc, #12]	; (800d0a8 <USBD_LL_Init+0x9c>)
 800d09a:	f7fa f8a3 	bl	80071e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d09e:	2300      	movs	r3, #0
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	200025d4 	.word	0x200025d4
 800d0ac:	40040000 	.word	0x40040000

0800d0b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7f8 ff90 	bl	8005fec <HAL_PCD_Start>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0d0:	7bfb      	ldrb	r3, [r7, #15]
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f000 f942 	bl	800d35c <USBD_Get_USB_Status>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b084      	sub	sp, #16
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	4608      	mov	r0, r1
 800d0f0:	4611      	mov	r1, r2
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	70fb      	strb	r3, [r7, #3]
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	70bb      	strb	r3, [r7, #2]
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d100:	2300      	movs	r3, #0
 800d102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d10e:	78bb      	ldrb	r3, [r7, #2]
 800d110:	883a      	ldrh	r2, [r7, #0]
 800d112:	78f9      	ldrb	r1, [r7, #3]
 800d114:	f7f9 fc61 	bl	80069da <HAL_PCD_EP_Open>
 800d118:	4603      	mov	r3, r0
 800d11a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	4618      	mov	r0, r3
 800d120:	f000 f91c 	bl	800d35c <USBD_Get_USB_Status>
 800d124:	4603      	mov	r3, r0
 800d126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d128:	7bbb      	ldrb	r3, [r7, #14]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b084      	sub	sp, #16
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
 800d13a:	460b      	mov	r3, r1
 800d13c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d142:	2300      	movs	r3, #0
 800d144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d14c:	78fa      	ldrb	r2, [r7, #3]
 800d14e:	4611      	mov	r1, r2
 800d150:	4618      	mov	r0, r3
 800d152:	f7f9 fcaa 	bl	8006aaa <HAL_PCD_EP_Close>
 800d156:	4603      	mov	r3, r0
 800d158:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d15a:	7bfb      	ldrb	r3, [r7, #15]
 800d15c:	4618      	mov	r0, r3
 800d15e:	f000 f8fd 	bl	800d35c <USBD_Get_USB_Status>
 800d162:	4603      	mov	r3, r0
 800d164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d166:	7bbb      	ldrb	r3, [r7, #14]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d180:	2300      	movs	r3, #0
 800d182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d18a:	78fa      	ldrb	r2, [r7, #3]
 800d18c:	4611      	mov	r1, r2
 800d18e:	4618      	mov	r0, r3
 800d190:	f7f9 fd82 	bl	8006c98 <HAL_PCD_EP_SetStall>
 800d194:	4603      	mov	r3, r0
 800d196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d198:	7bfb      	ldrb	r3, [r7, #15]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 f8de 	bl	800d35c <USBD_Get_USB_Status>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b084      	sub	sp, #16
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1c8:	78fa      	ldrb	r2, [r7, #3]
 800d1ca:	4611      	mov	r1, r2
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7f9 fdc7 	bl	8006d60 <HAL_PCD_EP_ClrStall>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1d6:	7bfb      	ldrb	r3, [r7, #15]
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f000 f8bf 	bl	800d35c <USBD_Get_USB_Status>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d204:	2b00      	cmp	r3, #0
 800d206:	da0b      	bge.n	800d220 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d208:	78fb      	ldrb	r3, [r7, #3]
 800d20a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d20e:	68f9      	ldr	r1, [r7, #12]
 800d210:	4613      	mov	r3, r2
 800d212:	00db      	lsls	r3, r3, #3
 800d214:	4413      	add	r3, r2
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	440b      	add	r3, r1
 800d21a:	333e      	adds	r3, #62	; 0x3e
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	e00b      	b.n	800d238 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d220:	78fb      	ldrb	r3, [r7, #3]
 800d222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d226:	68f9      	ldr	r1, [r7, #12]
 800d228:	4613      	mov	r3, r2
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	4413      	add	r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	440b      	add	r3, r1
 800d232:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d236:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3714      	adds	r7, #20
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	460b      	mov	r3, r1
 800d24e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d250:	2300      	movs	r3, #0
 800d252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d254:	2300      	movs	r3, #0
 800d256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d25e:	78fa      	ldrb	r2, [r7, #3]
 800d260:	4611      	mov	r1, r2
 800d262:	4618      	mov	r0, r3
 800d264:	f7f9 fb94 	bl	8006990 <HAL_PCD_SetAddress>
 800d268:	4603      	mov	r3, r0
 800d26a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 f874 	bl	800d35c <USBD_Get_USB_Status>
 800d274:	4603      	mov	r3, r0
 800d276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d278:	7bbb      	ldrb	r3, [r7, #14]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b086      	sub	sp, #24
 800d286:	af00      	add	r7, sp, #0
 800d288:	60f8      	str	r0, [r7, #12]
 800d28a:	607a      	str	r2, [r7, #4]
 800d28c:	603b      	str	r3, [r7, #0]
 800d28e:	460b      	mov	r3, r1
 800d290:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d296:	2300      	movs	r3, #0
 800d298:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d2a0:	7af9      	ldrb	r1, [r7, #11]
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	f7f9 fcad 	bl	8006c04 <HAL_PCD_EP_Transmit>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2ae:	7dfb      	ldrb	r3, [r7, #23]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f000 f853 	bl	800d35c <USBD_Get_USB_Status>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3718      	adds	r7, #24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	607a      	str	r2, [r7, #4]
 800d2ce:	603b      	str	r3, [r7, #0]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d2e2:	7af9      	ldrb	r1, [r7, #11]
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	f7f9 fc29 	bl	8006b3e <HAL_PCD_EP_Receive>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2f0:	7dfb      	ldrb	r3, [r7, #23]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f000 f832 	bl	800d35c <USBD_Get_USB_Status>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3718      	adds	r7, #24
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b082      	sub	sp, #8
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	460b      	mov	r3, r1
 800d310:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d318:	78fa      	ldrb	r2, [r7, #3]
 800d31a:	4611      	mov	r1, r2
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7f9 fc59 	bl	8006bd4 <HAL_PCD_EP_GetRxCount>
 800d322:	4603      	mov	r3, r0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d334:	4b03      	ldr	r3, [pc, #12]	; (800d344 <USBD_static_malloc+0x18>)
}
 800d336:	4618      	mov	r0, r3
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	20002ae0 	.word	0x20002ae0

0800d348 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]

}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	4603      	mov	r3, r0
 800d364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d366:	2300      	movs	r3, #0
 800d368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d36a:	79fb      	ldrb	r3, [r7, #7]
 800d36c:	2b03      	cmp	r3, #3
 800d36e:	d817      	bhi.n	800d3a0 <USBD_Get_USB_Status+0x44>
 800d370:	a201      	add	r2, pc, #4	; (adr r2, 800d378 <USBD_Get_USB_Status+0x1c>)
 800d372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d376:	bf00      	nop
 800d378:	0800d389 	.word	0x0800d389
 800d37c:	0800d38f 	.word	0x0800d38f
 800d380:	0800d395 	.word	0x0800d395
 800d384:	0800d39b 	.word	0x0800d39b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	73fb      	strb	r3, [r7, #15]
    break;
 800d38c:	e00b      	b.n	800d3a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d38e:	2303      	movs	r3, #3
 800d390:	73fb      	strb	r3, [r7, #15]
    break;
 800d392:	e008      	b.n	800d3a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d394:	2301      	movs	r3, #1
 800d396:	73fb      	strb	r3, [r7, #15]
    break;
 800d398:	e005      	b.n	800d3a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d39a:	2303      	movs	r3, #3
 800d39c:	73fb      	strb	r3, [r7, #15]
    break;
 800d39e:	e002      	b.n	800d3a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d3a0:	2303      	movs	r3, #3
 800d3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a4:	bf00      	nop
  }
  return usb_status;
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3714      	adds	r7, #20
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <__errno>:
 800d3b4:	4b01      	ldr	r3, [pc, #4]	; (800d3bc <__errno+0x8>)
 800d3b6:	6818      	ldr	r0, [r3, #0]
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	20000114 	.word	0x20000114

0800d3c0 <__libc_init_array>:
 800d3c0:	b570      	push	{r4, r5, r6, lr}
 800d3c2:	4d0d      	ldr	r5, [pc, #52]	; (800d3f8 <__libc_init_array+0x38>)
 800d3c4:	4c0d      	ldr	r4, [pc, #52]	; (800d3fc <__libc_init_array+0x3c>)
 800d3c6:	1b64      	subs	r4, r4, r5
 800d3c8:	10a4      	asrs	r4, r4, #2
 800d3ca:	2600      	movs	r6, #0
 800d3cc:	42a6      	cmp	r6, r4
 800d3ce:	d109      	bne.n	800d3e4 <__libc_init_array+0x24>
 800d3d0:	4d0b      	ldr	r5, [pc, #44]	; (800d400 <__libc_init_array+0x40>)
 800d3d2:	4c0c      	ldr	r4, [pc, #48]	; (800d404 <__libc_init_array+0x44>)
 800d3d4:	f002 ff30 	bl	8010238 <_init>
 800d3d8:	1b64      	subs	r4, r4, r5
 800d3da:	10a4      	asrs	r4, r4, #2
 800d3dc:	2600      	movs	r6, #0
 800d3de:	42a6      	cmp	r6, r4
 800d3e0:	d105      	bne.n	800d3ee <__libc_init_array+0x2e>
 800d3e2:	bd70      	pop	{r4, r5, r6, pc}
 800d3e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3e8:	4798      	blx	r3
 800d3ea:	3601      	adds	r6, #1
 800d3ec:	e7ee      	b.n	800d3cc <__libc_init_array+0xc>
 800d3ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3f2:	4798      	blx	r3
 800d3f4:	3601      	adds	r6, #1
 800d3f6:	e7f2      	b.n	800d3de <__libc_init_array+0x1e>
 800d3f8:	08010814 	.word	0x08010814
 800d3fc:	08010814 	.word	0x08010814
 800d400:	08010814 	.word	0x08010814
 800d404:	08010818 	.word	0x08010818

0800d408 <memcpy>:
 800d408:	440a      	add	r2, r1
 800d40a:	4291      	cmp	r1, r2
 800d40c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d410:	d100      	bne.n	800d414 <memcpy+0xc>
 800d412:	4770      	bx	lr
 800d414:	b510      	push	{r4, lr}
 800d416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d41a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d41e:	4291      	cmp	r1, r2
 800d420:	d1f9      	bne.n	800d416 <memcpy+0xe>
 800d422:	bd10      	pop	{r4, pc}

0800d424 <memset>:
 800d424:	4402      	add	r2, r0
 800d426:	4603      	mov	r3, r0
 800d428:	4293      	cmp	r3, r2
 800d42a:	d100      	bne.n	800d42e <memset+0xa>
 800d42c:	4770      	bx	lr
 800d42e:	f803 1b01 	strb.w	r1, [r3], #1
 800d432:	e7f9      	b.n	800d428 <memset+0x4>

0800d434 <__cvt>:
 800d434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d438:	ec55 4b10 	vmov	r4, r5, d0
 800d43c:	2d00      	cmp	r5, #0
 800d43e:	460e      	mov	r6, r1
 800d440:	4619      	mov	r1, r3
 800d442:	462b      	mov	r3, r5
 800d444:	bfbb      	ittet	lt
 800d446:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d44a:	461d      	movlt	r5, r3
 800d44c:	2300      	movge	r3, #0
 800d44e:	232d      	movlt	r3, #45	; 0x2d
 800d450:	700b      	strb	r3, [r1, #0]
 800d452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d454:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d458:	4691      	mov	r9, r2
 800d45a:	f023 0820 	bic.w	r8, r3, #32
 800d45e:	bfbc      	itt	lt
 800d460:	4622      	movlt	r2, r4
 800d462:	4614      	movlt	r4, r2
 800d464:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d468:	d005      	beq.n	800d476 <__cvt+0x42>
 800d46a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d46e:	d100      	bne.n	800d472 <__cvt+0x3e>
 800d470:	3601      	adds	r6, #1
 800d472:	2102      	movs	r1, #2
 800d474:	e000      	b.n	800d478 <__cvt+0x44>
 800d476:	2103      	movs	r1, #3
 800d478:	ab03      	add	r3, sp, #12
 800d47a:	9301      	str	r3, [sp, #4]
 800d47c:	ab02      	add	r3, sp, #8
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	ec45 4b10 	vmov	d0, r4, r5
 800d484:	4653      	mov	r3, sl
 800d486:	4632      	mov	r2, r6
 800d488:	f000 fd16 	bl	800deb8 <_dtoa_r>
 800d48c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d490:	4607      	mov	r7, r0
 800d492:	d102      	bne.n	800d49a <__cvt+0x66>
 800d494:	f019 0f01 	tst.w	r9, #1
 800d498:	d022      	beq.n	800d4e0 <__cvt+0xac>
 800d49a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d49e:	eb07 0906 	add.w	r9, r7, r6
 800d4a2:	d110      	bne.n	800d4c6 <__cvt+0x92>
 800d4a4:	783b      	ldrb	r3, [r7, #0]
 800d4a6:	2b30      	cmp	r3, #48	; 0x30
 800d4a8:	d10a      	bne.n	800d4c0 <__cvt+0x8c>
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	4629      	mov	r1, r5
 800d4b2:	f7f3 fb09 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4b6:	b918      	cbnz	r0, 800d4c0 <__cvt+0x8c>
 800d4b8:	f1c6 0601 	rsb	r6, r6, #1
 800d4bc:	f8ca 6000 	str.w	r6, [sl]
 800d4c0:	f8da 3000 	ldr.w	r3, [sl]
 800d4c4:	4499      	add	r9, r3
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	f7f3 fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4d2:	b108      	cbz	r0, 800d4d8 <__cvt+0xa4>
 800d4d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d4d8:	2230      	movs	r2, #48	; 0x30
 800d4da:	9b03      	ldr	r3, [sp, #12]
 800d4dc:	454b      	cmp	r3, r9
 800d4de:	d307      	bcc.n	800d4f0 <__cvt+0xbc>
 800d4e0:	9b03      	ldr	r3, [sp, #12]
 800d4e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4e4:	1bdb      	subs	r3, r3, r7
 800d4e6:	4638      	mov	r0, r7
 800d4e8:	6013      	str	r3, [r2, #0]
 800d4ea:	b004      	add	sp, #16
 800d4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4f0:	1c59      	adds	r1, r3, #1
 800d4f2:	9103      	str	r1, [sp, #12]
 800d4f4:	701a      	strb	r2, [r3, #0]
 800d4f6:	e7f0      	b.n	800d4da <__cvt+0xa6>

0800d4f8 <__exponent>:
 800d4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2900      	cmp	r1, #0
 800d4fe:	bfb8      	it	lt
 800d500:	4249      	neglt	r1, r1
 800d502:	f803 2b02 	strb.w	r2, [r3], #2
 800d506:	bfb4      	ite	lt
 800d508:	222d      	movlt	r2, #45	; 0x2d
 800d50a:	222b      	movge	r2, #43	; 0x2b
 800d50c:	2909      	cmp	r1, #9
 800d50e:	7042      	strb	r2, [r0, #1]
 800d510:	dd2a      	ble.n	800d568 <__exponent+0x70>
 800d512:	f10d 0407 	add.w	r4, sp, #7
 800d516:	46a4      	mov	ip, r4
 800d518:	270a      	movs	r7, #10
 800d51a:	46a6      	mov	lr, r4
 800d51c:	460a      	mov	r2, r1
 800d51e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d522:	fb07 1516 	mls	r5, r7, r6, r1
 800d526:	3530      	adds	r5, #48	; 0x30
 800d528:	2a63      	cmp	r2, #99	; 0x63
 800d52a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d52e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d532:	4631      	mov	r1, r6
 800d534:	dcf1      	bgt.n	800d51a <__exponent+0x22>
 800d536:	3130      	adds	r1, #48	; 0x30
 800d538:	f1ae 0502 	sub.w	r5, lr, #2
 800d53c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d540:	1c44      	adds	r4, r0, #1
 800d542:	4629      	mov	r1, r5
 800d544:	4561      	cmp	r1, ip
 800d546:	d30a      	bcc.n	800d55e <__exponent+0x66>
 800d548:	f10d 0209 	add.w	r2, sp, #9
 800d54c:	eba2 020e 	sub.w	r2, r2, lr
 800d550:	4565      	cmp	r5, ip
 800d552:	bf88      	it	hi
 800d554:	2200      	movhi	r2, #0
 800d556:	4413      	add	r3, r2
 800d558:	1a18      	subs	r0, r3, r0
 800d55a:	b003      	add	sp, #12
 800d55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d55e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d562:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d566:	e7ed      	b.n	800d544 <__exponent+0x4c>
 800d568:	2330      	movs	r3, #48	; 0x30
 800d56a:	3130      	adds	r1, #48	; 0x30
 800d56c:	7083      	strb	r3, [r0, #2]
 800d56e:	70c1      	strb	r1, [r0, #3]
 800d570:	1d03      	adds	r3, r0, #4
 800d572:	e7f1      	b.n	800d558 <__exponent+0x60>

0800d574 <_printf_float>:
 800d574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d578:	ed2d 8b02 	vpush	{d8}
 800d57c:	b08d      	sub	sp, #52	; 0x34
 800d57e:	460c      	mov	r4, r1
 800d580:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d584:	4616      	mov	r6, r2
 800d586:	461f      	mov	r7, r3
 800d588:	4605      	mov	r5, r0
 800d58a:	f001 fb79 	bl	800ec80 <_localeconv_r>
 800d58e:	f8d0 a000 	ldr.w	sl, [r0]
 800d592:	4650      	mov	r0, sl
 800d594:	f7f2 fe1c 	bl	80001d0 <strlen>
 800d598:	2300      	movs	r3, #0
 800d59a:	930a      	str	r3, [sp, #40]	; 0x28
 800d59c:	6823      	ldr	r3, [r4, #0]
 800d59e:	9305      	str	r3, [sp, #20]
 800d5a0:	f8d8 3000 	ldr.w	r3, [r8]
 800d5a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d5a8:	3307      	adds	r3, #7
 800d5aa:	f023 0307 	bic.w	r3, r3, #7
 800d5ae:	f103 0208 	add.w	r2, r3, #8
 800d5b2:	f8c8 2000 	str.w	r2, [r8]
 800d5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d5be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d5c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d5c6:	9307      	str	r3, [sp, #28]
 800d5c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800d5cc:	ee08 0a10 	vmov	s16, r0
 800d5d0:	4b9f      	ldr	r3, [pc, #636]	; (800d850 <_printf_float+0x2dc>)
 800d5d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5da:	f7f3 faa7 	bl	8000b2c <__aeabi_dcmpun>
 800d5de:	bb88      	cbnz	r0, 800d644 <_printf_float+0xd0>
 800d5e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5e4:	4b9a      	ldr	r3, [pc, #616]	; (800d850 <_printf_float+0x2dc>)
 800d5e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ea:	f7f3 fa81 	bl	8000af0 <__aeabi_dcmple>
 800d5ee:	bb48      	cbnz	r0, 800d644 <_printf_float+0xd0>
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	4640      	mov	r0, r8
 800d5f6:	4649      	mov	r1, r9
 800d5f8:	f7f3 fa70 	bl	8000adc <__aeabi_dcmplt>
 800d5fc:	b110      	cbz	r0, 800d604 <_printf_float+0x90>
 800d5fe:	232d      	movs	r3, #45	; 0x2d
 800d600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d604:	4b93      	ldr	r3, [pc, #588]	; (800d854 <_printf_float+0x2e0>)
 800d606:	4894      	ldr	r0, [pc, #592]	; (800d858 <_printf_float+0x2e4>)
 800d608:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d60c:	bf94      	ite	ls
 800d60e:	4698      	movls	r8, r3
 800d610:	4680      	movhi	r8, r0
 800d612:	2303      	movs	r3, #3
 800d614:	6123      	str	r3, [r4, #16]
 800d616:	9b05      	ldr	r3, [sp, #20]
 800d618:	f023 0204 	bic.w	r2, r3, #4
 800d61c:	6022      	str	r2, [r4, #0]
 800d61e:	f04f 0900 	mov.w	r9, #0
 800d622:	9700      	str	r7, [sp, #0]
 800d624:	4633      	mov	r3, r6
 800d626:	aa0b      	add	r2, sp, #44	; 0x2c
 800d628:	4621      	mov	r1, r4
 800d62a:	4628      	mov	r0, r5
 800d62c:	f000 f9d8 	bl	800d9e0 <_printf_common>
 800d630:	3001      	adds	r0, #1
 800d632:	f040 8090 	bne.w	800d756 <_printf_float+0x1e2>
 800d636:	f04f 30ff 	mov.w	r0, #4294967295
 800d63a:	b00d      	add	sp, #52	; 0x34
 800d63c:	ecbd 8b02 	vpop	{d8}
 800d640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d644:	4642      	mov	r2, r8
 800d646:	464b      	mov	r3, r9
 800d648:	4640      	mov	r0, r8
 800d64a:	4649      	mov	r1, r9
 800d64c:	f7f3 fa6e 	bl	8000b2c <__aeabi_dcmpun>
 800d650:	b140      	cbz	r0, 800d664 <_printf_float+0xf0>
 800d652:	464b      	mov	r3, r9
 800d654:	2b00      	cmp	r3, #0
 800d656:	bfbc      	itt	lt
 800d658:	232d      	movlt	r3, #45	; 0x2d
 800d65a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d65e:	487f      	ldr	r0, [pc, #508]	; (800d85c <_printf_float+0x2e8>)
 800d660:	4b7f      	ldr	r3, [pc, #508]	; (800d860 <_printf_float+0x2ec>)
 800d662:	e7d1      	b.n	800d608 <_printf_float+0x94>
 800d664:	6863      	ldr	r3, [r4, #4]
 800d666:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d66a:	9206      	str	r2, [sp, #24]
 800d66c:	1c5a      	adds	r2, r3, #1
 800d66e:	d13f      	bne.n	800d6f0 <_printf_float+0x17c>
 800d670:	2306      	movs	r3, #6
 800d672:	6063      	str	r3, [r4, #4]
 800d674:	9b05      	ldr	r3, [sp, #20]
 800d676:	6861      	ldr	r1, [r4, #4]
 800d678:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d67c:	2300      	movs	r3, #0
 800d67e:	9303      	str	r3, [sp, #12]
 800d680:	ab0a      	add	r3, sp, #40	; 0x28
 800d682:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d686:	ab09      	add	r3, sp, #36	; 0x24
 800d688:	ec49 8b10 	vmov	d0, r8, r9
 800d68c:	9300      	str	r3, [sp, #0]
 800d68e:	6022      	str	r2, [r4, #0]
 800d690:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d694:	4628      	mov	r0, r5
 800d696:	f7ff fecd 	bl	800d434 <__cvt>
 800d69a:	9b06      	ldr	r3, [sp, #24]
 800d69c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d69e:	2b47      	cmp	r3, #71	; 0x47
 800d6a0:	4680      	mov	r8, r0
 800d6a2:	d108      	bne.n	800d6b6 <_printf_float+0x142>
 800d6a4:	1cc8      	adds	r0, r1, #3
 800d6a6:	db02      	blt.n	800d6ae <_printf_float+0x13a>
 800d6a8:	6863      	ldr	r3, [r4, #4]
 800d6aa:	4299      	cmp	r1, r3
 800d6ac:	dd41      	ble.n	800d732 <_printf_float+0x1be>
 800d6ae:	f1ab 0b02 	sub.w	fp, fp, #2
 800d6b2:	fa5f fb8b 	uxtb.w	fp, fp
 800d6b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d6ba:	d820      	bhi.n	800d6fe <_printf_float+0x18a>
 800d6bc:	3901      	subs	r1, #1
 800d6be:	465a      	mov	r2, fp
 800d6c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d6c4:	9109      	str	r1, [sp, #36]	; 0x24
 800d6c6:	f7ff ff17 	bl	800d4f8 <__exponent>
 800d6ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6cc:	1813      	adds	r3, r2, r0
 800d6ce:	2a01      	cmp	r2, #1
 800d6d0:	4681      	mov	r9, r0
 800d6d2:	6123      	str	r3, [r4, #16]
 800d6d4:	dc02      	bgt.n	800d6dc <_printf_float+0x168>
 800d6d6:	6822      	ldr	r2, [r4, #0]
 800d6d8:	07d2      	lsls	r2, r2, #31
 800d6da:	d501      	bpl.n	800d6e0 <_printf_float+0x16c>
 800d6dc:	3301      	adds	r3, #1
 800d6de:	6123      	str	r3, [r4, #16]
 800d6e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d09c      	beq.n	800d622 <_printf_float+0xae>
 800d6e8:	232d      	movs	r3, #45	; 0x2d
 800d6ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6ee:	e798      	b.n	800d622 <_printf_float+0xae>
 800d6f0:	9a06      	ldr	r2, [sp, #24]
 800d6f2:	2a47      	cmp	r2, #71	; 0x47
 800d6f4:	d1be      	bne.n	800d674 <_printf_float+0x100>
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d1bc      	bne.n	800d674 <_printf_float+0x100>
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e7b9      	b.n	800d672 <_printf_float+0xfe>
 800d6fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d702:	d118      	bne.n	800d736 <_printf_float+0x1c2>
 800d704:	2900      	cmp	r1, #0
 800d706:	6863      	ldr	r3, [r4, #4]
 800d708:	dd0b      	ble.n	800d722 <_printf_float+0x1ae>
 800d70a:	6121      	str	r1, [r4, #16]
 800d70c:	b913      	cbnz	r3, 800d714 <_printf_float+0x1a0>
 800d70e:	6822      	ldr	r2, [r4, #0]
 800d710:	07d0      	lsls	r0, r2, #31
 800d712:	d502      	bpl.n	800d71a <_printf_float+0x1a6>
 800d714:	3301      	adds	r3, #1
 800d716:	440b      	add	r3, r1
 800d718:	6123      	str	r3, [r4, #16]
 800d71a:	65a1      	str	r1, [r4, #88]	; 0x58
 800d71c:	f04f 0900 	mov.w	r9, #0
 800d720:	e7de      	b.n	800d6e0 <_printf_float+0x16c>
 800d722:	b913      	cbnz	r3, 800d72a <_printf_float+0x1b6>
 800d724:	6822      	ldr	r2, [r4, #0]
 800d726:	07d2      	lsls	r2, r2, #31
 800d728:	d501      	bpl.n	800d72e <_printf_float+0x1ba>
 800d72a:	3302      	adds	r3, #2
 800d72c:	e7f4      	b.n	800d718 <_printf_float+0x1a4>
 800d72e:	2301      	movs	r3, #1
 800d730:	e7f2      	b.n	800d718 <_printf_float+0x1a4>
 800d732:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d738:	4299      	cmp	r1, r3
 800d73a:	db05      	blt.n	800d748 <_printf_float+0x1d4>
 800d73c:	6823      	ldr	r3, [r4, #0]
 800d73e:	6121      	str	r1, [r4, #16]
 800d740:	07d8      	lsls	r0, r3, #31
 800d742:	d5ea      	bpl.n	800d71a <_printf_float+0x1a6>
 800d744:	1c4b      	adds	r3, r1, #1
 800d746:	e7e7      	b.n	800d718 <_printf_float+0x1a4>
 800d748:	2900      	cmp	r1, #0
 800d74a:	bfd4      	ite	le
 800d74c:	f1c1 0202 	rsble	r2, r1, #2
 800d750:	2201      	movgt	r2, #1
 800d752:	4413      	add	r3, r2
 800d754:	e7e0      	b.n	800d718 <_printf_float+0x1a4>
 800d756:	6823      	ldr	r3, [r4, #0]
 800d758:	055a      	lsls	r2, r3, #21
 800d75a:	d407      	bmi.n	800d76c <_printf_float+0x1f8>
 800d75c:	6923      	ldr	r3, [r4, #16]
 800d75e:	4642      	mov	r2, r8
 800d760:	4631      	mov	r1, r6
 800d762:	4628      	mov	r0, r5
 800d764:	47b8      	blx	r7
 800d766:	3001      	adds	r0, #1
 800d768:	d12c      	bne.n	800d7c4 <_printf_float+0x250>
 800d76a:	e764      	b.n	800d636 <_printf_float+0xc2>
 800d76c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d770:	f240 80e0 	bls.w	800d934 <_printf_float+0x3c0>
 800d774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d778:	2200      	movs	r2, #0
 800d77a:	2300      	movs	r3, #0
 800d77c:	f7f3 f9a4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d780:	2800      	cmp	r0, #0
 800d782:	d034      	beq.n	800d7ee <_printf_float+0x27a>
 800d784:	4a37      	ldr	r2, [pc, #220]	; (800d864 <_printf_float+0x2f0>)
 800d786:	2301      	movs	r3, #1
 800d788:	4631      	mov	r1, r6
 800d78a:	4628      	mov	r0, r5
 800d78c:	47b8      	blx	r7
 800d78e:	3001      	adds	r0, #1
 800d790:	f43f af51 	beq.w	800d636 <_printf_float+0xc2>
 800d794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d798:	429a      	cmp	r2, r3
 800d79a:	db02      	blt.n	800d7a2 <_printf_float+0x22e>
 800d79c:	6823      	ldr	r3, [r4, #0]
 800d79e:	07d8      	lsls	r0, r3, #31
 800d7a0:	d510      	bpl.n	800d7c4 <_printf_float+0x250>
 800d7a2:	ee18 3a10 	vmov	r3, s16
 800d7a6:	4652      	mov	r2, sl
 800d7a8:	4631      	mov	r1, r6
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	47b8      	blx	r7
 800d7ae:	3001      	adds	r0, #1
 800d7b0:	f43f af41 	beq.w	800d636 <_printf_float+0xc2>
 800d7b4:	f04f 0800 	mov.w	r8, #0
 800d7b8:	f104 091a 	add.w	r9, r4, #26
 800d7bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	4543      	cmp	r3, r8
 800d7c2:	dc09      	bgt.n	800d7d8 <_printf_float+0x264>
 800d7c4:	6823      	ldr	r3, [r4, #0]
 800d7c6:	079b      	lsls	r3, r3, #30
 800d7c8:	f100 8105 	bmi.w	800d9d6 <_printf_float+0x462>
 800d7cc:	68e0      	ldr	r0, [r4, #12]
 800d7ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7d0:	4298      	cmp	r0, r3
 800d7d2:	bfb8      	it	lt
 800d7d4:	4618      	movlt	r0, r3
 800d7d6:	e730      	b.n	800d63a <_printf_float+0xc6>
 800d7d8:	2301      	movs	r3, #1
 800d7da:	464a      	mov	r2, r9
 800d7dc:	4631      	mov	r1, r6
 800d7de:	4628      	mov	r0, r5
 800d7e0:	47b8      	blx	r7
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	f43f af27 	beq.w	800d636 <_printf_float+0xc2>
 800d7e8:	f108 0801 	add.w	r8, r8, #1
 800d7ec:	e7e6      	b.n	800d7bc <_printf_float+0x248>
 800d7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	dc39      	bgt.n	800d868 <_printf_float+0x2f4>
 800d7f4:	4a1b      	ldr	r2, [pc, #108]	; (800d864 <_printf_float+0x2f0>)
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	4631      	mov	r1, r6
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	47b8      	blx	r7
 800d7fe:	3001      	adds	r0, #1
 800d800:	f43f af19 	beq.w	800d636 <_printf_float+0xc2>
 800d804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d808:	4313      	orrs	r3, r2
 800d80a:	d102      	bne.n	800d812 <_printf_float+0x29e>
 800d80c:	6823      	ldr	r3, [r4, #0]
 800d80e:	07d9      	lsls	r1, r3, #31
 800d810:	d5d8      	bpl.n	800d7c4 <_printf_float+0x250>
 800d812:	ee18 3a10 	vmov	r3, s16
 800d816:	4652      	mov	r2, sl
 800d818:	4631      	mov	r1, r6
 800d81a:	4628      	mov	r0, r5
 800d81c:	47b8      	blx	r7
 800d81e:	3001      	adds	r0, #1
 800d820:	f43f af09 	beq.w	800d636 <_printf_float+0xc2>
 800d824:	f04f 0900 	mov.w	r9, #0
 800d828:	f104 0a1a 	add.w	sl, r4, #26
 800d82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d82e:	425b      	negs	r3, r3
 800d830:	454b      	cmp	r3, r9
 800d832:	dc01      	bgt.n	800d838 <_printf_float+0x2c4>
 800d834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d836:	e792      	b.n	800d75e <_printf_float+0x1ea>
 800d838:	2301      	movs	r3, #1
 800d83a:	4652      	mov	r2, sl
 800d83c:	4631      	mov	r1, r6
 800d83e:	4628      	mov	r0, r5
 800d840:	47b8      	blx	r7
 800d842:	3001      	adds	r0, #1
 800d844:	f43f aef7 	beq.w	800d636 <_printf_float+0xc2>
 800d848:	f109 0901 	add.w	r9, r9, #1
 800d84c:	e7ee      	b.n	800d82c <_printf_float+0x2b8>
 800d84e:	bf00      	nop
 800d850:	7fefffff 	.word	0x7fefffff
 800d854:	08010438 	.word	0x08010438
 800d858:	0801043c 	.word	0x0801043c
 800d85c:	08010444 	.word	0x08010444
 800d860:	08010440 	.word	0x08010440
 800d864:	08010448 	.word	0x08010448
 800d868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d86a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d86c:	429a      	cmp	r2, r3
 800d86e:	bfa8      	it	ge
 800d870:	461a      	movge	r2, r3
 800d872:	2a00      	cmp	r2, #0
 800d874:	4691      	mov	r9, r2
 800d876:	dc37      	bgt.n	800d8e8 <_printf_float+0x374>
 800d878:	f04f 0b00 	mov.w	fp, #0
 800d87c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d880:	f104 021a 	add.w	r2, r4, #26
 800d884:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d886:	9305      	str	r3, [sp, #20]
 800d888:	eba3 0309 	sub.w	r3, r3, r9
 800d88c:	455b      	cmp	r3, fp
 800d88e:	dc33      	bgt.n	800d8f8 <_printf_float+0x384>
 800d890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d894:	429a      	cmp	r2, r3
 800d896:	db3b      	blt.n	800d910 <_printf_float+0x39c>
 800d898:	6823      	ldr	r3, [r4, #0]
 800d89a:	07da      	lsls	r2, r3, #31
 800d89c:	d438      	bmi.n	800d910 <_printf_float+0x39c>
 800d89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8a0:	9a05      	ldr	r2, [sp, #20]
 800d8a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8a4:	1a9a      	subs	r2, r3, r2
 800d8a6:	eba3 0901 	sub.w	r9, r3, r1
 800d8aa:	4591      	cmp	r9, r2
 800d8ac:	bfa8      	it	ge
 800d8ae:	4691      	movge	r9, r2
 800d8b0:	f1b9 0f00 	cmp.w	r9, #0
 800d8b4:	dc35      	bgt.n	800d922 <_printf_float+0x3ae>
 800d8b6:	f04f 0800 	mov.w	r8, #0
 800d8ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8be:	f104 0a1a 	add.w	sl, r4, #26
 800d8c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8c6:	1a9b      	subs	r3, r3, r2
 800d8c8:	eba3 0309 	sub.w	r3, r3, r9
 800d8cc:	4543      	cmp	r3, r8
 800d8ce:	f77f af79 	ble.w	800d7c4 <_printf_float+0x250>
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	4652      	mov	r2, sl
 800d8d6:	4631      	mov	r1, r6
 800d8d8:	4628      	mov	r0, r5
 800d8da:	47b8      	blx	r7
 800d8dc:	3001      	adds	r0, #1
 800d8de:	f43f aeaa 	beq.w	800d636 <_printf_float+0xc2>
 800d8e2:	f108 0801 	add.w	r8, r8, #1
 800d8e6:	e7ec      	b.n	800d8c2 <_printf_float+0x34e>
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	4631      	mov	r1, r6
 800d8ec:	4642      	mov	r2, r8
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	47b8      	blx	r7
 800d8f2:	3001      	adds	r0, #1
 800d8f4:	d1c0      	bne.n	800d878 <_printf_float+0x304>
 800d8f6:	e69e      	b.n	800d636 <_printf_float+0xc2>
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	4631      	mov	r1, r6
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	9205      	str	r2, [sp, #20]
 800d900:	47b8      	blx	r7
 800d902:	3001      	adds	r0, #1
 800d904:	f43f ae97 	beq.w	800d636 <_printf_float+0xc2>
 800d908:	9a05      	ldr	r2, [sp, #20]
 800d90a:	f10b 0b01 	add.w	fp, fp, #1
 800d90e:	e7b9      	b.n	800d884 <_printf_float+0x310>
 800d910:	ee18 3a10 	vmov	r3, s16
 800d914:	4652      	mov	r2, sl
 800d916:	4631      	mov	r1, r6
 800d918:	4628      	mov	r0, r5
 800d91a:	47b8      	blx	r7
 800d91c:	3001      	adds	r0, #1
 800d91e:	d1be      	bne.n	800d89e <_printf_float+0x32a>
 800d920:	e689      	b.n	800d636 <_printf_float+0xc2>
 800d922:	9a05      	ldr	r2, [sp, #20]
 800d924:	464b      	mov	r3, r9
 800d926:	4442      	add	r2, r8
 800d928:	4631      	mov	r1, r6
 800d92a:	4628      	mov	r0, r5
 800d92c:	47b8      	blx	r7
 800d92e:	3001      	adds	r0, #1
 800d930:	d1c1      	bne.n	800d8b6 <_printf_float+0x342>
 800d932:	e680      	b.n	800d636 <_printf_float+0xc2>
 800d934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d936:	2a01      	cmp	r2, #1
 800d938:	dc01      	bgt.n	800d93e <_printf_float+0x3ca>
 800d93a:	07db      	lsls	r3, r3, #31
 800d93c:	d538      	bpl.n	800d9b0 <_printf_float+0x43c>
 800d93e:	2301      	movs	r3, #1
 800d940:	4642      	mov	r2, r8
 800d942:	4631      	mov	r1, r6
 800d944:	4628      	mov	r0, r5
 800d946:	47b8      	blx	r7
 800d948:	3001      	adds	r0, #1
 800d94a:	f43f ae74 	beq.w	800d636 <_printf_float+0xc2>
 800d94e:	ee18 3a10 	vmov	r3, s16
 800d952:	4652      	mov	r2, sl
 800d954:	4631      	mov	r1, r6
 800d956:	4628      	mov	r0, r5
 800d958:	47b8      	blx	r7
 800d95a:	3001      	adds	r0, #1
 800d95c:	f43f ae6b 	beq.w	800d636 <_printf_float+0xc2>
 800d960:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d964:	2200      	movs	r2, #0
 800d966:	2300      	movs	r3, #0
 800d968:	f7f3 f8ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800d96c:	b9d8      	cbnz	r0, 800d9a6 <_printf_float+0x432>
 800d96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d970:	f108 0201 	add.w	r2, r8, #1
 800d974:	3b01      	subs	r3, #1
 800d976:	4631      	mov	r1, r6
 800d978:	4628      	mov	r0, r5
 800d97a:	47b8      	blx	r7
 800d97c:	3001      	adds	r0, #1
 800d97e:	d10e      	bne.n	800d99e <_printf_float+0x42a>
 800d980:	e659      	b.n	800d636 <_printf_float+0xc2>
 800d982:	2301      	movs	r3, #1
 800d984:	4652      	mov	r2, sl
 800d986:	4631      	mov	r1, r6
 800d988:	4628      	mov	r0, r5
 800d98a:	47b8      	blx	r7
 800d98c:	3001      	adds	r0, #1
 800d98e:	f43f ae52 	beq.w	800d636 <_printf_float+0xc2>
 800d992:	f108 0801 	add.w	r8, r8, #1
 800d996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d998:	3b01      	subs	r3, #1
 800d99a:	4543      	cmp	r3, r8
 800d99c:	dcf1      	bgt.n	800d982 <_printf_float+0x40e>
 800d99e:	464b      	mov	r3, r9
 800d9a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d9a4:	e6dc      	b.n	800d760 <_printf_float+0x1ec>
 800d9a6:	f04f 0800 	mov.w	r8, #0
 800d9aa:	f104 0a1a 	add.w	sl, r4, #26
 800d9ae:	e7f2      	b.n	800d996 <_printf_float+0x422>
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	4642      	mov	r2, r8
 800d9b4:	e7df      	b.n	800d976 <_printf_float+0x402>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	464a      	mov	r2, r9
 800d9ba:	4631      	mov	r1, r6
 800d9bc:	4628      	mov	r0, r5
 800d9be:	47b8      	blx	r7
 800d9c0:	3001      	adds	r0, #1
 800d9c2:	f43f ae38 	beq.w	800d636 <_printf_float+0xc2>
 800d9c6:	f108 0801 	add.w	r8, r8, #1
 800d9ca:	68e3      	ldr	r3, [r4, #12]
 800d9cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9ce:	1a5b      	subs	r3, r3, r1
 800d9d0:	4543      	cmp	r3, r8
 800d9d2:	dcf0      	bgt.n	800d9b6 <_printf_float+0x442>
 800d9d4:	e6fa      	b.n	800d7cc <_printf_float+0x258>
 800d9d6:	f04f 0800 	mov.w	r8, #0
 800d9da:	f104 0919 	add.w	r9, r4, #25
 800d9de:	e7f4      	b.n	800d9ca <_printf_float+0x456>

0800d9e0 <_printf_common>:
 800d9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e4:	4616      	mov	r6, r2
 800d9e6:	4699      	mov	r9, r3
 800d9e8:	688a      	ldr	r2, [r1, #8]
 800d9ea:	690b      	ldr	r3, [r1, #16]
 800d9ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	bfb8      	it	lt
 800d9f4:	4613      	movlt	r3, r2
 800d9f6:	6033      	str	r3, [r6, #0]
 800d9f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9fc:	4607      	mov	r7, r0
 800d9fe:	460c      	mov	r4, r1
 800da00:	b10a      	cbz	r2, 800da06 <_printf_common+0x26>
 800da02:	3301      	adds	r3, #1
 800da04:	6033      	str	r3, [r6, #0]
 800da06:	6823      	ldr	r3, [r4, #0]
 800da08:	0699      	lsls	r1, r3, #26
 800da0a:	bf42      	ittt	mi
 800da0c:	6833      	ldrmi	r3, [r6, #0]
 800da0e:	3302      	addmi	r3, #2
 800da10:	6033      	strmi	r3, [r6, #0]
 800da12:	6825      	ldr	r5, [r4, #0]
 800da14:	f015 0506 	ands.w	r5, r5, #6
 800da18:	d106      	bne.n	800da28 <_printf_common+0x48>
 800da1a:	f104 0a19 	add.w	sl, r4, #25
 800da1e:	68e3      	ldr	r3, [r4, #12]
 800da20:	6832      	ldr	r2, [r6, #0]
 800da22:	1a9b      	subs	r3, r3, r2
 800da24:	42ab      	cmp	r3, r5
 800da26:	dc26      	bgt.n	800da76 <_printf_common+0x96>
 800da28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da2c:	1e13      	subs	r3, r2, #0
 800da2e:	6822      	ldr	r2, [r4, #0]
 800da30:	bf18      	it	ne
 800da32:	2301      	movne	r3, #1
 800da34:	0692      	lsls	r2, r2, #26
 800da36:	d42b      	bmi.n	800da90 <_printf_common+0xb0>
 800da38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da3c:	4649      	mov	r1, r9
 800da3e:	4638      	mov	r0, r7
 800da40:	47c0      	blx	r8
 800da42:	3001      	adds	r0, #1
 800da44:	d01e      	beq.n	800da84 <_printf_common+0xa4>
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	68e5      	ldr	r5, [r4, #12]
 800da4a:	6832      	ldr	r2, [r6, #0]
 800da4c:	f003 0306 	and.w	r3, r3, #6
 800da50:	2b04      	cmp	r3, #4
 800da52:	bf08      	it	eq
 800da54:	1aad      	subeq	r5, r5, r2
 800da56:	68a3      	ldr	r3, [r4, #8]
 800da58:	6922      	ldr	r2, [r4, #16]
 800da5a:	bf0c      	ite	eq
 800da5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da60:	2500      	movne	r5, #0
 800da62:	4293      	cmp	r3, r2
 800da64:	bfc4      	itt	gt
 800da66:	1a9b      	subgt	r3, r3, r2
 800da68:	18ed      	addgt	r5, r5, r3
 800da6a:	2600      	movs	r6, #0
 800da6c:	341a      	adds	r4, #26
 800da6e:	42b5      	cmp	r5, r6
 800da70:	d11a      	bne.n	800daa8 <_printf_common+0xc8>
 800da72:	2000      	movs	r0, #0
 800da74:	e008      	b.n	800da88 <_printf_common+0xa8>
 800da76:	2301      	movs	r3, #1
 800da78:	4652      	mov	r2, sl
 800da7a:	4649      	mov	r1, r9
 800da7c:	4638      	mov	r0, r7
 800da7e:	47c0      	blx	r8
 800da80:	3001      	adds	r0, #1
 800da82:	d103      	bne.n	800da8c <_printf_common+0xac>
 800da84:	f04f 30ff 	mov.w	r0, #4294967295
 800da88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da8c:	3501      	adds	r5, #1
 800da8e:	e7c6      	b.n	800da1e <_printf_common+0x3e>
 800da90:	18e1      	adds	r1, r4, r3
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	2030      	movs	r0, #48	; 0x30
 800da96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da9a:	4422      	add	r2, r4
 800da9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800daa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800daa4:	3302      	adds	r3, #2
 800daa6:	e7c7      	b.n	800da38 <_printf_common+0x58>
 800daa8:	2301      	movs	r3, #1
 800daaa:	4622      	mov	r2, r4
 800daac:	4649      	mov	r1, r9
 800daae:	4638      	mov	r0, r7
 800dab0:	47c0      	blx	r8
 800dab2:	3001      	adds	r0, #1
 800dab4:	d0e6      	beq.n	800da84 <_printf_common+0xa4>
 800dab6:	3601      	adds	r6, #1
 800dab8:	e7d9      	b.n	800da6e <_printf_common+0x8e>
	...

0800dabc <_printf_i>:
 800dabc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dac0:	7e0f      	ldrb	r7, [r1, #24]
 800dac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dac4:	2f78      	cmp	r7, #120	; 0x78
 800dac6:	4691      	mov	r9, r2
 800dac8:	4680      	mov	r8, r0
 800daca:	460c      	mov	r4, r1
 800dacc:	469a      	mov	sl, r3
 800dace:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dad2:	d807      	bhi.n	800dae4 <_printf_i+0x28>
 800dad4:	2f62      	cmp	r7, #98	; 0x62
 800dad6:	d80a      	bhi.n	800daee <_printf_i+0x32>
 800dad8:	2f00      	cmp	r7, #0
 800dada:	f000 80d8 	beq.w	800dc8e <_printf_i+0x1d2>
 800dade:	2f58      	cmp	r7, #88	; 0x58
 800dae0:	f000 80a3 	beq.w	800dc2a <_printf_i+0x16e>
 800dae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800daec:	e03a      	b.n	800db64 <_printf_i+0xa8>
 800daee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800daf2:	2b15      	cmp	r3, #21
 800daf4:	d8f6      	bhi.n	800dae4 <_printf_i+0x28>
 800daf6:	a101      	add	r1, pc, #4	; (adr r1, 800dafc <_printf_i+0x40>)
 800daf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dafc:	0800db55 	.word	0x0800db55
 800db00:	0800db69 	.word	0x0800db69
 800db04:	0800dae5 	.word	0x0800dae5
 800db08:	0800dae5 	.word	0x0800dae5
 800db0c:	0800dae5 	.word	0x0800dae5
 800db10:	0800dae5 	.word	0x0800dae5
 800db14:	0800db69 	.word	0x0800db69
 800db18:	0800dae5 	.word	0x0800dae5
 800db1c:	0800dae5 	.word	0x0800dae5
 800db20:	0800dae5 	.word	0x0800dae5
 800db24:	0800dae5 	.word	0x0800dae5
 800db28:	0800dc75 	.word	0x0800dc75
 800db2c:	0800db99 	.word	0x0800db99
 800db30:	0800dc57 	.word	0x0800dc57
 800db34:	0800dae5 	.word	0x0800dae5
 800db38:	0800dae5 	.word	0x0800dae5
 800db3c:	0800dc97 	.word	0x0800dc97
 800db40:	0800dae5 	.word	0x0800dae5
 800db44:	0800db99 	.word	0x0800db99
 800db48:	0800dae5 	.word	0x0800dae5
 800db4c:	0800dae5 	.word	0x0800dae5
 800db50:	0800dc5f 	.word	0x0800dc5f
 800db54:	682b      	ldr	r3, [r5, #0]
 800db56:	1d1a      	adds	r2, r3, #4
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	602a      	str	r2, [r5, #0]
 800db5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db64:	2301      	movs	r3, #1
 800db66:	e0a3      	b.n	800dcb0 <_printf_i+0x1f4>
 800db68:	6820      	ldr	r0, [r4, #0]
 800db6a:	6829      	ldr	r1, [r5, #0]
 800db6c:	0606      	lsls	r6, r0, #24
 800db6e:	f101 0304 	add.w	r3, r1, #4
 800db72:	d50a      	bpl.n	800db8a <_printf_i+0xce>
 800db74:	680e      	ldr	r6, [r1, #0]
 800db76:	602b      	str	r3, [r5, #0]
 800db78:	2e00      	cmp	r6, #0
 800db7a:	da03      	bge.n	800db84 <_printf_i+0xc8>
 800db7c:	232d      	movs	r3, #45	; 0x2d
 800db7e:	4276      	negs	r6, r6
 800db80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db84:	485e      	ldr	r0, [pc, #376]	; (800dd00 <_printf_i+0x244>)
 800db86:	230a      	movs	r3, #10
 800db88:	e019      	b.n	800dbbe <_printf_i+0x102>
 800db8a:	680e      	ldr	r6, [r1, #0]
 800db8c:	602b      	str	r3, [r5, #0]
 800db8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800db92:	bf18      	it	ne
 800db94:	b236      	sxthne	r6, r6
 800db96:	e7ef      	b.n	800db78 <_printf_i+0xbc>
 800db98:	682b      	ldr	r3, [r5, #0]
 800db9a:	6820      	ldr	r0, [r4, #0]
 800db9c:	1d19      	adds	r1, r3, #4
 800db9e:	6029      	str	r1, [r5, #0]
 800dba0:	0601      	lsls	r1, r0, #24
 800dba2:	d501      	bpl.n	800dba8 <_printf_i+0xec>
 800dba4:	681e      	ldr	r6, [r3, #0]
 800dba6:	e002      	b.n	800dbae <_printf_i+0xf2>
 800dba8:	0646      	lsls	r6, r0, #25
 800dbaa:	d5fb      	bpl.n	800dba4 <_printf_i+0xe8>
 800dbac:	881e      	ldrh	r6, [r3, #0]
 800dbae:	4854      	ldr	r0, [pc, #336]	; (800dd00 <_printf_i+0x244>)
 800dbb0:	2f6f      	cmp	r7, #111	; 0x6f
 800dbb2:	bf0c      	ite	eq
 800dbb4:	2308      	moveq	r3, #8
 800dbb6:	230a      	movne	r3, #10
 800dbb8:	2100      	movs	r1, #0
 800dbba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dbbe:	6865      	ldr	r5, [r4, #4]
 800dbc0:	60a5      	str	r5, [r4, #8]
 800dbc2:	2d00      	cmp	r5, #0
 800dbc4:	bfa2      	ittt	ge
 800dbc6:	6821      	ldrge	r1, [r4, #0]
 800dbc8:	f021 0104 	bicge.w	r1, r1, #4
 800dbcc:	6021      	strge	r1, [r4, #0]
 800dbce:	b90e      	cbnz	r6, 800dbd4 <_printf_i+0x118>
 800dbd0:	2d00      	cmp	r5, #0
 800dbd2:	d04d      	beq.n	800dc70 <_printf_i+0x1b4>
 800dbd4:	4615      	mov	r5, r2
 800dbd6:	fbb6 f1f3 	udiv	r1, r6, r3
 800dbda:	fb03 6711 	mls	r7, r3, r1, r6
 800dbde:	5dc7      	ldrb	r7, [r0, r7]
 800dbe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dbe4:	4637      	mov	r7, r6
 800dbe6:	42bb      	cmp	r3, r7
 800dbe8:	460e      	mov	r6, r1
 800dbea:	d9f4      	bls.n	800dbd6 <_printf_i+0x11a>
 800dbec:	2b08      	cmp	r3, #8
 800dbee:	d10b      	bne.n	800dc08 <_printf_i+0x14c>
 800dbf0:	6823      	ldr	r3, [r4, #0]
 800dbf2:	07de      	lsls	r6, r3, #31
 800dbf4:	d508      	bpl.n	800dc08 <_printf_i+0x14c>
 800dbf6:	6923      	ldr	r3, [r4, #16]
 800dbf8:	6861      	ldr	r1, [r4, #4]
 800dbfa:	4299      	cmp	r1, r3
 800dbfc:	bfde      	ittt	le
 800dbfe:	2330      	movle	r3, #48	; 0x30
 800dc00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc08:	1b52      	subs	r2, r2, r5
 800dc0a:	6122      	str	r2, [r4, #16]
 800dc0c:	f8cd a000 	str.w	sl, [sp]
 800dc10:	464b      	mov	r3, r9
 800dc12:	aa03      	add	r2, sp, #12
 800dc14:	4621      	mov	r1, r4
 800dc16:	4640      	mov	r0, r8
 800dc18:	f7ff fee2 	bl	800d9e0 <_printf_common>
 800dc1c:	3001      	adds	r0, #1
 800dc1e:	d14c      	bne.n	800dcba <_printf_i+0x1fe>
 800dc20:	f04f 30ff 	mov.w	r0, #4294967295
 800dc24:	b004      	add	sp, #16
 800dc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2a:	4835      	ldr	r0, [pc, #212]	; (800dd00 <_printf_i+0x244>)
 800dc2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc30:	6829      	ldr	r1, [r5, #0]
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc38:	6029      	str	r1, [r5, #0]
 800dc3a:	061d      	lsls	r5, r3, #24
 800dc3c:	d514      	bpl.n	800dc68 <_printf_i+0x1ac>
 800dc3e:	07df      	lsls	r7, r3, #31
 800dc40:	bf44      	itt	mi
 800dc42:	f043 0320 	orrmi.w	r3, r3, #32
 800dc46:	6023      	strmi	r3, [r4, #0]
 800dc48:	b91e      	cbnz	r6, 800dc52 <_printf_i+0x196>
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	f023 0320 	bic.w	r3, r3, #32
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	2310      	movs	r3, #16
 800dc54:	e7b0      	b.n	800dbb8 <_printf_i+0xfc>
 800dc56:	6823      	ldr	r3, [r4, #0]
 800dc58:	f043 0320 	orr.w	r3, r3, #32
 800dc5c:	6023      	str	r3, [r4, #0]
 800dc5e:	2378      	movs	r3, #120	; 0x78
 800dc60:	4828      	ldr	r0, [pc, #160]	; (800dd04 <_printf_i+0x248>)
 800dc62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc66:	e7e3      	b.n	800dc30 <_printf_i+0x174>
 800dc68:	0659      	lsls	r1, r3, #25
 800dc6a:	bf48      	it	mi
 800dc6c:	b2b6      	uxthmi	r6, r6
 800dc6e:	e7e6      	b.n	800dc3e <_printf_i+0x182>
 800dc70:	4615      	mov	r5, r2
 800dc72:	e7bb      	b.n	800dbec <_printf_i+0x130>
 800dc74:	682b      	ldr	r3, [r5, #0]
 800dc76:	6826      	ldr	r6, [r4, #0]
 800dc78:	6961      	ldr	r1, [r4, #20]
 800dc7a:	1d18      	adds	r0, r3, #4
 800dc7c:	6028      	str	r0, [r5, #0]
 800dc7e:	0635      	lsls	r5, r6, #24
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	d501      	bpl.n	800dc88 <_printf_i+0x1cc>
 800dc84:	6019      	str	r1, [r3, #0]
 800dc86:	e002      	b.n	800dc8e <_printf_i+0x1d2>
 800dc88:	0670      	lsls	r0, r6, #25
 800dc8a:	d5fb      	bpl.n	800dc84 <_printf_i+0x1c8>
 800dc8c:	8019      	strh	r1, [r3, #0]
 800dc8e:	2300      	movs	r3, #0
 800dc90:	6123      	str	r3, [r4, #16]
 800dc92:	4615      	mov	r5, r2
 800dc94:	e7ba      	b.n	800dc0c <_printf_i+0x150>
 800dc96:	682b      	ldr	r3, [r5, #0]
 800dc98:	1d1a      	adds	r2, r3, #4
 800dc9a:	602a      	str	r2, [r5, #0]
 800dc9c:	681d      	ldr	r5, [r3, #0]
 800dc9e:	6862      	ldr	r2, [r4, #4]
 800dca0:	2100      	movs	r1, #0
 800dca2:	4628      	mov	r0, r5
 800dca4:	f7f2 fa9c 	bl	80001e0 <memchr>
 800dca8:	b108      	cbz	r0, 800dcae <_printf_i+0x1f2>
 800dcaa:	1b40      	subs	r0, r0, r5
 800dcac:	6060      	str	r0, [r4, #4]
 800dcae:	6863      	ldr	r3, [r4, #4]
 800dcb0:	6123      	str	r3, [r4, #16]
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcb8:	e7a8      	b.n	800dc0c <_printf_i+0x150>
 800dcba:	6923      	ldr	r3, [r4, #16]
 800dcbc:	462a      	mov	r2, r5
 800dcbe:	4649      	mov	r1, r9
 800dcc0:	4640      	mov	r0, r8
 800dcc2:	47d0      	blx	sl
 800dcc4:	3001      	adds	r0, #1
 800dcc6:	d0ab      	beq.n	800dc20 <_printf_i+0x164>
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	079b      	lsls	r3, r3, #30
 800dccc:	d413      	bmi.n	800dcf6 <_printf_i+0x23a>
 800dcce:	68e0      	ldr	r0, [r4, #12]
 800dcd0:	9b03      	ldr	r3, [sp, #12]
 800dcd2:	4298      	cmp	r0, r3
 800dcd4:	bfb8      	it	lt
 800dcd6:	4618      	movlt	r0, r3
 800dcd8:	e7a4      	b.n	800dc24 <_printf_i+0x168>
 800dcda:	2301      	movs	r3, #1
 800dcdc:	4632      	mov	r2, r6
 800dcde:	4649      	mov	r1, r9
 800dce0:	4640      	mov	r0, r8
 800dce2:	47d0      	blx	sl
 800dce4:	3001      	adds	r0, #1
 800dce6:	d09b      	beq.n	800dc20 <_printf_i+0x164>
 800dce8:	3501      	adds	r5, #1
 800dcea:	68e3      	ldr	r3, [r4, #12]
 800dcec:	9903      	ldr	r1, [sp, #12]
 800dcee:	1a5b      	subs	r3, r3, r1
 800dcf0:	42ab      	cmp	r3, r5
 800dcf2:	dcf2      	bgt.n	800dcda <_printf_i+0x21e>
 800dcf4:	e7eb      	b.n	800dcce <_printf_i+0x212>
 800dcf6:	2500      	movs	r5, #0
 800dcf8:	f104 0619 	add.w	r6, r4, #25
 800dcfc:	e7f5      	b.n	800dcea <_printf_i+0x22e>
 800dcfe:	bf00      	nop
 800dd00:	0801044a 	.word	0x0801044a
 800dd04:	0801045b 	.word	0x0801045b

0800dd08 <iprintf>:
 800dd08:	b40f      	push	{r0, r1, r2, r3}
 800dd0a:	4b0a      	ldr	r3, [pc, #40]	; (800dd34 <iprintf+0x2c>)
 800dd0c:	b513      	push	{r0, r1, r4, lr}
 800dd0e:	681c      	ldr	r4, [r3, #0]
 800dd10:	b124      	cbz	r4, 800dd1c <iprintf+0x14>
 800dd12:	69a3      	ldr	r3, [r4, #24]
 800dd14:	b913      	cbnz	r3, 800dd1c <iprintf+0x14>
 800dd16:	4620      	mov	r0, r4
 800dd18:	f000 ff14 	bl	800eb44 <__sinit>
 800dd1c:	ab05      	add	r3, sp, #20
 800dd1e:	9a04      	ldr	r2, [sp, #16]
 800dd20:	68a1      	ldr	r1, [r4, #8]
 800dd22:	9301      	str	r3, [sp, #4]
 800dd24:	4620      	mov	r0, r4
 800dd26:	f001 fdbb 	bl	800f8a0 <_vfiprintf_r>
 800dd2a:	b002      	add	sp, #8
 800dd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd30:	b004      	add	sp, #16
 800dd32:	4770      	bx	lr
 800dd34:	20000114 	.word	0x20000114

0800dd38 <siprintf>:
 800dd38:	b40e      	push	{r1, r2, r3}
 800dd3a:	b500      	push	{lr}
 800dd3c:	b09c      	sub	sp, #112	; 0x70
 800dd3e:	ab1d      	add	r3, sp, #116	; 0x74
 800dd40:	9002      	str	r0, [sp, #8]
 800dd42:	9006      	str	r0, [sp, #24]
 800dd44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd48:	4809      	ldr	r0, [pc, #36]	; (800dd70 <siprintf+0x38>)
 800dd4a:	9107      	str	r1, [sp, #28]
 800dd4c:	9104      	str	r1, [sp, #16]
 800dd4e:	4909      	ldr	r1, [pc, #36]	; (800dd74 <siprintf+0x3c>)
 800dd50:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd54:	9105      	str	r1, [sp, #20]
 800dd56:	6800      	ldr	r0, [r0, #0]
 800dd58:	9301      	str	r3, [sp, #4]
 800dd5a:	a902      	add	r1, sp, #8
 800dd5c:	f001 fc76 	bl	800f64c <_svfiprintf_r>
 800dd60:	9b02      	ldr	r3, [sp, #8]
 800dd62:	2200      	movs	r2, #0
 800dd64:	701a      	strb	r2, [r3, #0]
 800dd66:	b01c      	add	sp, #112	; 0x70
 800dd68:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd6c:	b003      	add	sp, #12
 800dd6e:	4770      	bx	lr
 800dd70:	20000114 	.word	0x20000114
 800dd74:	ffff0208 	.word	0xffff0208

0800dd78 <strncat>:
 800dd78:	b530      	push	{r4, r5, lr}
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	7825      	ldrb	r5, [r4, #0]
 800dd7e:	4623      	mov	r3, r4
 800dd80:	3401      	adds	r4, #1
 800dd82:	2d00      	cmp	r5, #0
 800dd84:	d1fa      	bne.n	800dd7c <strncat+0x4>
 800dd86:	3a01      	subs	r2, #1
 800dd88:	d304      	bcc.n	800dd94 <strncat+0x1c>
 800dd8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd8e:	f803 4b01 	strb.w	r4, [r3], #1
 800dd92:	b904      	cbnz	r4, 800dd96 <strncat+0x1e>
 800dd94:	bd30      	pop	{r4, r5, pc}
 800dd96:	2a00      	cmp	r2, #0
 800dd98:	d1f5      	bne.n	800dd86 <strncat+0xe>
 800dd9a:	701a      	strb	r2, [r3, #0]
 800dd9c:	e7f3      	b.n	800dd86 <strncat+0xe>

0800dd9e <quorem>:
 800dd9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dda2:	6903      	ldr	r3, [r0, #16]
 800dda4:	690c      	ldr	r4, [r1, #16]
 800dda6:	42a3      	cmp	r3, r4
 800dda8:	4607      	mov	r7, r0
 800ddaa:	f2c0 8081 	blt.w	800deb0 <quorem+0x112>
 800ddae:	3c01      	subs	r4, #1
 800ddb0:	f101 0814 	add.w	r8, r1, #20
 800ddb4:	f100 0514 	add.w	r5, r0, #20
 800ddb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddbc:	9301      	str	r3, [sp, #4]
 800ddbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ddc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ddce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ddd2:	fbb2 f6f3 	udiv	r6, r2, r3
 800ddd6:	d331      	bcc.n	800de3c <quorem+0x9e>
 800ddd8:	f04f 0e00 	mov.w	lr, #0
 800dddc:	4640      	mov	r0, r8
 800ddde:	46ac      	mov	ip, r5
 800dde0:	46f2      	mov	sl, lr
 800dde2:	f850 2b04 	ldr.w	r2, [r0], #4
 800dde6:	b293      	uxth	r3, r2
 800dde8:	fb06 e303 	mla	r3, r6, r3, lr
 800ddec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	ebaa 0303 	sub.w	r3, sl, r3
 800ddf6:	f8dc a000 	ldr.w	sl, [ip]
 800ddfa:	0c12      	lsrs	r2, r2, #16
 800ddfc:	fa13 f38a 	uxtah	r3, r3, sl
 800de00:	fb06 e202 	mla	r2, r6, r2, lr
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	9b00      	ldr	r3, [sp, #0]
 800de08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800de0c:	b292      	uxth	r2, r2
 800de0e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800de12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de16:	f8bd 3000 	ldrh.w	r3, [sp]
 800de1a:	4581      	cmp	r9, r0
 800de1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de20:	f84c 3b04 	str.w	r3, [ip], #4
 800de24:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800de28:	d2db      	bcs.n	800dde2 <quorem+0x44>
 800de2a:	f855 300b 	ldr.w	r3, [r5, fp]
 800de2e:	b92b      	cbnz	r3, 800de3c <quorem+0x9e>
 800de30:	9b01      	ldr	r3, [sp, #4]
 800de32:	3b04      	subs	r3, #4
 800de34:	429d      	cmp	r5, r3
 800de36:	461a      	mov	r2, r3
 800de38:	d32e      	bcc.n	800de98 <quorem+0xfa>
 800de3a:	613c      	str	r4, [r7, #16]
 800de3c:	4638      	mov	r0, r7
 800de3e:	f001 f9b1 	bl	800f1a4 <__mcmp>
 800de42:	2800      	cmp	r0, #0
 800de44:	db24      	blt.n	800de90 <quorem+0xf2>
 800de46:	3601      	adds	r6, #1
 800de48:	4628      	mov	r0, r5
 800de4a:	f04f 0c00 	mov.w	ip, #0
 800de4e:	f858 2b04 	ldr.w	r2, [r8], #4
 800de52:	f8d0 e000 	ldr.w	lr, [r0]
 800de56:	b293      	uxth	r3, r2
 800de58:	ebac 0303 	sub.w	r3, ip, r3
 800de5c:	0c12      	lsrs	r2, r2, #16
 800de5e:	fa13 f38e 	uxtah	r3, r3, lr
 800de62:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800de66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de70:	45c1      	cmp	r9, r8
 800de72:	f840 3b04 	str.w	r3, [r0], #4
 800de76:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800de7a:	d2e8      	bcs.n	800de4e <quorem+0xb0>
 800de7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de84:	b922      	cbnz	r2, 800de90 <quorem+0xf2>
 800de86:	3b04      	subs	r3, #4
 800de88:	429d      	cmp	r5, r3
 800de8a:	461a      	mov	r2, r3
 800de8c:	d30a      	bcc.n	800dea4 <quorem+0x106>
 800de8e:	613c      	str	r4, [r7, #16]
 800de90:	4630      	mov	r0, r6
 800de92:	b003      	add	sp, #12
 800de94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de98:	6812      	ldr	r2, [r2, #0]
 800de9a:	3b04      	subs	r3, #4
 800de9c:	2a00      	cmp	r2, #0
 800de9e:	d1cc      	bne.n	800de3a <quorem+0x9c>
 800dea0:	3c01      	subs	r4, #1
 800dea2:	e7c7      	b.n	800de34 <quorem+0x96>
 800dea4:	6812      	ldr	r2, [r2, #0]
 800dea6:	3b04      	subs	r3, #4
 800dea8:	2a00      	cmp	r2, #0
 800deaa:	d1f0      	bne.n	800de8e <quorem+0xf0>
 800deac:	3c01      	subs	r4, #1
 800deae:	e7eb      	b.n	800de88 <quorem+0xea>
 800deb0:	2000      	movs	r0, #0
 800deb2:	e7ee      	b.n	800de92 <quorem+0xf4>
 800deb4:	0000      	movs	r0, r0
	...

0800deb8 <_dtoa_r>:
 800deb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	ed2d 8b04 	vpush	{d8-d9}
 800dec0:	ec57 6b10 	vmov	r6, r7, d0
 800dec4:	b093      	sub	sp, #76	; 0x4c
 800dec6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dec8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800decc:	9106      	str	r1, [sp, #24]
 800dece:	ee10 aa10 	vmov	sl, s0
 800ded2:	4604      	mov	r4, r0
 800ded4:	9209      	str	r2, [sp, #36]	; 0x24
 800ded6:	930c      	str	r3, [sp, #48]	; 0x30
 800ded8:	46bb      	mov	fp, r7
 800deda:	b975      	cbnz	r5, 800defa <_dtoa_r+0x42>
 800dedc:	2010      	movs	r0, #16
 800dede:	f000 fed7 	bl	800ec90 <malloc>
 800dee2:	4602      	mov	r2, r0
 800dee4:	6260      	str	r0, [r4, #36]	; 0x24
 800dee6:	b920      	cbnz	r0, 800def2 <_dtoa_r+0x3a>
 800dee8:	4ba7      	ldr	r3, [pc, #668]	; (800e188 <_dtoa_r+0x2d0>)
 800deea:	21ea      	movs	r1, #234	; 0xea
 800deec:	48a7      	ldr	r0, [pc, #668]	; (800e18c <_dtoa_r+0x2d4>)
 800deee:	f001 ff2d 	bl	800fd4c <__assert_func>
 800def2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800def6:	6005      	str	r5, [r0, #0]
 800def8:	60c5      	str	r5, [r0, #12]
 800defa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800defc:	6819      	ldr	r1, [r3, #0]
 800defe:	b151      	cbz	r1, 800df16 <_dtoa_r+0x5e>
 800df00:	685a      	ldr	r2, [r3, #4]
 800df02:	604a      	str	r2, [r1, #4]
 800df04:	2301      	movs	r3, #1
 800df06:	4093      	lsls	r3, r2
 800df08:	608b      	str	r3, [r1, #8]
 800df0a:	4620      	mov	r0, r4
 800df0c:	f000 ff08 	bl	800ed20 <_Bfree>
 800df10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df12:	2200      	movs	r2, #0
 800df14:	601a      	str	r2, [r3, #0]
 800df16:	1e3b      	subs	r3, r7, #0
 800df18:	bfaa      	itet	ge
 800df1a:	2300      	movge	r3, #0
 800df1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800df20:	f8c8 3000 	strge.w	r3, [r8]
 800df24:	4b9a      	ldr	r3, [pc, #616]	; (800e190 <_dtoa_r+0x2d8>)
 800df26:	bfbc      	itt	lt
 800df28:	2201      	movlt	r2, #1
 800df2a:	f8c8 2000 	strlt.w	r2, [r8]
 800df2e:	ea33 030b 	bics.w	r3, r3, fp
 800df32:	d11b      	bne.n	800df6c <_dtoa_r+0xb4>
 800df34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df36:	f242 730f 	movw	r3, #9999	; 0x270f
 800df3a:	6013      	str	r3, [r2, #0]
 800df3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df40:	4333      	orrs	r3, r6
 800df42:	f000 8592 	beq.w	800ea6a <_dtoa_r+0xbb2>
 800df46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df48:	b963      	cbnz	r3, 800df64 <_dtoa_r+0xac>
 800df4a:	4b92      	ldr	r3, [pc, #584]	; (800e194 <_dtoa_r+0x2dc>)
 800df4c:	e022      	b.n	800df94 <_dtoa_r+0xdc>
 800df4e:	4b92      	ldr	r3, [pc, #584]	; (800e198 <_dtoa_r+0x2e0>)
 800df50:	9301      	str	r3, [sp, #4]
 800df52:	3308      	adds	r3, #8
 800df54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800df56:	6013      	str	r3, [r2, #0]
 800df58:	9801      	ldr	r0, [sp, #4]
 800df5a:	b013      	add	sp, #76	; 0x4c
 800df5c:	ecbd 8b04 	vpop	{d8-d9}
 800df60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df64:	4b8b      	ldr	r3, [pc, #556]	; (800e194 <_dtoa_r+0x2dc>)
 800df66:	9301      	str	r3, [sp, #4]
 800df68:	3303      	adds	r3, #3
 800df6a:	e7f3      	b.n	800df54 <_dtoa_r+0x9c>
 800df6c:	2200      	movs	r2, #0
 800df6e:	2300      	movs	r3, #0
 800df70:	4650      	mov	r0, sl
 800df72:	4659      	mov	r1, fp
 800df74:	f7f2 fda8 	bl	8000ac8 <__aeabi_dcmpeq>
 800df78:	ec4b ab19 	vmov	d9, sl, fp
 800df7c:	4680      	mov	r8, r0
 800df7e:	b158      	cbz	r0, 800df98 <_dtoa_r+0xe0>
 800df80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df82:	2301      	movs	r3, #1
 800df84:	6013      	str	r3, [r2, #0]
 800df86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df88:	2b00      	cmp	r3, #0
 800df8a:	f000 856b 	beq.w	800ea64 <_dtoa_r+0xbac>
 800df8e:	4883      	ldr	r0, [pc, #524]	; (800e19c <_dtoa_r+0x2e4>)
 800df90:	6018      	str	r0, [r3, #0]
 800df92:	1e43      	subs	r3, r0, #1
 800df94:	9301      	str	r3, [sp, #4]
 800df96:	e7df      	b.n	800df58 <_dtoa_r+0xa0>
 800df98:	ec4b ab10 	vmov	d0, sl, fp
 800df9c:	aa10      	add	r2, sp, #64	; 0x40
 800df9e:	a911      	add	r1, sp, #68	; 0x44
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f001 f9a5 	bl	800f2f0 <__d2b>
 800dfa6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800dfaa:	ee08 0a10 	vmov	s16, r0
 800dfae:	2d00      	cmp	r5, #0
 800dfb0:	f000 8084 	beq.w	800e0bc <_dtoa_r+0x204>
 800dfb4:	ee19 3a90 	vmov	r3, s19
 800dfb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dfc0:	4656      	mov	r6, sl
 800dfc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dfc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dfca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dfce:	4b74      	ldr	r3, [pc, #464]	; (800e1a0 <_dtoa_r+0x2e8>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	4639      	mov	r1, r7
 800dfd6:	f7f2 f957 	bl	8000288 <__aeabi_dsub>
 800dfda:	a365      	add	r3, pc, #404	; (adr r3, 800e170 <_dtoa_r+0x2b8>)
 800dfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe0:	f7f2 fb0a 	bl	80005f8 <__aeabi_dmul>
 800dfe4:	a364      	add	r3, pc, #400	; (adr r3, 800e178 <_dtoa_r+0x2c0>)
 800dfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfea:	f7f2 f94f 	bl	800028c <__adddf3>
 800dfee:	4606      	mov	r6, r0
 800dff0:	4628      	mov	r0, r5
 800dff2:	460f      	mov	r7, r1
 800dff4:	f7f2 fa96 	bl	8000524 <__aeabi_i2d>
 800dff8:	a361      	add	r3, pc, #388	; (adr r3, 800e180 <_dtoa_r+0x2c8>)
 800dffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffe:	f7f2 fafb 	bl	80005f8 <__aeabi_dmul>
 800e002:	4602      	mov	r2, r0
 800e004:	460b      	mov	r3, r1
 800e006:	4630      	mov	r0, r6
 800e008:	4639      	mov	r1, r7
 800e00a:	f7f2 f93f 	bl	800028c <__adddf3>
 800e00e:	4606      	mov	r6, r0
 800e010:	460f      	mov	r7, r1
 800e012:	f7f2 fda1 	bl	8000b58 <__aeabi_d2iz>
 800e016:	2200      	movs	r2, #0
 800e018:	9000      	str	r0, [sp, #0]
 800e01a:	2300      	movs	r3, #0
 800e01c:	4630      	mov	r0, r6
 800e01e:	4639      	mov	r1, r7
 800e020:	f7f2 fd5c 	bl	8000adc <__aeabi_dcmplt>
 800e024:	b150      	cbz	r0, 800e03c <_dtoa_r+0x184>
 800e026:	9800      	ldr	r0, [sp, #0]
 800e028:	f7f2 fa7c 	bl	8000524 <__aeabi_i2d>
 800e02c:	4632      	mov	r2, r6
 800e02e:	463b      	mov	r3, r7
 800e030:	f7f2 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e034:	b910      	cbnz	r0, 800e03c <_dtoa_r+0x184>
 800e036:	9b00      	ldr	r3, [sp, #0]
 800e038:	3b01      	subs	r3, #1
 800e03a:	9300      	str	r3, [sp, #0]
 800e03c:	9b00      	ldr	r3, [sp, #0]
 800e03e:	2b16      	cmp	r3, #22
 800e040:	d85a      	bhi.n	800e0f8 <_dtoa_r+0x240>
 800e042:	9a00      	ldr	r2, [sp, #0]
 800e044:	4b57      	ldr	r3, [pc, #348]	; (800e1a4 <_dtoa_r+0x2ec>)
 800e046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04e:	ec51 0b19 	vmov	r0, r1, d9
 800e052:	f7f2 fd43 	bl	8000adc <__aeabi_dcmplt>
 800e056:	2800      	cmp	r0, #0
 800e058:	d050      	beq.n	800e0fc <_dtoa_r+0x244>
 800e05a:	9b00      	ldr	r3, [sp, #0]
 800e05c:	3b01      	subs	r3, #1
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	2300      	movs	r3, #0
 800e062:	930b      	str	r3, [sp, #44]	; 0x2c
 800e064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e066:	1b5d      	subs	r5, r3, r5
 800e068:	1e6b      	subs	r3, r5, #1
 800e06a:	9305      	str	r3, [sp, #20]
 800e06c:	bf45      	ittet	mi
 800e06e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e072:	9304      	strmi	r3, [sp, #16]
 800e074:	2300      	movpl	r3, #0
 800e076:	2300      	movmi	r3, #0
 800e078:	bf4c      	ite	mi
 800e07a:	9305      	strmi	r3, [sp, #20]
 800e07c:	9304      	strpl	r3, [sp, #16]
 800e07e:	9b00      	ldr	r3, [sp, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	db3d      	blt.n	800e100 <_dtoa_r+0x248>
 800e084:	9b05      	ldr	r3, [sp, #20]
 800e086:	9a00      	ldr	r2, [sp, #0]
 800e088:	920a      	str	r2, [sp, #40]	; 0x28
 800e08a:	4413      	add	r3, r2
 800e08c:	9305      	str	r3, [sp, #20]
 800e08e:	2300      	movs	r3, #0
 800e090:	9307      	str	r3, [sp, #28]
 800e092:	9b06      	ldr	r3, [sp, #24]
 800e094:	2b09      	cmp	r3, #9
 800e096:	f200 8089 	bhi.w	800e1ac <_dtoa_r+0x2f4>
 800e09a:	2b05      	cmp	r3, #5
 800e09c:	bfc4      	itt	gt
 800e09e:	3b04      	subgt	r3, #4
 800e0a0:	9306      	strgt	r3, [sp, #24]
 800e0a2:	9b06      	ldr	r3, [sp, #24]
 800e0a4:	f1a3 0302 	sub.w	r3, r3, #2
 800e0a8:	bfcc      	ite	gt
 800e0aa:	2500      	movgt	r5, #0
 800e0ac:	2501      	movle	r5, #1
 800e0ae:	2b03      	cmp	r3, #3
 800e0b0:	f200 8087 	bhi.w	800e1c2 <_dtoa_r+0x30a>
 800e0b4:	e8df f003 	tbb	[pc, r3]
 800e0b8:	59383a2d 	.word	0x59383a2d
 800e0bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e0c0:	441d      	add	r5, r3
 800e0c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e0c6:	2b20      	cmp	r3, #32
 800e0c8:	bfc1      	itttt	gt
 800e0ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e0ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e0d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800e0d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e0da:	bfda      	itte	le
 800e0dc:	f1c3 0320 	rsble	r3, r3, #32
 800e0e0:	fa06 f003 	lslle.w	r0, r6, r3
 800e0e4:	4318      	orrgt	r0, r3
 800e0e6:	f7f2 fa0d 	bl	8000504 <__aeabi_ui2d>
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	4606      	mov	r6, r0
 800e0ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e0f2:	3d01      	subs	r5, #1
 800e0f4:	930e      	str	r3, [sp, #56]	; 0x38
 800e0f6:	e76a      	b.n	800dfce <_dtoa_r+0x116>
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	e7b2      	b.n	800e062 <_dtoa_r+0x1aa>
 800e0fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800e0fe:	e7b1      	b.n	800e064 <_dtoa_r+0x1ac>
 800e100:	9b04      	ldr	r3, [sp, #16]
 800e102:	9a00      	ldr	r2, [sp, #0]
 800e104:	1a9b      	subs	r3, r3, r2
 800e106:	9304      	str	r3, [sp, #16]
 800e108:	4253      	negs	r3, r2
 800e10a:	9307      	str	r3, [sp, #28]
 800e10c:	2300      	movs	r3, #0
 800e10e:	930a      	str	r3, [sp, #40]	; 0x28
 800e110:	e7bf      	b.n	800e092 <_dtoa_r+0x1da>
 800e112:	2300      	movs	r3, #0
 800e114:	9308      	str	r3, [sp, #32]
 800e116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e118:	2b00      	cmp	r3, #0
 800e11a:	dc55      	bgt.n	800e1c8 <_dtoa_r+0x310>
 800e11c:	2301      	movs	r3, #1
 800e11e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e122:	461a      	mov	r2, r3
 800e124:	9209      	str	r2, [sp, #36]	; 0x24
 800e126:	e00c      	b.n	800e142 <_dtoa_r+0x28a>
 800e128:	2301      	movs	r3, #1
 800e12a:	e7f3      	b.n	800e114 <_dtoa_r+0x25c>
 800e12c:	2300      	movs	r3, #0
 800e12e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e130:	9308      	str	r3, [sp, #32]
 800e132:	9b00      	ldr	r3, [sp, #0]
 800e134:	4413      	add	r3, r2
 800e136:	9302      	str	r3, [sp, #8]
 800e138:	3301      	adds	r3, #1
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	9303      	str	r3, [sp, #12]
 800e13e:	bfb8      	it	lt
 800e140:	2301      	movlt	r3, #1
 800e142:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e144:	2200      	movs	r2, #0
 800e146:	6042      	str	r2, [r0, #4]
 800e148:	2204      	movs	r2, #4
 800e14a:	f102 0614 	add.w	r6, r2, #20
 800e14e:	429e      	cmp	r6, r3
 800e150:	6841      	ldr	r1, [r0, #4]
 800e152:	d93d      	bls.n	800e1d0 <_dtoa_r+0x318>
 800e154:	4620      	mov	r0, r4
 800e156:	f000 fda3 	bl	800eca0 <_Balloc>
 800e15a:	9001      	str	r0, [sp, #4]
 800e15c:	2800      	cmp	r0, #0
 800e15e:	d13b      	bne.n	800e1d8 <_dtoa_r+0x320>
 800e160:	4b11      	ldr	r3, [pc, #68]	; (800e1a8 <_dtoa_r+0x2f0>)
 800e162:	4602      	mov	r2, r0
 800e164:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e168:	e6c0      	b.n	800deec <_dtoa_r+0x34>
 800e16a:	2301      	movs	r3, #1
 800e16c:	e7df      	b.n	800e12e <_dtoa_r+0x276>
 800e16e:	bf00      	nop
 800e170:	636f4361 	.word	0x636f4361
 800e174:	3fd287a7 	.word	0x3fd287a7
 800e178:	8b60c8b3 	.word	0x8b60c8b3
 800e17c:	3fc68a28 	.word	0x3fc68a28
 800e180:	509f79fb 	.word	0x509f79fb
 800e184:	3fd34413 	.word	0x3fd34413
 800e188:	08010479 	.word	0x08010479
 800e18c:	08010490 	.word	0x08010490
 800e190:	7ff00000 	.word	0x7ff00000
 800e194:	08010475 	.word	0x08010475
 800e198:	0801046c 	.word	0x0801046c
 800e19c:	08010449 	.word	0x08010449
 800e1a0:	3ff80000 	.word	0x3ff80000
 800e1a4:	080105e0 	.word	0x080105e0
 800e1a8:	080104eb 	.word	0x080104eb
 800e1ac:	2501      	movs	r5, #1
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	9306      	str	r3, [sp, #24]
 800e1b2:	9508      	str	r5, [sp, #32]
 800e1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	2312      	movs	r3, #18
 800e1c0:	e7b0      	b.n	800e124 <_dtoa_r+0x26c>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	9308      	str	r3, [sp, #32]
 800e1c6:	e7f5      	b.n	800e1b4 <_dtoa_r+0x2fc>
 800e1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e1ce:	e7b8      	b.n	800e142 <_dtoa_r+0x28a>
 800e1d0:	3101      	adds	r1, #1
 800e1d2:	6041      	str	r1, [r0, #4]
 800e1d4:	0052      	lsls	r2, r2, #1
 800e1d6:	e7b8      	b.n	800e14a <_dtoa_r+0x292>
 800e1d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1da:	9a01      	ldr	r2, [sp, #4]
 800e1dc:	601a      	str	r2, [r3, #0]
 800e1de:	9b03      	ldr	r3, [sp, #12]
 800e1e0:	2b0e      	cmp	r3, #14
 800e1e2:	f200 809d 	bhi.w	800e320 <_dtoa_r+0x468>
 800e1e6:	2d00      	cmp	r5, #0
 800e1e8:	f000 809a 	beq.w	800e320 <_dtoa_r+0x468>
 800e1ec:	9b00      	ldr	r3, [sp, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	dd32      	ble.n	800e258 <_dtoa_r+0x3a0>
 800e1f2:	4ab7      	ldr	r2, [pc, #732]	; (800e4d0 <_dtoa_r+0x618>)
 800e1f4:	f003 030f 	and.w	r3, r3, #15
 800e1f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e1fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e200:	9b00      	ldr	r3, [sp, #0]
 800e202:	05d8      	lsls	r0, r3, #23
 800e204:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e208:	d516      	bpl.n	800e238 <_dtoa_r+0x380>
 800e20a:	4bb2      	ldr	r3, [pc, #712]	; (800e4d4 <_dtoa_r+0x61c>)
 800e20c:	ec51 0b19 	vmov	r0, r1, d9
 800e210:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e214:	f7f2 fb1a 	bl	800084c <__aeabi_ddiv>
 800e218:	f007 070f 	and.w	r7, r7, #15
 800e21c:	4682      	mov	sl, r0
 800e21e:	468b      	mov	fp, r1
 800e220:	2503      	movs	r5, #3
 800e222:	4eac      	ldr	r6, [pc, #688]	; (800e4d4 <_dtoa_r+0x61c>)
 800e224:	b957      	cbnz	r7, 800e23c <_dtoa_r+0x384>
 800e226:	4642      	mov	r2, r8
 800e228:	464b      	mov	r3, r9
 800e22a:	4650      	mov	r0, sl
 800e22c:	4659      	mov	r1, fp
 800e22e:	f7f2 fb0d 	bl	800084c <__aeabi_ddiv>
 800e232:	4682      	mov	sl, r0
 800e234:	468b      	mov	fp, r1
 800e236:	e028      	b.n	800e28a <_dtoa_r+0x3d2>
 800e238:	2502      	movs	r5, #2
 800e23a:	e7f2      	b.n	800e222 <_dtoa_r+0x36a>
 800e23c:	07f9      	lsls	r1, r7, #31
 800e23e:	d508      	bpl.n	800e252 <_dtoa_r+0x39a>
 800e240:	4640      	mov	r0, r8
 800e242:	4649      	mov	r1, r9
 800e244:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e248:	f7f2 f9d6 	bl	80005f8 <__aeabi_dmul>
 800e24c:	3501      	adds	r5, #1
 800e24e:	4680      	mov	r8, r0
 800e250:	4689      	mov	r9, r1
 800e252:	107f      	asrs	r7, r7, #1
 800e254:	3608      	adds	r6, #8
 800e256:	e7e5      	b.n	800e224 <_dtoa_r+0x36c>
 800e258:	f000 809b 	beq.w	800e392 <_dtoa_r+0x4da>
 800e25c:	9b00      	ldr	r3, [sp, #0]
 800e25e:	4f9d      	ldr	r7, [pc, #628]	; (800e4d4 <_dtoa_r+0x61c>)
 800e260:	425e      	negs	r6, r3
 800e262:	4b9b      	ldr	r3, [pc, #620]	; (800e4d0 <_dtoa_r+0x618>)
 800e264:	f006 020f 	and.w	r2, r6, #15
 800e268:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e270:	ec51 0b19 	vmov	r0, r1, d9
 800e274:	f7f2 f9c0 	bl	80005f8 <__aeabi_dmul>
 800e278:	1136      	asrs	r6, r6, #4
 800e27a:	4682      	mov	sl, r0
 800e27c:	468b      	mov	fp, r1
 800e27e:	2300      	movs	r3, #0
 800e280:	2502      	movs	r5, #2
 800e282:	2e00      	cmp	r6, #0
 800e284:	d17a      	bne.n	800e37c <_dtoa_r+0x4c4>
 800e286:	2b00      	cmp	r3, #0
 800e288:	d1d3      	bne.n	800e232 <_dtoa_r+0x37a>
 800e28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 8082 	beq.w	800e396 <_dtoa_r+0x4de>
 800e292:	4b91      	ldr	r3, [pc, #580]	; (800e4d8 <_dtoa_r+0x620>)
 800e294:	2200      	movs	r2, #0
 800e296:	4650      	mov	r0, sl
 800e298:	4659      	mov	r1, fp
 800e29a:	f7f2 fc1f 	bl	8000adc <__aeabi_dcmplt>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d079      	beq.n	800e396 <_dtoa_r+0x4de>
 800e2a2:	9b03      	ldr	r3, [sp, #12]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d076      	beq.n	800e396 <_dtoa_r+0x4de>
 800e2a8:	9b02      	ldr	r3, [sp, #8]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	dd36      	ble.n	800e31c <_dtoa_r+0x464>
 800e2ae:	9b00      	ldr	r3, [sp, #0]
 800e2b0:	4650      	mov	r0, sl
 800e2b2:	4659      	mov	r1, fp
 800e2b4:	1e5f      	subs	r7, r3, #1
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	4b88      	ldr	r3, [pc, #544]	; (800e4dc <_dtoa_r+0x624>)
 800e2ba:	f7f2 f99d 	bl	80005f8 <__aeabi_dmul>
 800e2be:	9e02      	ldr	r6, [sp, #8]
 800e2c0:	4682      	mov	sl, r0
 800e2c2:	468b      	mov	fp, r1
 800e2c4:	3501      	adds	r5, #1
 800e2c6:	4628      	mov	r0, r5
 800e2c8:	f7f2 f92c 	bl	8000524 <__aeabi_i2d>
 800e2cc:	4652      	mov	r2, sl
 800e2ce:	465b      	mov	r3, fp
 800e2d0:	f7f2 f992 	bl	80005f8 <__aeabi_dmul>
 800e2d4:	4b82      	ldr	r3, [pc, #520]	; (800e4e0 <_dtoa_r+0x628>)
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f7f1 ffd8 	bl	800028c <__adddf3>
 800e2dc:	46d0      	mov	r8, sl
 800e2de:	46d9      	mov	r9, fp
 800e2e0:	4682      	mov	sl, r0
 800e2e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e2e6:	2e00      	cmp	r6, #0
 800e2e8:	d158      	bne.n	800e39c <_dtoa_r+0x4e4>
 800e2ea:	4b7e      	ldr	r3, [pc, #504]	; (800e4e4 <_dtoa_r+0x62c>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	4640      	mov	r0, r8
 800e2f0:	4649      	mov	r1, r9
 800e2f2:	f7f1 ffc9 	bl	8000288 <__aeabi_dsub>
 800e2f6:	4652      	mov	r2, sl
 800e2f8:	465b      	mov	r3, fp
 800e2fa:	4680      	mov	r8, r0
 800e2fc:	4689      	mov	r9, r1
 800e2fe:	f7f2 fc0b 	bl	8000b18 <__aeabi_dcmpgt>
 800e302:	2800      	cmp	r0, #0
 800e304:	f040 8295 	bne.w	800e832 <_dtoa_r+0x97a>
 800e308:	4652      	mov	r2, sl
 800e30a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e30e:	4640      	mov	r0, r8
 800e310:	4649      	mov	r1, r9
 800e312:	f7f2 fbe3 	bl	8000adc <__aeabi_dcmplt>
 800e316:	2800      	cmp	r0, #0
 800e318:	f040 8289 	bne.w	800e82e <_dtoa_r+0x976>
 800e31c:	ec5b ab19 	vmov	sl, fp, d9
 800e320:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e322:	2b00      	cmp	r3, #0
 800e324:	f2c0 8148 	blt.w	800e5b8 <_dtoa_r+0x700>
 800e328:	9a00      	ldr	r2, [sp, #0]
 800e32a:	2a0e      	cmp	r2, #14
 800e32c:	f300 8144 	bgt.w	800e5b8 <_dtoa_r+0x700>
 800e330:	4b67      	ldr	r3, [pc, #412]	; (800e4d0 <_dtoa_r+0x618>)
 800e332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e336:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	f280 80d5 	bge.w	800e4ec <_dtoa_r+0x634>
 800e342:	9b03      	ldr	r3, [sp, #12]
 800e344:	2b00      	cmp	r3, #0
 800e346:	f300 80d1 	bgt.w	800e4ec <_dtoa_r+0x634>
 800e34a:	f040 826f 	bne.w	800e82c <_dtoa_r+0x974>
 800e34e:	4b65      	ldr	r3, [pc, #404]	; (800e4e4 <_dtoa_r+0x62c>)
 800e350:	2200      	movs	r2, #0
 800e352:	4640      	mov	r0, r8
 800e354:	4649      	mov	r1, r9
 800e356:	f7f2 f94f 	bl	80005f8 <__aeabi_dmul>
 800e35a:	4652      	mov	r2, sl
 800e35c:	465b      	mov	r3, fp
 800e35e:	f7f2 fbd1 	bl	8000b04 <__aeabi_dcmpge>
 800e362:	9e03      	ldr	r6, [sp, #12]
 800e364:	4637      	mov	r7, r6
 800e366:	2800      	cmp	r0, #0
 800e368:	f040 8245 	bne.w	800e7f6 <_dtoa_r+0x93e>
 800e36c:	9d01      	ldr	r5, [sp, #4]
 800e36e:	2331      	movs	r3, #49	; 0x31
 800e370:	f805 3b01 	strb.w	r3, [r5], #1
 800e374:	9b00      	ldr	r3, [sp, #0]
 800e376:	3301      	adds	r3, #1
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	e240      	b.n	800e7fe <_dtoa_r+0x946>
 800e37c:	07f2      	lsls	r2, r6, #31
 800e37e:	d505      	bpl.n	800e38c <_dtoa_r+0x4d4>
 800e380:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e384:	f7f2 f938 	bl	80005f8 <__aeabi_dmul>
 800e388:	3501      	adds	r5, #1
 800e38a:	2301      	movs	r3, #1
 800e38c:	1076      	asrs	r6, r6, #1
 800e38e:	3708      	adds	r7, #8
 800e390:	e777      	b.n	800e282 <_dtoa_r+0x3ca>
 800e392:	2502      	movs	r5, #2
 800e394:	e779      	b.n	800e28a <_dtoa_r+0x3d2>
 800e396:	9f00      	ldr	r7, [sp, #0]
 800e398:	9e03      	ldr	r6, [sp, #12]
 800e39a:	e794      	b.n	800e2c6 <_dtoa_r+0x40e>
 800e39c:	9901      	ldr	r1, [sp, #4]
 800e39e:	4b4c      	ldr	r3, [pc, #304]	; (800e4d0 <_dtoa_r+0x618>)
 800e3a0:	4431      	add	r1, r6
 800e3a2:	910d      	str	r1, [sp, #52]	; 0x34
 800e3a4:	9908      	ldr	r1, [sp, #32]
 800e3a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e3aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e3ae:	2900      	cmp	r1, #0
 800e3b0:	d043      	beq.n	800e43a <_dtoa_r+0x582>
 800e3b2:	494d      	ldr	r1, [pc, #308]	; (800e4e8 <_dtoa_r+0x630>)
 800e3b4:	2000      	movs	r0, #0
 800e3b6:	f7f2 fa49 	bl	800084c <__aeabi_ddiv>
 800e3ba:	4652      	mov	r2, sl
 800e3bc:	465b      	mov	r3, fp
 800e3be:	f7f1 ff63 	bl	8000288 <__aeabi_dsub>
 800e3c2:	9d01      	ldr	r5, [sp, #4]
 800e3c4:	4682      	mov	sl, r0
 800e3c6:	468b      	mov	fp, r1
 800e3c8:	4649      	mov	r1, r9
 800e3ca:	4640      	mov	r0, r8
 800e3cc:	f7f2 fbc4 	bl	8000b58 <__aeabi_d2iz>
 800e3d0:	4606      	mov	r6, r0
 800e3d2:	f7f2 f8a7 	bl	8000524 <__aeabi_i2d>
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	460b      	mov	r3, r1
 800e3da:	4640      	mov	r0, r8
 800e3dc:	4649      	mov	r1, r9
 800e3de:	f7f1 ff53 	bl	8000288 <__aeabi_dsub>
 800e3e2:	3630      	adds	r6, #48	; 0x30
 800e3e4:	f805 6b01 	strb.w	r6, [r5], #1
 800e3e8:	4652      	mov	r2, sl
 800e3ea:	465b      	mov	r3, fp
 800e3ec:	4680      	mov	r8, r0
 800e3ee:	4689      	mov	r9, r1
 800e3f0:	f7f2 fb74 	bl	8000adc <__aeabi_dcmplt>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d163      	bne.n	800e4c0 <_dtoa_r+0x608>
 800e3f8:	4642      	mov	r2, r8
 800e3fa:	464b      	mov	r3, r9
 800e3fc:	4936      	ldr	r1, [pc, #216]	; (800e4d8 <_dtoa_r+0x620>)
 800e3fe:	2000      	movs	r0, #0
 800e400:	f7f1 ff42 	bl	8000288 <__aeabi_dsub>
 800e404:	4652      	mov	r2, sl
 800e406:	465b      	mov	r3, fp
 800e408:	f7f2 fb68 	bl	8000adc <__aeabi_dcmplt>
 800e40c:	2800      	cmp	r0, #0
 800e40e:	f040 80b5 	bne.w	800e57c <_dtoa_r+0x6c4>
 800e412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e414:	429d      	cmp	r5, r3
 800e416:	d081      	beq.n	800e31c <_dtoa_r+0x464>
 800e418:	4b30      	ldr	r3, [pc, #192]	; (800e4dc <_dtoa_r+0x624>)
 800e41a:	2200      	movs	r2, #0
 800e41c:	4650      	mov	r0, sl
 800e41e:	4659      	mov	r1, fp
 800e420:	f7f2 f8ea 	bl	80005f8 <__aeabi_dmul>
 800e424:	4b2d      	ldr	r3, [pc, #180]	; (800e4dc <_dtoa_r+0x624>)
 800e426:	4682      	mov	sl, r0
 800e428:	468b      	mov	fp, r1
 800e42a:	4640      	mov	r0, r8
 800e42c:	4649      	mov	r1, r9
 800e42e:	2200      	movs	r2, #0
 800e430:	f7f2 f8e2 	bl	80005f8 <__aeabi_dmul>
 800e434:	4680      	mov	r8, r0
 800e436:	4689      	mov	r9, r1
 800e438:	e7c6      	b.n	800e3c8 <_dtoa_r+0x510>
 800e43a:	4650      	mov	r0, sl
 800e43c:	4659      	mov	r1, fp
 800e43e:	f7f2 f8db 	bl	80005f8 <__aeabi_dmul>
 800e442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e444:	9d01      	ldr	r5, [sp, #4]
 800e446:	930f      	str	r3, [sp, #60]	; 0x3c
 800e448:	4682      	mov	sl, r0
 800e44a:	468b      	mov	fp, r1
 800e44c:	4649      	mov	r1, r9
 800e44e:	4640      	mov	r0, r8
 800e450:	f7f2 fb82 	bl	8000b58 <__aeabi_d2iz>
 800e454:	4606      	mov	r6, r0
 800e456:	f7f2 f865 	bl	8000524 <__aeabi_i2d>
 800e45a:	3630      	adds	r6, #48	; 0x30
 800e45c:	4602      	mov	r2, r0
 800e45e:	460b      	mov	r3, r1
 800e460:	4640      	mov	r0, r8
 800e462:	4649      	mov	r1, r9
 800e464:	f7f1 ff10 	bl	8000288 <__aeabi_dsub>
 800e468:	f805 6b01 	strb.w	r6, [r5], #1
 800e46c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e46e:	429d      	cmp	r5, r3
 800e470:	4680      	mov	r8, r0
 800e472:	4689      	mov	r9, r1
 800e474:	f04f 0200 	mov.w	r2, #0
 800e478:	d124      	bne.n	800e4c4 <_dtoa_r+0x60c>
 800e47a:	4b1b      	ldr	r3, [pc, #108]	; (800e4e8 <_dtoa_r+0x630>)
 800e47c:	4650      	mov	r0, sl
 800e47e:	4659      	mov	r1, fp
 800e480:	f7f1 ff04 	bl	800028c <__adddf3>
 800e484:	4602      	mov	r2, r0
 800e486:	460b      	mov	r3, r1
 800e488:	4640      	mov	r0, r8
 800e48a:	4649      	mov	r1, r9
 800e48c:	f7f2 fb44 	bl	8000b18 <__aeabi_dcmpgt>
 800e490:	2800      	cmp	r0, #0
 800e492:	d173      	bne.n	800e57c <_dtoa_r+0x6c4>
 800e494:	4652      	mov	r2, sl
 800e496:	465b      	mov	r3, fp
 800e498:	4913      	ldr	r1, [pc, #76]	; (800e4e8 <_dtoa_r+0x630>)
 800e49a:	2000      	movs	r0, #0
 800e49c:	f7f1 fef4 	bl	8000288 <__aeabi_dsub>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	4640      	mov	r0, r8
 800e4a6:	4649      	mov	r1, r9
 800e4a8:	f7f2 fb18 	bl	8000adc <__aeabi_dcmplt>
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	f43f af35 	beq.w	800e31c <_dtoa_r+0x464>
 800e4b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e4b4:	1e6b      	subs	r3, r5, #1
 800e4b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e4bc:	2b30      	cmp	r3, #48	; 0x30
 800e4be:	d0f8      	beq.n	800e4b2 <_dtoa_r+0x5fa>
 800e4c0:	9700      	str	r7, [sp, #0]
 800e4c2:	e049      	b.n	800e558 <_dtoa_r+0x6a0>
 800e4c4:	4b05      	ldr	r3, [pc, #20]	; (800e4dc <_dtoa_r+0x624>)
 800e4c6:	f7f2 f897 	bl	80005f8 <__aeabi_dmul>
 800e4ca:	4680      	mov	r8, r0
 800e4cc:	4689      	mov	r9, r1
 800e4ce:	e7bd      	b.n	800e44c <_dtoa_r+0x594>
 800e4d0:	080105e0 	.word	0x080105e0
 800e4d4:	080105b8 	.word	0x080105b8
 800e4d8:	3ff00000 	.word	0x3ff00000
 800e4dc:	40240000 	.word	0x40240000
 800e4e0:	401c0000 	.word	0x401c0000
 800e4e4:	40140000 	.word	0x40140000
 800e4e8:	3fe00000 	.word	0x3fe00000
 800e4ec:	9d01      	ldr	r5, [sp, #4]
 800e4ee:	4656      	mov	r6, sl
 800e4f0:	465f      	mov	r7, fp
 800e4f2:	4642      	mov	r2, r8
 800e4f4:	464b      	mov	r3, r9
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	4639      	mov	r1, r7
 800e4fa:	f7f2 f9a7 	bl	800084c <__aeabi_ddiv>
 800e4fe:	f7f2 fb2b 	bl	8000b58 <__aeabi_d2iz>
 800e502:	4682      	mov	sl, r0
 800e504:	f7f2 f80e 	bl	8000524 <__aeabi_i2d>
 800e508:	4642      	mov	r2, r8
 800e50a:	464b      	mov	r3, r9
 800e50c:	f7f2 f874 	bl	80005f8 <__aeabi_dmul>
 800e510:	4602      	mov	r2, r0
 800e512:	460b      	mov	r3, r1
 800e514:	4630      	mov	r0, r6
 800e516:	4639      	mov	r1, r7
 800e518:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e51c:	f7f1 feb4 	bl	8000288 <__aeabi_dsub>
 800e520:	f805 6b01 	strb.w	r6, [r5], #1
 800e524:	9e01      	ldr	r6, [sp, #4]
 800e526:	9f03      	ldr	r7, [sp, #12]
 800e528:	1bae      	subs	r6, r5, r6
 800e52a:	42b7      	cmp	r7, r6
 800e52c:	4602      	mov	r2, r0
 800e52e:	460b      	mov	r3, r1
 800e530:	d135      	bne.n	800e59e <_dtoa_r+0x6e6>
 800e532:	f7f1 feab 	bl	800028c <__adddf3>
 800e536:	4642      	mov	r2, r8
 800e538:	464b      	mov	r3, r9
 800e53a:	4606      	mov	r6, r0
 800e53c:	460f      	mov	r7, r1
 800e53e:	f7f2 faeb 	bl	8000b18 <__aeabi_dcmpgt>
 800e542:	b9d0      	cbnz	r0, 800e57a <_dtoa_r+0x6c2>
 800e544:	4642      	mov	r2, r8
 800e546:	464b      	mov	r3, r9
 800e548:	4630      	mov	r0, r6
 800e54a:	4639      	mov	r1, r7
 800e54c:	f7f2 fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 800e550:	b110      	cbz	r0, 800e558 <_dtoa_r+0x6a0>
 800e552:	f01a 0f01 	tst.w	sl, #1
 800e556:	d110      	bne.n	800e57a <_dtoa_r+0x6c2>
 800e558:	4620      	mov	r0, r4
 800e55a:	ee18 1a10 	vmov	r1, s16
 800e55e:	f000 fbdf 	bl	800ed20 <_Bfree>
 800e562:	2300      	movs	r3, #0
 800e564:	9800      	ldr	r0, [sp, #0]
 800e566:	702b      	strb	r3, [r5, #0]
 800e568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e56a:	3001      	adds	r0, #1
 800e56c:	6018      	str	r0, [r3, #0]
 800e56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e570:	2b00      	cmp	r3, #0
 800e572:	f43f acf1 	beq.w	800df58 <_dtoa_r+0xa0>
 800e576:	601d      	str	r5, [r3, #0]
 800e578:	e4ee      	b.n	800df58 <_dtoa_r+0xa0>
 800e57a:	9f00      	ldr	r7, [sp, #0]
 800e57c:	462b      	mov	r3, r5
 800e57e:	461d      	mov	r5, r3
 800e580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e584:	2a39      	cmp	r2, #57	; 0x39
 800e586:	d106      	bne.n	800e596 <_dtoa_r+0x6de>
 800e588:	9a01      	ldr	r2, [sp, #4]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d1f7      	bne.n	800e57e <_dtoa_r+0x6c6>
 800e58e:	9901      	ldr	r1, [sp, #4]
 800e590:	2230      	movs	r2, #48	; 0x30
 800e592:	3701      	adds	r7, #1
 800e594:	700a      	strb	r2, [r1, #0]
 800e596:	781a      	ldrb	r2, [r3, #0]
 800e598:	3201      	adds	r2, #1
 800e59a:	701a      	strb	r2, [r3, #0]
 800e59c:	e790      	b.n	800e4c0 <_dtoa_r+0x608>
 800e59e:	4ba6      	ldr	r3, [pc, #664]	; (800e838 <_dtoa_r+0x980>)
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f7f2 f829 	bl	80005f8 <__aeabi_dmul>
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	4606      	mov	r6, r0
 800e5ac:	460f      	mov	r7, r1
 800e5ae:	f7f2 fa8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	d09d      	beq.n	800e4f2 <_dtoa_r+0x63a>
 800e5b6:	e7cf      	b.n	800e558 <_dtoa_r+0x6a0>
 800e5b8:	9a08      	ldr	r2, [sp, #32]
 800e5ba:	2a00      	cmp	r2, #0
 800e5bc:	f000 80d7 	beq.w	800e76e <_dtoa_r+0x8b6>
 800e5c0:	9a06      	ldr	r2, [sp, #24]
 800e5c2:	2a01      	cmp	r2, #1
 800e5c4:	f300 80ba 	bgt.w	800e73c <_dtoa_r+0x884>
 800e5c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5ca:	2a00      	cmp	r2, #0
 800e5cc:	f000 80b2 	beq.w	800e734 <_dtoa_r+0x87c>
 800e5d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e5d4:	9e07      	ldr	r6, [sp, #28]
 800e5d6:	9d04      	ldr	r5, [sp, #16]
 800e5d8:	9a04      	ldr	r2, [sp, #16]
 800e5da:	441a      	add	r2, r3
 800e5dc:	9204      	str	r2, [sp, #16]
 800e5de:	9a05      	ldr	r2, [sp, #20]
 800e5e0:	2101      	movs	r1, #1
 800e5e2:	441a      	add	r2, r3
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	9205      	str	r2, [sp, #20]
 800e5e8:	f000 fc52 	bl	800ee90 <__i2b>
 800e5ec:	4607      	mov	r7, r0
 800e5ee:	2d00      	cmp	r5, #0
 800e5f0:	dd0c      	ble.n	800e60c <_dtoa_r+0x754>
 800e5f2:	9b05      	ldr	r3, [sp, #20]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	dd09      	ble.n	800e60c <_dtoa_r+0x754>
 800e5f8:	42ab      	cmp	r3, r5
 800e5fa:	9a04      	ldr	r2, [sp, #16]
 800e5fc:	bfa8      	it	ge
 800e5fe:	462b      	movge	r3, r5
 800e600:	1ad2      	subs	r2, r2, r3
 800e602:	9204      	str	r2, [sp, #16]
 800e604:	9a05      	ldr	r2, [sp, #20]
 800e606:	1aed      	subs	r5, r5, r3
 800e608:	1ad3      	subs	r3, r2, r3
 800e60a:	9305      	str	r3, [sp, #20]
 800e60c:	9b07      	ldr	r3, [sp, #28]
 800e60e:	b31b      	cbz	r3, 800e658 <_dtoa_r+0x7a0>
 800e610:	9b08      	ldr	r3, [sp, #32]
 800e612:	2b00      	cmp	r3, #0
 800e614:	f000 80af 	beq.w	800e776 <_dtoa_r+0x8be>
 800e618:	2e00      	cmp	r6, #0
 800e61a:	dd13      	ble.n	800e644 <_dtoa_r+0x78c>
 800e61c:	4639      	mov	r1, r7
 800e61e:	4632      	mov	r2, r6
 800e620:	4620      	mov	r0, r4
 800e622:	f000 fcf5 	bl	800f010 <__pow5mult>
 800e626:	ee18 2a10 	vmov	r2, s16
 800e62a:	4601      	mov	r1, r0
 800e62c:	4607      	mov	r7, r0
 800e62e:	4620      	mov	r0, r4
 800e630:	f000 fc44 	bl	800eebc <__multiply>
 800e634:	ee18 1a10 	vmov	r1, s16
 800e638:	4680      	mov	r8, r0
 800e63a:	4620      	mov	r0, r4
 800e63c:	f000 fb70 	bl	800ed20 <_Bfree>
 800e640:	ee08 8a10 	vmov	s16, r8
 800e644:	9b07      	ldr	r3, [sp, #28]
 800e646:	1b9a      	subs	r2, r3, r6
 800e648:	d006      	beq.n	800e658 <_dtoa_r+0x7a0>
 800e64a:	ee18 1a10 	vmov	r1, s16
 800e64e:	4620      	mov	r0, r4
 800e650:	f000 fcde 	bl	800f010 <__pow5mult>
 800e654:	ee08 0a10 	vmov	s16, r0
 800e658:	2101      	movs	r1, #1
 800e65a:	4620      	mov	r0, r4
 800e65c:	f000 fc18 	bl	800ee90 <__i2b>
 800e660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e662:	2b00      	cmp	r3, #0
 800e664:	4606      	mov	r6, r0
 800e666:	f340 8088 	ble.w	800e77a <_dtoa_r+0x8c2>
 800e66a:	461a      	mov	r2, r3
 800e66c:	4601      	mov	r1, r0
 800e66e:	4620      	mov	r0, r4
 800e670:	f000 fcce 	bl	800f010 <__pow5mult>
 800e674:	9b06      	ldr	r3, [sp, #24]
 800e676:	2b01      	cmp	r3, #1
 800e678:	4606      	mov	r6, r0
 800e67a:	f340 8081 	ble.w	800e780 <_dtoa_r+0x8c8>
 800e67e:	f04f 0800 	mov.w	r8, #0
 800e682:	6933      	ldr	r3, [r6, #16]
 800e684:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e688:	6918      	ldr	r0, [r3, #16]
 800e68a:	f000 fbb1 	bl	800edf0 <__hi0bits>
 800e68e:	f1c0 0020 	rsb	r0, r0, #32
 800e692:	9b05      	ldr	r3, [sp, #20]
 800e694:	4418      	add	r0, r3
 800e696:	f010 001f 	ands.w	r0, r0, #31
 800e69a:	f000 8092 	beq.w	800e7c2 <_dtoa_r+0x90a>
 800e69e:	f1c0 0320 	rsb	r3, r0, #32
 800e6a2:	2b04      	cmp	r3, #4
 800e6a4:	f340 808a 	ble.w	800e7bc <_dtoa_r+0x904>
 800e6a8:	f1c0 001c 	rsb	r0, r0, #28
 800e6ac:	9b04      	ldr	r3, [sp, #16]
 800e6ae:	4403      	add	r3, r0
 800e6b0:	9304      	str	r3, [sp, #16]
 800e6b2:	9b05      	ldr	r3, [sp, #20]
 800e6b4:	4403      	add	r3, r0
 800e6b6:	4405      	add	r5, r0
 800e6b8:	9305      	str	r3, [sp, #20]
 800e6ba:	9b04      	ldr	r3, [sp, #16]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	dd07      	ble.n	800e6d0 <_dtoa_r+0x818>
 800e6c0:	ee18 1a10 	vmov	r1, s16
 800e6c4:	461a      	mov	r2, r3
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	f000 fcfc 	bl	800f0c4 <__lshift>
 800e6cc:	ee08 0a10 	vmov	s16, r0
 800e6d0:	9b05      	ldr	r3, [sp, #20]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	dd05      	ble.n	800e6e2 <_dtoa_r+0x82a>
 800e6d6:	4631      	mov	r1, r6
 800e6d8:	461a      	mov	r2, r3
 800e6da:	4620      	mov	r0, r4
 800e6dc:	f000 fcf2 	bl	800f0c4 <__lshift>
 800e6e0:	4606      	mov	r6, r0
 800e6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d06e      	beq.n	800e7c6 <_dtoa_r+0x90e>
 800e6e8:	ee18 0a10 	vmov	r0, s16
 800e6ec:	4631      	mov	r1, r6
 800e6ee:	f000 fd59 	bl	800f1a4 <__mcmp>
 800e6f2:	2800      	cmp	r0, #0
 800e6f4:	da67      	bge.n	800e7c6 <_dtoa_r+0x90e>
 800e6f6:	9b00      	ldr	r3, [sp, #0]
 800e6f8:	3b01      	subs	r3, #1
 800e6fa:	ee18 1a10 	vmov	r1, s16
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	220a      	movs	r2, #10
 800e702:	2300      	movs	r3, #0
 800e704:	4620      	mov	r0, r4
 800e706:	f000 fb2d 	bl	800ed64 <__multadd>
 800e70a:	9b08      	ldr	r3, [sp, #32]
 800e70c:	ee08 0a10 	vmov	s16, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	f000 81b1 	beq.w	800ea78 <_dtoa_r+0xbc0>
 800e716:	2300      	movs	r3, #0
 800e718:	4639      	mov	r1, r7
 800e71a:	220a      	movs	r2, #10
 800e71c:	4620      	mov	r0, r4
 800e71e:	f000 fb21 	bl	800ed64 <__multadd>
 800e722:	9b02      	ldr	r3, [sp, #8]
 800e724:	2b00      	cmp	r3, #0
 800e726:	4607      	mov	r7, r0
 800e728:	f300 808e 	bgt.w	800e848 <_dtoa_r+0x990>
 800e72c:	9b06      	ldr	r3, [sp, #24]
 800e72e:	2b02      	cmp	r3, #2
 800e730:	dc51      	bgt.n	800e7d6 <_dtoa_r+0x91e>
 800e732:	e089      	b.n	800e848 <_dtoa_r+0x990>
 800e734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e73a:	e74b      	b.n	800e5d4 <_dtoa_r+0x71c>
 800e73c:	9b03      	ldr	r3, [sp, #12]
 800e73e:	1e5e      	subs	r6, r3, #1
 800e740:	9b07      	ldr	r3, [sp, #28]
 800e742:	42b3      	cmp	r3, r6
 800e744:	bfbf      	itttt	lt
 800e746:	9b07      	ldrlt	r3, [sp, #28]
 800e748:	9607      	strlt	r6, [sp, #28]
 800e74a:	1af2      	sublt	r2, r6, r3
 800e74c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e74e:	bfb6      	itet	lt
 800e750:	189b      	addlt	r3, r3, r2
 800e752:	1b9e      	subge	r6, r3, r6
 800e754:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e756:	9b03      	ldr	r3, [sp, #12]
 800e758:	bfb8      	it	lt
 800e75a:	2600      	movlt	r6, #0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	bfb7      	itett	lt
 800e760:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e764:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e768:	1a9d      	sublt	r5, r3, r2
 800e76a:	2300      	movlt	r3, #0
 800e76c:	e734      	b.n	800e5d8 <_dtoa_r+0x720>
 800e76e:	9e07      	ldr	r6, [sp, #28]
 800e770:	9d04      	ldr	r5, [sp, #16]
 800e772:	9f08      	ldr	r7, [sp, #32]
 800e774:	e73b      	b.n	800e5ee <_dtoa_r+0x736>
 800e776:	9a07      	ldr	r2, [sp, #28]
 800e778:	e767      	b.n	800e64a <_dtoa_r+0x792>
 800e77a:	9b06      	ldr	r3, [sp, #24]
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	dc18      	bgt.n	800e7b2 <_dtoa_r+0x8fa>
 800e780:	f1ba 0f00 	cmp.w	sl, #0
 800e784:	d115      	bne.n	800e7b2 <_dtoa_r+0x8fa>
 800e786:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e78a:	b993      	cbnz	r3, 800e7b2 <_dtoa_r+0x8fa>
 800e78c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e790:	0d1b      	lsrs	r3, r3, #20
 800e792:	051b      	lsls	r3, r3, #20
 800e794:	b183      	cbz	r3, 800e7b8 <_dtoa_r+0x900>
 800e796:	9b04      	ldr	r3, [sp, #16]
 800e798:	3301      	adds	r3, #1
 800e79a:	9304      	str	r3, [sp, #16]
 800e79c:	9b05      	ldr	r3, [sp, #20]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	9305      	str	r3, [sp, #20]
 800e7a2:	f04f 0801 	mov.w	r8, #1
 800e7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f47f af6a 	bne.w	800e682 <_dtoa_r+0x7ca>
 800e7ae:	2001      	movs	r0, #1
 800e7b0:	e76f      	b.n	800e692 <_dtoa_r+0x7da>
 800e7b2:	f04f 0800 	mov.w	r8, #0
 800e7b6:	e7f6      	b.n	800e7a6 <_dtoa_r+0x8ee>
 800e7b8:	4698      	mov	r8, r3
 800e7ba:	e7f4      	b.n	800e7a6 <_dtoa_r+0x8ee>
 800e7bc:	f43f af7d 	beq.w	800e6ba <_dtoa_r+0x802>
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	301c      	adds	r0, #28
 800e7c4:	e772      	b.n	800e6ac <_dtoa_r+0x7f4>
 800e7c6:	9b03      	ldr	r3, [sp, #12]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	dc37      	bgt.n	800e83c <_dtoa_r+0x984>
 800e7cc:	9b06      	ldr	r3, [sp, #24]
 800e7ce:	2b02      	cmp	r3, #2
 800e7d0:	dd34      	ble.n	800e83c <_dtoa_r+0x984>
 800e7d2:	9b03      	ldr	r3, [sp, #12]
 800e7d4:	9302      	str	r3, [sp, #8]
 800e7d6:	9b02      	ldr	r3, [sp, #8]
 800e7d8:	b96b      	cbnz	r3, 800e7f6 <_dtoa_r+0x93e>
 800e7da:	4631      	mov	r1, r6
 800e7dc:	2205      	movs	r2, #5
 800e7de:	4620      	mov	r0, r4
 800e7e0:	f000 fac0 	bl	800ed64 <__multadd>
 800e7e4:	4601      	mov	r1, r0
 800e7e6:	4606      	mov	r6, r0
 800e7e8:	ee18 0a10 	vmov	r0, s16
 800e7ec:	f000 fcda 	bl	800f1a4 <__mcmp>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	f73f adbb 	bgt.w	800e36c <_dtoa_r+0x4b4>
 800e7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7f8:	9d01      	ldr	r5, [sp, #4]
 800e7fa:	43db      	mvns	r3, r3
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	f04f 0800 	mov.w	r8, #0
 800e802:	4631      	mov	r1, r6
 800e804:	4620      	mov	r0, r4
 800e806:	f000 fa8b 	bl	800ed20 <_Bfree>
 800e80a:	2f00      	cmp	r7, #0
 800e80c:	f43f aea4 	beq.w	800e558 <_dtoa_r+0x6a0>
 800e810:	f1b8 0f00 	cmp.w	r8, #0
 800e814:	d005      	beq.n	800e822 <_dtoa_r+0x96a>
 800e816:	45b8      	cmp	r8, r7
 800e818:	d003      	beq.n	800e822 <_dtoa_r+0x96a>
 800e81a:	4641      	mov	r1, r8
 800e81c:	4620      	mov	r0, r4
 800e81e:	f000 fa7f 	bl	800ed20 <_Bfree>
 800e822:	4639      	mov	r1, r7
 800e824:	4620      	mov	r0, r4
 800e826:	f000 fa7b 	bl	800ed20 <_Bfree>
 800e82a:	e695      	b.n	800e558 <_dtoa_r+0x6a0>
 800e82c:	2600      	movs	r6, #0
 800e82e:	4637      	mov	r7, r6
 800e830:	e7e1      	b.n	800e7f6 <_dtoa_r+0x93e>
 800e832:	9700      	str	r7, [sp, #0]
 800e834:	4637      	mov	r7, r6
 800e836:	e599      	b.n	800e36c <_dtoa_r+0x4b4>
 800e838:	40240000 	.word	0x40240000
 800e83c:	9b08      	ldr	r3, [sp, #32]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	f000 80ca 	beq.w	800e9d8 <_dtoa_r+0xb20>
 800e844:	9b03      	ldr	r3, [sp, #12]
 800e846:	9302      	str	r3, [sp, #8]
 800e848:	2d00      	cmp	r5, #0
 800e84a:	dd05      	ble.n	800e858 <_dtoa_r+0x9a0>
 800e84c:	4639      	mov	r1, r7
 800e84e:	462a      	mov	r2, r5
 800e850:	4620      	mov	r0, r4
 800e852:	f000 fc37 	bl	800f0c4 <__lshift>
 800e856:	4607      	mov	r7, r0
 800e858:	f1b8 0f00 	cmp.w	r8, #0
 800e85c:	d05b      	beq.n	800e916 <_dtoa_r+0xa5e>
 800e85e:	6879      	ldr	r1, [r7, #4]
 800e860:	4620      	mov	r0, r4
 800e862:	f000 fa1d 	bl	800eca0 <_Balloc>
 800e866:	4605      	mov	r5, r0
 800e868:	b928      	cbnz	r0, 800e876 <_dtoa_r+0x9be>
 800e86a:	4b87      	ldr	r3, [pc, #540]	; (800ea88 <_dtoa_r+0xbd0>)
 800e86c:	4602      	mov	r2, r0
 800e86e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e872:	f7ff bb3b 	b.w	800deec <_dtoa_r+0x34>
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	3202      	adds	r2, #2
 800e87a:	0092      	lsls	r2, r2, #2
 800e87c:	f107 010c 	add.w	r1, r7, #12
 800e880:	300c      	adds	r0, #12
 800e882:	f7fe fdc1 	bl	800d408 <memcpy>
 800e886:	2201      	movs	r2, #1
 800e888:	4629      	mov	r1, r5
 800e88a:	4620      	mov	r0, r4
 800e88c:	f000 fc1a 	bl	800f0c4 <__lshift>
 800e890:	9b01      	ldr	r3, [sp, #4]
 800e892:	f103 0901 	add.w	r9, r3, #1
 800e896:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e89a:	4413      	add	r3, r2
 800e89c:	9305      	str	r3, [sp, #20]
 800e89e:	f00a 0301 	and.w	r3, sl, #1
 800e8a2:	46b8      	mov	r8, r7
 800e8a4:	9304      	str	r3, [sp, #16]
 800e8a6:	4607      	mov	r7, r0
 800e8a8:	4631      	mov	r1, r6
 800e8aa:	ee18 0a10 	vmov	r0, s16
 800e8ae:	f7ff fa76 	bl	800dd9e <quorem>
 800e8b2:	4641      	mov	r1, r8
 800e8b4:	9002      	str	r0, [sp, #8]
 800e8b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e8ba:	ee18 0a10 	vmov	r0, s16
 800e8be:	f000 fc71 	bl	800f1a4 <__mcmp>
 800e8c2:	463a      	mov	r2, r7
 800e8c4:	9003      	str	r0, [sp, #12]
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	f000 fc87 	bl	800f1dc <__mdiff>
 800e8ce:	68c2      	ldr	r2, [r0, #12]
 800e8d0:	f109 3bff 	add.w	fp, r9, #4294967295
 800e8d4:	4605      	mov	r5, r0
 800e8d6:	bb02      	cbnz	r2, 800e91a <_dtoa_r+0xa62>
 800e8d8:	4601      	mov	r1, r0
 800e8da:	ee18 0a10 	vmov	r0, s16
 800e8de:	f000 fc61 	bl	800f1a4 <__mcmp>
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	4629      	mov	r1, r5
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	9207      	str	r2, [sp, #28]
 800e8ea:	f000 fa19 	bl	800ed20 <_Bfree>
 800e8ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e8f2:	ea43 0102 	orr.w	r1, r3, r2
 800e8f6:	9b04      	ldr	r3, [sp, #16]
 800e8f8:	430b      	orrs	r3, r1
 800e8fa:	464d      	mov	r5, r9
 800e8fc:	d10f      	bne.n	800e91e <_dtoa_r+0xa66>
 800e8fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e902:	d02a      	beq.n	800e95a <_dtoa_r+0xaa2>
 800e904:	9b03      	ldr	r3, [sp, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	dd02      	ble.n	800e910 <_dtoa_r+0xa58>
 800e90a:	9b02      	ldr	r3, [sp, #8]
 800e90c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e910:	f88b a000 	strb.w	sl, [fp]
 800e914:	e775      	b.n	800e802 <_dtoa_r+0x94a>
 800e916:	4638      	mov	r0, r7
 800e918:	e7ba      	b.n	800e890 <_dtoa_r+0x9d8>
 800e91a:	2201      	movs	r2, #1
 800e91c:	e7e2      	b.n	800e8e4 <_dtoa_r+0xa2c>
 800e91e:	9b03      	ldr	r3, [sp, #12]
 800e920:	2b00      	cmp	r3, #0
 800e922:	db04      	blt.n	800e92e <_dtoa_r+0xa76>
 800e924:	9906      	ldr	r1, [sp, #24]
 800e926:	430b      	orrs	r3, r1
 800e928:	9904      	ldr	r1, [sp, #16]
 800e92a:	430b      	orrs	r3, r1
 800e92c:	d122      	bne.n	800e974 <_dtoa_r+0xabc>
 800e92e:	2a00      	cmp	r2, #0
 800e930:	ddee      	ble.n	800e910 <_dtoa_r+0xa58>
 800e932:	ee18 1a10 	vmov	r1, s16
 800e936:	2201      	movs	r2, #1
 800e938:	4620      	mov	r0, r4
 800e93a:	f000 fbc3 	bl	800f0c4 <__lshift>
 800e93e:	4631      	mov	r1, r6
 800e940:	ee08 0a10 	vmov	s16, r0
 800e944:	f000 fc2e 	bl	800f1a4 <__mcmp>
 800e948:	2800      	cmp	r0, #0
 800e94a:	dc03      	bgt.n	800e954 <_dtoa_r+0xa9c>
 800e94c:	d1e0      	bne.n	800e910 <_dtoa_r+0xa58>
 800e94e:	f01a 0f01 	tst.w	sl, #1
 800e952:	d0dd      	beq.n	800e910 <_dtoa_r+0xa58>
 800e954:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e958:	d1d7      	bne.n	800e90a <_dtoa_r+0xa52>
 800e95a:	2339      	movs	r3, #57	; 0x39
 800e95c:	f88b 3000 	strb.w	r3, [fp]
 800e960:	462b      	mov	r3, r5
 800e962:	461d      	mov	r5, r3
 800e964:	3b01      	subs	r3, #1
 800e966:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e96a:	2a39      	cmp	r2, #57	; 0x39
 800e96c:	d071      	beq.n	800ea52 <_dtoa_r+0xb9a>
 800e96e:	3201      	adds	r2, #1
 800e970:	701a      	strb	r2, [r3, #0]
 800e972:	e746      	b.n	800e802 <_dtoa_r+0x94a>
 800e974:	2a00      	cmp	r2, #0
 800e976:	dd07      	ble.n	800e988 <_dtoa_r+0xad0>
 800e978:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e97c:	d0ed      	beq.n	800e95a <_dtoa_r+0xaa2>
 800e97e:	f10a 0301 	add.w	r3, sl, #1
 800e982:	f88b 3000 	strb.w	r3, [fp]
 800e986:	e73c      	b.n	800e802 <_dtoa_r+0x94a>
 800e988:	9b05      	ldr	r3, [sp, #20]
 800e98a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e98e:	4599      	cmp	r9, r3
 800e990:	d047      	beq.n	800ea22 <_dtoa_r+0xb6a>
 800e992:	ee18 1a10 	vmov	r1, s16
 800e996:	2300      	movs	r3, #0
 800e998:	220a      	movs	r2, #10
 800e99a:	4620      	mov	r0, r4
 800e99c:	f000 f9e2 	bl	800ed64 <__multadd>
 800e9a0:	45b8      	cmp	r8, r7
 800e9a2:	ee08 0a10 	vmov	s16, r0
 800e9a6:	f04f 0300 	mov.w	r3, #0
 800e9aa:	f04f 020a 	mov.w	r2, #10
 800e9ae:	4641      	mov	r1, r8
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	d106      	bne.n	800e9c2 <_dtoa_r+0xb0a>
 800e9b4:	f000 f9d6 	bl	800ed64 <__multadd>
 800e9b8:	4680      	mov	r8, r0
 800e9ba:	4607      	mov	r7, r0
 800e9bc:	f109 0901 	add.w	r9, r9, #1
 800e9c0:	e772      	b.n	800e8a8 <_dtoa_r+0x9f0>
 800e9c2:	f000 f9cf 	bl	800ed64 <__multadd>
 800e9c6:	4639      	mov	r1, r7
 800e9c8:	4680      	mov	r8, r0
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	220a      	movs	r2, #10
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f000 f9c8 	bl	800ed64 <__multadd>
 800e9d4:	4607      	mov	r7, r0
 800e9d6:	e7f1      	b.n	800e9bc <_dtoa_r+0xb04>
 800e9d8:	9b03      	ldr	r3, [sp, #12]
 800e9da:	9302      	str	r3, [sp, #8]
 800e9dc:	9d01      	ldr	r5, [sp, #4]
 800e9de:	ee18 0a10 	vmov	r0, s16
 800e9e2:	4631      	mov	r1, r6
 800e9e4:	f7ff f9db 	bl	800dd9e <quorem>
 800e9e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e9ec:	9b01      	ldr	r3, [sp, #4]
 800e9ee:	f805 ab01 	strb.w	sl, [r5], #1
 800e9f2:	1aea      	subs	r2, r5, r3
 800e9f4:	9b02      	ldr	r3, [sp, #8]
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	dd09      	ble.n	800ea0e <_dtoa_r+0xb56>
 800e9fa:	ee18 1a10 	vmov	r1, s16
 800e9fe:	2300      	movs	r3, #0
 800ea00:	220a      	movs	r2, #10
 800ea02:	4620      	mov	r0, r4
 800ea04:	f000 f9ae 	bl	800ed64 <__multadd>
 800ea08:	ee08 0a10 	vmov	s16, r0
 800ea0c:	e7e7      	b.n	800e9de <_dtoa_r+0xb26>
 800ea0e:	9b02      	ldr	r3, [sp, #8]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	bfc8      	it	gt
 800ea14:	461d      	movgt	r5, r3
 800ea16:	9b01      	ldr	r3, [sp, #4]
 800ea18:	bfd8      	it	le
 800ea1a:	2501      	movle	r5, #1
 800ea1c:	441d      	add	r5, r3
 800ea1e:	f04f 0800 	mov.w	r8, #0
 800ea22:	ee18 1a10 	vmov	r1, s16
 800ea26:	2201      	movs	r2, #1
 800ea28:	4620      	mov	r0, r4
 800ea2a:	f000 fb4b 	bl	800f0c4 <__lshift>
 800ea2e:	4631      	mov	r1, r6
 800ea30:	ee08 0a10 	vmov	s16, r0
 800ea34:	f000 fbb6 	bl	800f1a4 <__mcmp>
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	dc91      	bgt.n	800e960 <_dtoa_r+0xaa8>
 800ea3c:	d102      	bne.n	800ea44 <_dtoa_r+0xb8c>
 800ea3e:	f01a 0f01 	tst.w	sl, #1
 800ea42:	d18d      	bne.n	800e960 <_dtoa_r+0xaa8>
 800ea44:	462b      	mov	r3, r5
 800ea46:	461d      	mov	r5, r3
 800ea48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea4c:	2a30      	cmp	r2, #48	; 0x30
 800ea4e:	d0fa      	beq.n	800ea46 <_dtoa_r+0xb8e>
 800ea50:	e6d7      	b.n	800e802 <_dtoa_r+0x94a>
 800ea52:	9a01      	ldr	r2, [sp, #4]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d184      	bne.n	800e962 <_dtoa_r+0xaaa>
 800ea58:	9b00      	ldr	r3, [sp, #0]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	9300      	str	r3, [sp, #0]
 800ea5e:	2331      	movs	r3, #49	; 0x31
 800ea60:	7013      	strb	r3, [r2, #0]
 800ea62:	e6ce      	b.n	800e802 <_dtoa_r+0x94a>
 800ea64:	4b09      	ldr	r3, [pc, #36]	; (800ea8c <_dtoa_r+0xbd4>)
 800ea66:	f7ff ba95 	b.w	800df94 <_dtoa_r+0xdc>
 800ea6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	f47f aa6e 	bne.w	800df4e <_dtoa_r+0x96>
 800ea72:	4b07      	ldr	r3, [pc, #28]	; (800ea90 <_dtoa_r+0xbd8>)
 800ea74:	f7ff ba8e 	b.w	800df94 <_dtoa_r+0xdc>
 800ea78:	9b02      	ldr	r3, [sp, #8]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	dcae      	bgt.n	800e9dc <_dtoa_r+0xb24>
 800ea7e:	9b06      	ldr	r3, [sp, #24]
 800ea80:	2b02      	cmp	r3, #2
 800ea82:	f73f aea8 	bgt.w	800e7d6 <_dtoa_r+0x91e>
 800ea86:	e7a9      	b.n	800e9dc <_dtoa_r+0xb24>
 800ea88:	080104eb 	.word	0x080104eb
 800ea8c:	08010448 	.word	0x08010448
 800ea90:	0801046c 	.word	0x0801046c

0800ea94 <std>:
 800ea94:	2300      	movs	r3, #0
 800ea96:	b510      	push	{r4, lr}
 800ea98:	4604      	mov	r4, r0
 800ea9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ea9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eaa2:	6083      	str	r3, [r0, #8]
 800eaa4:	8181      	strh	r1, [r0, #12]
 800eaa6:	6643      	str	r3, [r0, #100]	; 0x64
 800eaa8:	81c2      	strh	r2, [r0, #14]
 800eaaa:	6183      	str	r3, [r0, #24]
 800eaac:	4619      	mov	r1, r3
 800eaae:	2208      	movs	r2, #8
 800eab0:	305c      	adds	r0, #92	; 0x5c
 800eab2:	f7fe fcb7 	bl	800d424 <memset>
 800eab6:	4b05      	ldr	r3, [pc, #20]	; (800eacc <std+0x38>)
 800eab8:	6263      	str	r3, [r4, #36]	; 0x24
 800eaba:	4b05      	ldr	r3, [pc, #20]	; (800ead0 <std+0x3c>)
 800eabc:	62a3      	str	r3, [r4, #40]	; 0x28
 800eabe:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <std+0x40>)
 800eac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eac2:	4b05      	ldr	r3, [pc, #20]	; (800ead8 <std+0x44>)
 800eac4:	6224      	str	r4, [r4, #32]
 800eac6:	6323      	str	r3, [r4, #48]	; 0x30
 800eac8:	bd10      	pop	{r4, pc}
 800eaca:	bf00      	nop
 800eacc:	0800fb21 	.word	0x0800fb21
 800ead0:	0800fb43 	.word	0x0800fb43
 800ead4:	0800fb7b 	.word	0x0800fb7b
 800ead8:	0800fb9f 	.word	0x0800fb9f

0800eadc <_cleanup_r>:
 800eadc:	4901      	ldr	r1, [pc, #4]	; (800eae4 <_cleanup_r+0x8>)
 800eade:	f000 b8af 	b.w	800ec40 <_fwalk_reent>
 800eae2:	bf00      	nop
 800eae4:	0800feb5 	.word	0x0800feb5

0800eae8 <__sfmoreglue>:
 800eae8:	b570      	push	{r4, r5, r6, lr}
 800eaea:	2268      	movs	r2, #104	; 0x68
 800eaec:	1e4d      	subs	r5, r1, #1
 800eaee:	4355      	muls	r5, r2
 800eaf0:	460e      	mov	r6, r1
 800eaf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eaf6:	f000 fcd9 	bl	800f4ac <_malloc_r>
 800eafa:	4604      	mov	r4, r0
 800eafc:	b140      	cbz	r0, 800eb10 <__sfmoreglue+0x28>
 800eafe:	2100      	movs	r1, #0
 800eb00:	e9c0 1600 	strd	r1, r6, [r0]
 800eb04:	300c      	adds	r0, #12
 800eb06:	60a0      	str	r0, [r4, #8]
 800eb08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb0c:	f7fe fc8a 	bl	800d424 <memset>
 800eb10:	4620      	mov	r0, r4
 800eb12:	bd70      	pop	{r4, r5, r6, pc}

0800eb14 <__sfp_lock_acquire>:
 800eb14:	4801      	ldr	r0, [pc, #4]	; (800eb1c <__sfp_lock_acquire+0x8>)
 800eb16:	f000 b8b8 	b.w	800ec8a <__retarget_lock_acquire_recursive>
 800eb1a:	bf00      	nop
 800eb1c:	20002d01 	.word	0x20002d01

0800eb20 <__sfp_lock_release>:
 800eb20:	4801      	ldr	r0, [pc, #4]	; (800eb28 <__sfp_lock_release+0x8>)
 800eb22:	f000 b8b3 	b.w	800ec8c <__retarget_lock_release_recursive>
 800eb26:	bf00      	nop
 800eb28:	20002d01 	.word	0x20002d01

0800eb2c <__sinit_lock_acquire>:
 800eb2c:	4801      	ldr	r0, [pc, #4]	; (800eb34 <__sinit_lock_acquire+0x8>)
 800eb2e:	f000 b8ac 	b.w	800ec8a <__retarget_lock_acquire_recursive>
 800eb32:	bf00      	nop
 800eb34:	20002d02 	.word	0x20002d02

0800eb38 <__sinit_lock_release>:
 800eb38:	4801      	ldr	r0, [pc, #4]	; (800eb40 <__sinit_lock_release+0x8>)
 800eb3a:	f000 b8a7 	b.w	800ec8c <__retarget_lock_release_recursive>
 800eb3e:	bf00      	nop
 800eb40:	20002d02 	.word	0x20002d02

0800eb44 <__sinit>:
 800eb44:	b510      	push	{r4, lr}
 800eb46:	4604      	mov	r4, r0
 800eb48:	f7ff fff0 	bl	800eb2c <__sinit_lock_acquire>
 800eb4c:	69a3      	ldr	r3, [r4, #24]
 800eb4e:	b11b      	cbz	r3, 800eb58 <__sinit+0x14>
 800eb50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb54:	f7ff bff0 	b.w	800eb38 <__sinit_lock_release>
 800eb58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb5c:	6523      	str	r3, [r4, #80]	; 0x50
 800eb5e:	4b13      	ldr	r3, [pc, #76]	; (800ebac <__sinit+0x68>)
 800eb60:	4a13      	ldr	r2, [pc, #76]	; (800ebb0 <__sinit+0x6c>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb66:	42a3      	cmp	r3, r4
 800eb68:	bf04      	itt	eq
 800eb6a:	2301      	moveq	r3, #1
 800eb6c:	61a3      	streq	r3, [r4, #24]
 800eb6e:	4620      	mov	r0, r4
 800eb70:	f000 f820 	bl	800ebb4 <__sfp>
 800eb74:	6060      	str	r0, [r4, #4]
 800eb76:	4620      	mov	r0, r4
 800eb78:	f000 f81c 	bl	800ebb4 <__sfp>
 800eb7c:	60a0      	str	r0, [r4, #8]
 800eb7e:	4620      	mov	r0, r4
 800eb80:	f000 f818 	bl	800ebb4 <__sfp>
 800eb84:	2200      	movs	r2, #0
 800eb86:	60e0      	str	r0, [r4, #12]
 800eb88:	2104      	movs	r1, #4
 800eb8a:	6860      	ldr	r0, [r4, #4]
 800eb8c:	f7ff ff82 	bl	800ea94 <std>
 800eb90:	68a0      	ldr	r0, [r4, #8]
 800eb92:	2201      	movs	r2, #1
 800eb94:	2109      	movs	r1, #9
 800eb96:	f7ff ff7d 	bl	800ea94 <std>
 800eb9a:	68e0      	ldr	r0, [r4, #12]
 800eb9c:	2202      	movs	r2, #2
 800eb9e:	2112      	movs	r1, #18
 800eba0:	f7ff ff78 	bl	800ea94 <std>
 800eba4:	2301      	movs	r3, #1
 800eba6:	61a3      	str	r3, [r4, #24]
 800eba8:	e7d2      	b.n	800eb50 <__sinit+0xc>
 800ebaa:	bf00      	nop
 800ebac:	08010434 	.word	0x08010434
 800ebb0:	0800eadd 	.word	0x0800eadd

0800ebb4 <__sfp>:
 800ebb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebb6:	4607      	mov	r7, r0
 800ebb8:	f7ff ffac 	bl	800eb14 <__sfp_lock_acquire>
 800ebbc:	4b1e      	ldr	r3, [pc, #120]	; (800ec38 <__sfp+0x84>)
 800ebbe:	681e      	ldr	r6, [r3, #0]
 800ebc0:	69b3      	ldr	r3, [r6, #24]
 800ebc2:	b913      	cbnz	r3, 800ebca <__sfp+0x16>
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	f7ff ffbd 	bl	800eb44 <__sinit>
 800ebca:	3648      	adds	r6, #72	; 0x48
 800ebcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	d503      	bpl.n	800ebdc <__sfp+0x28>
 800ebd4:	6833      	ldr	r3, [r6, #0]
 800ebd6:	b30b      	cbz	r3, 800ec1c <__sfp+0x68>
 800ebd8:	6836      	ldr	r6, [r6, #0]
 800ebda:	e7f7      	b.n	800ebcc <__sfp+0x18>
 800ebdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ebe0:	b9d5      	cbnz	r5, 800ec18 <__sfp+0x64>
 800ebe2:	4b16      	ldr	r3, [pc, #88]	; (800ec3c <__sfp+0x88>)
 800ebe4:	60e3      	str	r3, [r4, #12]
 800ebe6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ebea:	6665      	str	r5, [r4, #100]	; 0x64
 800ebec:	f000 f84c 	bl	800ec88 <__retarget_lock_init_recursive>
 800ebf0:	f7ff ff96 	bl	800eb20 <__sfp_lock_release>
 800ebf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ebf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ebfc:	6025      	str	r5, [r4, #0]
 800ebfe:	61a5      	str	r5, [r4, #24]
 800ec00:	2208      	movs	r2, #8
 800ec02:	4629      	mov	r1, r5
 800ec04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec08:	f7fe fc0c 	bl	800d424 <memset>
 800ec0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec14:	4620      	mov	r0, r4
 800ec16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec18:	3468      	adds	r4, #104	; 0x68
 800ec1a:	e7d9      	b.n	800ebd0 <__sfp+0x1c>
 800ec1c:	2104      	movs	r1, #4
 800ec1e:	4638      	mov	r0, r7
 800ec20:	f7ff ff62 	bl	800eae8 <__sfmoreglue>
 800ec24:	4604      	mov	r4, r0
 800ec26:	6030      	str	r0, [r6, #0]
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d1d5      	bne.n	800ebd8 <__sfp+0x24>
 800ec2c:	f7ff ff78 	bl	800eb20 <__sfp_lock_release>
 800ec30:	230c      	movs	r3, #12
 800ec32:	603b      	str	r3, [r7, #0]
 800ec34:	e7ee      	b.n	800ec14 <__sfp+0x60>
 800ec36:	bf00      	nop
 800ec38:	08010434 	.word	0x08010434
 800ec3c:	ffff0001 	.word	0xffff0001

0800ec40 <_fwalk_reent>:
 800ec40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec44:	4606      	mov	r6, r0
 800ec46:	4688      	mov	r8, r1
 800ec48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec4c:	2700      	movs	r7, #0
 800ec4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec52:	f1b9 0901 	subs.w	r9, r9, #1
 800ec56:	d505      	bpl.n	800ec64 <_fwalk_reent+0x24>
 800ec58:	6824      	ldr	r4, [r4, #0]
 800ec5a:	2c00      	cmp	r4, #0
 800ec5c:	d1f7      	bne.n	800ec4e <_fwalk_reent+0xe>
 800ec5e:	4638      	mov	r0, r7
 800ec60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec64:	89ab      	ldrh	r3, [r5, #12]
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d907      	bls.n	800ec7a <_fwalk_reent+0x3a>
 800ec6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	d003      	beq.n	800ec7a <_fwalk_reent+0x3a>
 800ec72:	4629      	mov	r1, r5
 800ec74:	4630      	mov	r0, r6
 800ec76:	47c0      	blx	r8
 800ec78:	4307      	orrs	r7, r0
 800ec7a:	3568      	adds	r5, #104	; 0x68
 800ec7c:	e7e9      	b.n	800ec52 <_fwalk_reent+0x12>
	...

0800ec80 <_localeconv_r>:
 800ec80:	4800      	ldr	r0, [pc, #0]	; (800ec84 <_localeconv_r+0x4>)
 800ec82:	4770      	bx	lr
 800ec84:	20000268 	.word	0x20000268

0800ec88 <__retarget_lock_init_recursive>:
 800ec88:	4770      	bx	lr

0800ec8a <__retarget_lock_acquire_recursive>:
 800ec8a:	4770      	bx	lr

0800ec8c <__retarget_lock_release_recursive>:
 800ec8c:	4770      	bx	lr
	...

0800ec90 <malloc>:
 800ec90:	4b02      	ldr	r3, [pc, #8]	; (800ec9c <malloc+0xc>)
 800ec92:	4601      	mov	r1, r0
 800ec94:	6818      	ldr	r0, [r3, #0]
 800ec96:	f000 bc09 	b.w	800f4ac <_malloc_r>
 800ec9a:	bf00      	nop
 800ec9c:	20000114 	.word	0x20000114

0800eca0 <_Balloc>:
 800eca0:	b570      	push	{r4, r5, r6, lr}
 800eca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eca4:	4604      	mov	r4, r0
 800eca6:	460d      	mov	r5, r1
 800eca8:	b976      	cbnz	r6, 800ecc8 <_Balloc+0x28>
 800ecaa:	2010      	movs	r0, #16
 800ecac:	f7ff fff0 	bl	800ec90 <malloc>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	6260      	str	r0, [r4, #36]	; 0x24
 800ecb4:	b920      	cbnz	r0, 800ecc0 <_Balloc+0x20>
 800ecb6:	4b18      	ldr	r3, [pc, #96]	; (800ed18 <_Balloc+0x78>)
 800ecb8:	4818      	ldr	r0, [pc, #96]	; (800ed1c <_Balloc+0x7c>)
 800ecba:	2166      	movs	r1, #102	; 0x66
 800ecbc:	f001 f846 	bl	800fd4c <__assert_func>
 800ecc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ecc4:	6006      	str	r6, [r0, #0]
 800ecc6:	60c6      	str	r6, [r0, #12]
 800ecc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ecca:	68f3      	ldr	r3, [r6, #12]
 800eccc:	b183      	cbz	r3, 800ecf0 <_Balloc+0x50>
 800ecce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ecd6:	b9b8      	cbnz	r0, 800ed08 <_Balloc+0x68>
 800ecd8:	2101      	movs	r1, #1
 800ecda:	fa01 f605 	lsl.w	r6, r1, r5
 800ecde:	1d72      	adds	r2, r6, #5
 800ece0:	0092      	lsls	r2, r2, #2
 800ece2:	4620      	mov	r0, r4
 800ece4:	f000 fb60 	bl	800f3a8 <_calloc_r>
 800ece8:	b160      	cbz	r0, 800ed04 <_Balloc+0x64>
 800ecea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ecee:	e00e      	b.n	800ed0e <_Balloc+0x6e>
 800ecf0:	2221      	movs	r2, #33	; 0x21
 800ecf2:	2104      	movs	r1, #4
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	f000 fb57 	bl	800f3a8 <_calloc_r>
 800ecfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecfc:	60f0      	str	r0, [r6, #12]
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d1e4      	bne.n	800ecce <_Balloc+0x2e>
 800ed04:	2000      	movs	r0, #0
 800ed06:	bd70      	pop	{r4, r5, r6, pc}
 800ed08:	6802      	ldr	r2, [r0, #0]
 800ed0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ed0e:	2300      	movs	r3, #0
 800ed10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed14:	e7f7      	b.n	800ed06 <_Balloc+0x66>
 800ed16:	bf00      	nop
 800ed18:	08010479 	.word	0x08010479
 800ed1c:	0801055c 	.word	0x0801055c

0800ed20 <_Bfree>:
 800ed20:	b570      	push	{r4, r5, r6, lr}
 800ed22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ed24:	4605      	mov	r5, r0
 800ed26:	460c      	mov	r4, r1
 800ed28:	b976      	cbnz	r6, 800ed48 <_Bfree+0x28>
 800ed2a:	2010      	movs	r0, #16
 800ed2c:	f7ff ffb0 	bl	800ec90 <malloc>
 800ed30:	4602      	mov	r2, r0
 800ed32:	6268      	str	r0, [r5, #36]	; 0x24
 800ed34:	b920      	cbnz	r0, 800ed40 <_Bfree+0x20>
 800ed36:	4b09      	ldr	r3, [pc, #36]	; (800ed5c <_Bfree+0x3c>)
 800ed38:	4809      	ldr	r0, [pc, #36]	; (800ed60 <_Bfree+0x40>)
 800ed3a:	218a      	movs	r1, #138	; 0x8a
 800ed3c:	f001 f806 	bl	800fd4c <__assert_func>
 800ed40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed44:	6006      	str	r6, [r0, #0]
 800ed46:	60c6      	str	r6, [r0, #12]
 800ed48:	b13c      	cbz	r4, 800ed5a <_Bfree+0x3a>
 800ed4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ed4c:	6862      	ldr	r2, [r4, #4]
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed54:	6021      	str	r1, [r4, #0]
 800ed56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ed5a:	bd70      	pop	{r4, r5, r6, pc}
 800ed5c:	08010479 	.word	0x08010479
 800ed60:	0801055c 	.word	0x0801055c

0800ed64 <__multadd>:
 800ed64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed68:	690d      	ldr	r5, [r1, #16]
 800ed6a:	4607      	mov	r7, r0
 800ed6c:	460c      	mov	r4, r1
 800ed6e:	461e      	mov	r6, r3
 800ed70:	f101 0c14 	add.w	ip, r1, #20
 800ed74:	2000      	movs	r0, #0
 800ed76:	f8dc 3000 	ldr.w	r3, [ip]
 800ed7a:	b299      	uxth	r1, r3
 800ed7c:	fb02 6101 	mla	r1, r2, r1, r6
 800ed80:	0c1e      	lsrs	r6, r3, #16
 800ed82:	0c0b      	lsrs	r3, r1, #16
 800ed84:	fb02 3306 	mla	r3, r2, r6, r3
 800ed88:	b289      	uxth	r1, r1
 800ed8a:	3001      	adds	r0, #1
 800ed8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ed90:	4285      	cmp	r5, r0
 800ed92:	f84c 1b04 	str.w	r1, [ip], #4
 800ed96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ed9a:	dcec      	bgt.n	800ed76 <__multadd+0x12>
 800ed9c:	b30e      	cbz	r6, 800ede2 <__multadd+0x7e>
 800ed9e:	68a3      	ldr	r3, [r4, #8]
 800eda0:	42ab      	cmp	r3, r5
 800eda2:	dc19      	bgt.n	800edd8 <__multadd+0x74>
 800eda4:	6861      	ldr	r1, [r4, #4]
 800eda6:	4638      	mov	r0, r7
 800eda8:	3101      	adds	r1, #1
 800edaa:	f7ff ff79 	bl	800eca0 <_Balloc>
 800edae:	4680      	mov	r8, r0
 800edb0:	b928      	cbnz	r0, 800edbe <__multadd+0x5a>
 800edb2:	4602      	mov	r2, r0
 800edb4:	4b0c      	ldr	r3, [pc, #48]	; (800ede8 <__multadd+0x84>)
 800edb6:	480d      	ldr	r0, [pc, #52]	; (800edec <__multadd+0x88>)
 800edb8:	21b5      	movs	r1, #181	; 0xb5
 800edba:	f000 ffc7 	bl	800fd4c <__assert_func>
 800edbe:	6922      	ldr	r2, [r4, #16]
 800edc0:	3202      	adds	r2, #2
 800edc2:	f104 010c 	add.w	r1, r4, #12
 800edc6:	0092      	lsls	r2, r2, #2
 800edc8:	300c      	adds	r0, #12
 800edca:	f7fe fb1d 	bl	800d408 <memcpy>
 800edce:	4621      	mov	r1, r4
 800edd0:	4638      	mov	r0, r7
 800edd2:	f7ff ffa5 	bl	800ed20 <_Bfree>
 800edd6:	4644      	mov	r4, r8
 800edd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eddc:	3501      	adds	r5, #1
 800edde:	615e      	str	r6, [r3, #20]
 800ede0:	6125      	str	r5, [r4, #16]
 800ede2:	4620      	mov	r0, r4
 800ede4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede8:	080104eb 	.word	0x080104eb
 800edec:	0801055c 	.word	0x0801055c

0800edf0 <__hi0bits>:
 800edf0:	0c03      	lsrs	r3, r0, #16
 800edf2:	041b      	lsls	r3, r3, #16
 800edf4:	b9d3      	cbnz	r3, 800ee2c <__hi0bits+0x3c>
 800edf6:	0400      	lsls	r0, r0, #16
 800edf8:	2310      	movs	r3, #16
 800edfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800edfe:	bf04      	itt	eq
 800ee00:	0200      	lsleq	r0, r0, #8
 800ee02:	3308      	addeq	r3, #8
 800ee04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ee08:	bf04      	itt	eq
 800ee0a:	0100      	lsleq	r0, r0, #4
 800ee0c:	3304      	addeq	r3, #4
 800ee0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ee12:	bf04      	itt	eq
 800ee14:	0080      	lsleq	r0, r0, #2
 800ee16:	3302      	addeq	r3, #2
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	db05      	blt.n	800ee28 <__hi0bits+0x38>
 800ee1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ee20:	f103 0301 	add.w	r3, r3, #1
 800ee24:	bf08      	it	eq
 800ee26:	2320      	moveq	r3, #32
 800ee28:	4618      	mov	r0, r3
 800ee2a:	4770      	bx	lr
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	e7e4      	b.n	800edfa <__hi0bits+0xa>

0800ee30 <__lo0bits>:
 800ee30:	6803      	ldr	r3, [r0, #0]
 800ee32:	f013 0207 	ands.w	r2, r3, #7
 800ee36:	4601      	mov	r1, r0
 800ee38:	d00b      	beq.n	800ee52 <__lo0bits+0x22>
 800ee3a:	07da      	lsls	r2, r3, #31
 800ee3c:	d423      	bmi.n	800ee86 <__lo0bits+0x56>
 800ee3e:	0798      	lsls	r0, r3, #30
 800ee40:	bf49      	itett	mi
 800ee42:	085b      	lsrmi	r3, r3, #1
 800ee44:	089b      	lsrpl	r3, r3, #2
 800ee46:	2001      	movmi	r0, #1
 800ee48:	600b      	strmi	r3, [r1, #0]
 800ee4a:	bf5c      	itt	pl
 800ee4c:	600b      	strpl	r3, [r1, #0]
 800ee4e:	2002      	movpl	r0, #2
 800ee50:	4770      	bx	lr
 800ee52:	b298      	uxth	r0, r3
 800ee54:	b9a8      	cbnz	r0, 800ee82 <__lo0bits+0x52>
 800ee56:	0c1b      	lsrs	r3, r3, #16
 800ee58:	2010      	movs	r0, #16
 800ee5a:	b2da      	uxtb	r2, r3
 800ee5c:	b90a      	cbnz	r2, 800ee62 <__lo0bits+0x32>
 800ee5e:	3008      	adds	r0, #8
 800ee60:	0a1b      	lsrs	r3, r3, #8
 800ee62:	071a      	lsls	r2, r3, #28
 800ee64:	bf04      	itt	eq
 800ee66:	091b      	lsreq	r3, r3, #4
 800ee68:	3004      	addeq	r0, #4
 800ee6a:	079a      	lsls	r2, r3, #30
 800ee6c:	bf04      	itt	eq
 800ee6e:	089b      	lsreq	r3, r3, #2
 800ee70:	3002      	addeq	r0, #2
 800ee72:	07da      	lsls	r2, r3, #31
 800ee74:	d403      	bmi.n	800ee7e <__lo0bits+0x4e>
 800ee76:	085b      	lsrs	r3, r3, #1
 800ee78:	f100 0001 	add.w	r0, r0, #1
 800ee7c:	d005      	beq.n	800ee8a <__lo0bits+0x5a>
 800ee7e:	600b      	str	r3, [r1, #0]
 800ee80:	4770      	bx	lr
 800ee82:	4610      	mov	r0, r2
 800ee84:	e7e9      	b.n	800ee5a <__lo0bits+0x2a>
 800ee86:	2000      	movs	r0, #0
 800ee88:	4770      	bx	lr
 800ee8a:	2020      	movs	r0, #32
 800ee8c:	4770      	bx	lr
	...

0800ee90 <__i2b>:
 800ee90:	b510      	push	{r4, lr}
 800ee92:	460c      	mov	r4, r1
 800ee94:	2101      	movs	r1, #1
 800ee96:	f7ff ff03 	bl	800eca0 <_Balloc>
 800ee9a:	4602      	mov	r2, r0
 800ee9c:	b928      	cbnz	r0, 800eeaa <__i2b+0x1a>
 800ee9e:	4b05      	ldr	r3, [pc, #20]	; (800eeb4 <__i2b+0x24>)
 800eea0:	4805      	ldr	r0, [pc, #20]	; (800eeb8 <__i2b+0x28>)
 800eea2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800eea6:	f000 ff51 	bl	800fd4c <__assert_func>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	6144      	str	r4, [r0, #20]
 800eeae:	6103      	str	r3, [r0, #16]
 800eeb0:	bd10      	pop	{r4, pc}
 800eeb2:	bf00      	nop
 800eeb4:	080104eb 	.word	0x080104eb
 800eeb8:	0801055c 	.word	0x0801055c

0800eebc <__multiply>:
 800eebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec0:	4691      	mov	r9, r2
 800eec2:	690a      	ldr	r2, [r1, #16]
 800eec4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	bfb8      	it	lt
 800eecc:	460b      	movlt	r3, r1
 800eece:	460c      	mov	r4, r1
 800eed0:	bfbc      	itt	lt
 800eed2:	464c      	movlt	r4, r9
 800eed4:	4699      	movlt	r9, r3
 800eed6:	6927      	ldr	r7, [r4, #16]
 800eed8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eedc:	68a3      	ldr	r3, [r4, #8]
 800eede:	6861      	ldr	r1, [r4, #4]
 800eee0:	eb07 060a 	add.w	r6, r7, sl
 800eee4:	42b3      	cmp	r3, r6
 800eee6:	b085      	sub	sp, #20
 800eee8:	bfb8      	it	lt
 800eeea:	3101      	addlt	r1, #1
 800eeec:	f7ff fed8 	bl	800eca0 <_Balloc>
 800eef0:	b930      	cbnz	r0, 800ef00 <__multiply+0x44>
 800eef2:	4602      	mov	r2, r0
 800eef4:	4b44      	ldr	r3, [pc, #272]	; (800f008 <__multiply+0x14c>)
 800eef6:	4845      	ldr	r0, [pc, #276]	; (800f00c <__multiply+0x150>)
 800eef8:	f240 115d 	movw	r1, #349	; 0x15d
 800eefc:	f000 ff26 	bl	800fd4c <__assert_func>
 800ef00:	f100 0514 	add.w	r5, r0, #20
 800ef04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ef08:	462b      	mov	r3, r5
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	4543      	cmp	r3, r8
 800ef0e:	d321      	bcc.n	800ef54 <__multiply+0x98>
 800ef10:	f104 0314 	add.w	r3, r4, #20
 800ef14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ef18:	f109 0314 	add.w	r3, r9, #20
 800ef1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ef20:	9202      	str	r2, [sp, #8]
 800ef22:	1b3a      	subs	r2, r7, r4
 800ef24:	3a15      	subs	r2, #21
 800ef26:	f022 0203 	bic.w	r2, r2, #3
 800ef2a:	3204      	adds	r2, #4
 800ef2c:	f104 0115 	add.w	r1, r4, #21
 800ef30:	428f      	cmp	r7, r1
 800ef32:	bf38      	it	cc
 800ef34:	2204      	movcc	r2, #4
 800ef36:	9201      	str	r2, [sp, #4]
 800ef38:	9a02      	ldr	r2, [sp, #8]
 800ef3a:	9303      	str	r3, [sp, #12]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d80c      	bhi.n	800ef5a <__multiply+0x9e>
 800ef40:	2e00      	cmp	r6, #0
 800ef42:	dd03      	ble.n	800ef4c <__multiply+0x90>
 800ef44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d05a      	beq.n	800f002 <__multiply+0x146>
 800ef4c:	6106      	str	r6, [r0, #16]
 800ef4e:	b005      	add	sp, #20
 800ef50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef54:	f843 2b04 	str.w	r2, [r3], #4
 800ef58:	e7d8      	b.n	800ef0c <__multiply+0x50>
 800ef5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ef5e:	f1ba 0f00 	cmp.w	sl, #0
 800ef62:	d024      	beq.n	800efae <__multiply+0xf2>
 800ef64:	f104 0e14 	add.w	lr, r4, #20
 800ef68:	46a9      	mov	r9, r5
 800ef6a:	f04f 0c00 	mov.w	ip, #0
 800ef6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ef72:	f8d9 1000 	ldr.w	r1, [r9]
 800ef76:	fa1f fb82 	uxth.w	fp, r2
 800ef7a:	b289      	uxth	r1, r1
 800ef7c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ef80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ef84:	f8d9 2000 	ldr.w	r2, [r9]
 800ef88:	4461      	add	r1, ip
 800ef8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ef8e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ef92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ef96:	b289      	uxth	r1, r1
 800ef98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ef9c:	4577      	cmp	r7, lr
 800ef9e:	f849 1b04 	str.w	r1, [r9], #4
 800efa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800efa6:	d8e2      	bhi.n	800ef6e <__multiply+0xb2>
 800efa8:	9a01      	ldr	r2, [sp, #4]
 800efaa:	f845 c002 	str.w	ip, [r5, r2]
 800efae:	9a03      	ldr	r2, [sp, #12]
 800efb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800efb4:	3304      	adds	r3, #4
 800efb6:	f1b9 0f00 	cmp.w	r9, #0
 800efba:	d020      	beq.n	800effe <__multiply+0x142>
 800efbc:	6829      	ldr	r1, [r5, #0]
 800efbe:	f104 0c14 	add.w	ip, r4, #20
 800efc2:	46ae      	mov	lr, r5
 800efc4:	f04f 0a00 	mov.w	sl, #0
 800efc8:	f8bc b000 	ldrh.w	fp, [ip]
 800efcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800efd0:	fb09 220b 	mla	r2, r9, fp, r2
 800efd4:	4492      	add	sl, r2
 800efd6:	b289      	uxth	r1, r1
 800efd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800efdc:	f84e 1b04 	str.w	r1, [lr], #4
 800efe0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800efe4:	f8be 1000 	ldrh.w	r1, [lr]
 800efe8:	0c12      	lsrs	r2, r2, #16
 800efea:	fb09 1102 	mla	r1, r9, r2, r1
 800efee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800eff2:	4567      	cmp	r7, ip
 800eff4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eff8:	d8e6      	bhi.n	800efc8 <__multiply+0x10c>
 800effa:	9a01      	ldr	r2, [sp, #4]
 800effc:	50a9      	str	r1, [r5, r2]
 800effe:	3504      	adds	r5, #4
 800f000:	e79a      	b.n	800ef38 <__multiply+0x7c>
 800f002:	3e01      	subs	r6, #1
 800f004:	e79c      	b.n	800ef40 <__multiply+0x84>
 800f006:	bf00      	nop
 800f008:	080104eb 	.word	0x080104eb
 800f00c:	0801055c 	.word	0x0801055c

0800f010 <__pow5mult>:
 800f010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f014:	4615      	mov	r5, r2
 800f016:	f012 0203 	ands.w	r2, r2, #3
 800f01a:	4606      	mov	r6, r0
 800f01c:	460f      	mov	r7, r1
 800f01e:	d007      	beq.n	800f030 <__pow5mult+0x20>
 800f020:	4c25      	ldr	r4, [pc, #148]	; (800f0b8 <__pow5mult+0xa8>)
 800f022:	3a01      	subs	r2, #1
 800f024:	2300      	movs	r3, #0
 800f026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f02a:	f7ff fe9b 	bl	800ed64 <__multadd>
 800f02e:	4607      	mov	r7, r0
 800f030:	10ad      	asrs	r5, r5, #2
 800f032:	d03d      	beq.n	800f0b0 <__pow5mult+0xa0>
 800f034:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f036:	b97c      	cbnz	r4, 800f058 <__pow5mult+0x48>
 800f038:	2010      	movs	r0, #16
 800f03a:	f7ff fe29 	bl	800ec90 <malloc>
 800f03e:	4602      	mov	r2, r0
 800f040:	6270      	str	r0, [r6, #36]	; 0x24
 800f042:	b928      	cbnz	r0, 800f050 <__pow5mult+0x40>
 800f044:	4b1d      	ldr	r3, [pc, #116]	; (800f0bc <__pow5mult+0xac>)
 800f046:	481e      	ldr	r0, [pc, #120]	; (800f0c0 <__pow5mult+0xb0>)
 800f048:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f04c:	f000 fe7e 	bl	800fd4c <__assert_func>
 800f050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f054:	6004      	str	r4, [r0, #0]
 800f056:	60c4      	str	r4, [r0, #12]
 800f058:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f05c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f060:	b94c      	cbnz	r4, 800f076 <__pow5mult+0x66>
 800f062:	f240 2171 	movw	r1, #625	; 0x271
 800f066:	4630      	mov	r0, r6
 800f068:	f7ff ff12 	bl	800ee90 <__i2b>
 800f06c:	2300      	movs	r3, #0
 800f06e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f072:	4604      	mov	r4, r0
 800f074:	6003      	str	r3, [r0, #0]
 800f076:	f04f 0900 	mov.w	r9, #0
 800f07a:	07eb      	lsls	r3, r5, #31
 800f07c:	d50a      	bpl.n	800f094 <__pow5mult+0x84>
 800f07e:	4639      	mov	r1, r7
 800f080:	4622      	mov	r2, r4
 800f082:	4630      	mov	r0, r6
 800f084:	f7ff ff1a 	bl	800eebc <__multiply>
 800f088:	4639      	mov	r1, r7
 800f08a:	4680      	mov	r8, r0
 800f08c:	4630      	mov	r0, r6
 800f08e:	f7ff fe47 	bl	800ed20 <_Bfree>
 800f092:	4647      	mov	r7, r8
 800f094:	106d      	asrs	r5, r5, #1
 800f096:	d00b      	beq.n	800f0b0 <__pow5mult+0xa0>
 800f098:	6820      	ldr	r0, [r4, #0]
 800f09a:	b938      	cbnz	r0, 800f0ac <__pow5mult+0x9c>
 800f09c:	4622      	mov	r2, r4
 800f09e:	4621      	mov	r1, r4
 800f0a0:	4630      	mov	r0, r6
 800f0a2:	f7ff ff0b 	bl	800eebc <__multiply>
 800f0a6:	6020      	str	r0, [r4, #0]
 800f0a8:	f8c0 9000 	str.w	r9, [r0]
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	e7e4      	b.n	800f07a <__pow5mult+0x6a>
 800f0b0:	4638      	mov	r0, r7
 800f0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0b6:	bf00      	nop
 800f0b8:	080106a8 	.word	0x080106a8
 800f0bc:	08010479 	.word	0x08010479
 800f0c0:	0801055c 	.word	0x0801055c

0800f0c4 <__lshift>:
 800f0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0c8:	460c      	mov	r4, r1
 800f0ca:	6849      	ldr	r1, [r1, #4]
 800f0cc:	6923      	ldr	r3, [r4, #16]
 800f0ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f0d2:	68a3      	ldr	r3, [r4, #8]
 800f0d4:	4607      	mov	r7, r0
 800f0d6:	4691      	mov	r9, r2
 800f0d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0dc:	f108 0601 	add.w	r6, r8, #1
 800f0e0:	42b3      	cmp	r3, r6
 800f0e2:	db0b      	blt.n	800f0fc <__lshift+0x38>
 800f0e4:	4638      	mov	r0, r7
 800f0e6:	f7ff fddb 	bl	800eca0 <_Balloc>
 800f0ea:	4605      	mov	r5, r0
 800f0ec:	b948      	cbnz	r0, 800f102 <__lshift+0x3e>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	4b2a      	ldr	r3, [pc, #168]	; (800f19c <__lshift+0xd8>)
 800f0f2:	482b      	ldr	r0, [pc, #172]	; (800f1a0 <__lshift+0xdc>)
 800f0f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f0f8:	f000 fe28 	bl	800fd4c <__assert_func>
 800f0fc:	3101      	adds	r1, #1
 800f0fe:	005b      	lsls	r3, r3, #1
 800f100:	e7ee      	b.n	800f0e0 <__lshift+0x1c>
 800f102:	2300      	movs	r3, #0
 800f104:	f100 0114 	add.w	r1, r0, #20
 800f108:	f100 0210 	add.w	r2, r0, #16
 800f10c:	4618      	mov	r0, r3
 800f10e:	4553      	cmp	r3, sl
 800f110:	db37      	blt.n	800f182 <__lshift+0xbe>
 800f112:	6920      	ldr	r0, [r4, #16]
 800f114:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f118:	f104 0314 	add.w	r3, r4, #20
 800f11c:	f019 091f 	ands.w	r9, r9, #31
 800f120:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f124:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f128:	d02f      	beq.n	800f18a <__lshift+0xc6>
 800f12a:	f1c9 0e20 	rsb	lr, r9, #32
 800f12e:	468a      	mov	sl, r1
 800f130:	f04f 0c00 	mov.w	ip, #0
 800f134:	681a      	ldr	r2, [r3, #0]
 800f136:	fa02 f209 	lsl.w	r2, r2, r9
 800f13a:	ea42 020c 	orr.w	r2, r2, ip
 800f13e:	f84a 2b04 	str.w	r2, [sl], #4
 800f142:	f853 2b04 	ldr.w	r2, [r3], #4
 800f146:	4298      	cmp	r0, r3
 800f148:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f14c:	d8f2      	bhi.n	800f134 <__lshift+0x70>
 800f14e:	1b03      	subs	r3, r0, r4
 800f150:	3b15      	subs	r3, #21
 800f152:	f023 0303 	bic.w	r3, r3, #3
 800f156:	3304      	adds	r3, #4
 800f158:	f104 0215 	add.w	r2, r4, #21
 800f15c:	4290      	cmp	r0, r2
 800f15e:	bf38      	it	cc
 800f160:	2304      	movcc	r3, #4
 800f162:	f841 c003 	str.w	ip, [r1, r3]
 800f166:	f1bc 0f00 	cmp.w	ip, #0
 800f16a:	d001      	beq.n	800f170 <__lshift+0xac>
 800f16c:	f108 0602 	add.w	r6, r8, #2
 800f170:	3e01      	subs	r6, #1
 800f172:	4638      	mov	r0, r7
 800f174:	612e      	str	r6, [r5, #16]
 800f176:	4621      	mov	r1, r4
 800f178:	f7ff fdd2 	bl	800ed20 <_Bfree>
 800f17c:	4628      	mov	r0, r5
 800f17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f182:	f842 0f04 	str.w	r0, [r2, #4]!
 800f186:	3301      	adds	r3, #1
 800f188:	e7c1      	b.n	800f10e <__lshift+0x4a>
 800f18a:	3904      	subs	r1, #4
 800f18c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f190:	f841 2f04 	str.w	r2, [r1, #4]!
 800f194:	4298      	cmp	r0, r3
 800f196:	d8f9      	bhi.n	800f18c <__lshift+0xc8>
 800f198:	e7ea      	b.n	800f170 <__lshift+0xac>
 800f19a:	bf00      	nop
 800f19c:	080104eb 	.word	0x080104eb
 800f1a0:	0801055c 	.word	0x0801055c

0800f1a4 <__mcmp>:
 800f1a4:	b530      	push	{r4, r5, lr}
 800f1a6:	6902      	ldr	r2, [r0, #16]
 800f1a8:	690c      	ldr	r4, [r1, #16]
 800f1aa:	1b12      	subs	r2, r2, r4
 800f1ac:	d10e      	bne.n	800f1cc <__mcmp+0x28>
 800f1ae:	f100 0314 	add.w	r3, r0, #20
 800f1b2:	3114      	adds	r1, #20
 800f1b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f1b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f1bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f1c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f1c4:	42a5      	cmp	r5, r4
 800f1c6:	d003      	beq.n	800f1d0 <__mcmp+0x2c>
 800f1c8:	d305      	bcc.n	800f1d6 <__mcmp+0x32>
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	4610      	mov	r0, r2
 800f1ce:	bd30      	pop	{r4, r5, pc}
 800f1d0:	4283      	cmp	r3, r0
 800f1d2:	d3f3      	bcc.n	800f1bc <__mcmp+0x18>
 800f1d4:	e7fa      	b.n	800f1cc <__mcmp+0x28>
 800f1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1da:	e7f7      	b.n	800f1cc <__mcmp+0x28>

0800f1dc <__mdiff>:
 800f1dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e0:	460c      	mov	r4, r1
 800f1e2:	4606      	mov	r6, r0
 800f1e4:	4611      	mov	r1, r2
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	4690      	mov	r8, r2
 800f1ea:	f7ff ffdb 	bl	800f1a4 <__mcmp>
 800f1ee:	1e05      	subs	r5, r0, #0
 800f1f0:	d110      	bne.n	800f214 <__mdiff+0x38>
 800f1f2:	4629      	mov	r1, r5
 800f1f4:	4630      	mov	r0, r6
 800f1f6:	f7ff fd53 	bl	800eca0 <_Balloc>
 800f1fa:	b930      	cbnz	r0, 800f20a <__mdiff+0x2e>
 800f1fc:	4b3a      	ldr	r3, [pc, #232]	; (800f2e8 <__mdiff+0x10c>)
 800f1fe:	4602      	mov	r2, r0
 800f200:	f240 2132 	movw	r1, #562	; 0x232
 800f204:	4839      	ldr	r0, [pc, #228]	; (800f2ec <__mdiff+0x110>)
 800f206:	f000 fda1 	bl	800fd4c <__assert_func>
 800f20a:	2301      	movs	r3, #1
 800f20c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f210:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f214:	bfa4      	itt	ge
 800f216:	4643      	movge	r3, r8
 800f218:	46a0      	movge	r8, r4
 800f21a:	4630      	mov	r0, r6
 800f21c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f220:	bfa6      	itte	ge
 800f222:	461c      	movge	r4, r3
 800f224:	2500      	movge	r5, #0
 800f226:	2501      	movlt	r5, #1
 800f228:	f7ff fd3a 	bl	800eca0 <_Balloc>
 800f22c:	b920      	cbnz	r0, 800f238 <__mdiff+0x5c>
 800f22e:	4b2e      	ldr	r3, [pc, #184]	; (800f2e8 <__mdiff+0x10c>)
 800f230:	4602      	mov	r2, r0
 800f232:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f236:	e7e5      	b.n	800f204 <__mdiff+0x28>
 800f238:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f23c:	6926      	ldr	r6, [r4, #16]
 800f23e:	60c5      	str	r5, [r0, #12]
 800f240:	f104 0914 	add.w	r9, r4, #20
 800f244:	f108 0514 	add.w	r5, r8, #20
 800f248:	f100 0e14 	add.w	lr, r0, #20
 800f24c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f250:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f254:	f108 0210 	add.w	r2, r8, #16
 800f258:	46f2      	mov	sl, lr
 800f25a:	2100      	movs	r1, #0
 800f25c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f260:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f264:	fa1f f883 	uxth.w	r8, r3
 800f268:	fa11 f18b 	uxtah	r1, r1, fp
 800f26c:	0c1b      	lsrs	r3, r3, #16
 800f26e:	eba1 0808 	sub.w	r8, r1, r8
 800f272:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f276:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f27a:	fa1f f888 	uxth.w	r8, r8
 800f27e:	1419      	asrs	r1, r3, #16
 800f280:	454e      	cmp	r6, r9
 800f282:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f286:	f84a 3b04 	str.w	r3, [sl], #4
 800f28a:	d8e7      	bhi.n	800f25c <__mdiff+0x80>
 800f28c:	1b33      	subs	r3, r6, r4
 800f28e:	3b15      	subs	r3, #21
 800f290:	f023 0303 	bic.w	r3, r3, #3
 800f294:	3304      	adds	r3, #4
 800f296:	3415      	adds	r4, #21
 800f298:	42a6      	cmp	r6, r4
 800f29a:	bf38      	it	cc
 800f29c:	2304      	movcc	r3, #4
 800f29e:	441d      	add	r5, r3
 800f2a0:	4473      	add	r3, lr
 800f2a2:	469e      	mov	lr, r3
 800f2a4:	462e      	mov	r6, r5
 800f2a6:	4566      	cmp	r6, ip
 800f2a8:	d30e      	bcc.n	800f2c8 <__mdiff+0xec>
 800f2aa:	f10c 0203 	add.w	r2, ip, #3
 800f2ae:	1b52      	subs	r2, r2, r5
 800f2b0:	f022 0203 	bic.w	r2, r2, #3
 800f2b4:	3d03      	subs	r5, #3
 800f2b6:	45ac      	cmp	ip, r5
 800f2b8:	bf38      	it	cc
 800f2ba:	2200      	movcc	r2, #0
 800f2bc:	441a      	add	r2, r3
 800f2be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f2c2:	b17b      	cbz	r3, 800f2e4 <__mdiff+0x108>
 800f2c4:	6107      	str	r7, [r0, #16]
 800f2c6:	e7a3      	b.n	800f210 <__mdiff+0x34>
 800f2c8:	f856 8b04 	ldr.w	r8, [r6], #4
 800f2cc:	fa11 f288 	uxtah	r2, r1, r8
 800f2d0:	1414      	asrs	r4, r2, #16
 800f2d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f2d6:	b292      	uxth	r2, r2
 800f2d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f2dc:	f84e 2b04 	str.w	r2, [lr], #4
 800f2e0:	1421      	asrs	r1, r4, #16
 800f2e2:	e7e0      	b.n	800f2a6 <__mdiff+0xca>
 800f2e4:	3f01      	subs	r7, #1
 800f2e6:	e7ea      	b.n	800f2be <__mdiff+0xe2>
 800f2e8:	080104eb 	.word	0x080104eb
 800f2ec:	0801055c 	.word	0x0801055c

0800f2f0 <__d2b>:
 800f2f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f2f4:	4689      	mov	r9, r1
 800f2f6:	2101      	movs	r1, #1
 800f2f8:	ec57 6b10 	vmov	r6, r7, d0
 800f2fc:	4690      	mov	r8, r2
 800f2fe:	f7ff fccf 	bl	800eca0 <_Balloc>
 800f302:	4604      	mov	r4, r0
 800f304:	b930      	cbnz	r0, 800f314 <__d2b+0x24>
 800f306:	4602      	mov	r2, r0
 800f308:	4b25      	ldr	r3, [pc, #148]	; (800f3a0 <__d2b+0xb0>)
 800f30a:	4826      	ldr	r0, [pc, #152]	; (800f3a4 <__d2b+0xb4>)
 800f30c:	f240 310a 	movw	r1, #778	; 0x30a
 800f310:	f000 fd1c 	bl	800fd4c <__assert_func>
 800f314:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f318:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f31c:	bb35      	cbnz	r5, 800f36c <__d2b+0x7c>
 800f31e:	2e00      	cmp	r6, #0
 800f320:	9301      	str	r3, [sp, #4]
 800f322:	d028      	beq.n	800f376 <__d2b+0x86>
 800f324:	4668      	mov	r0, sp
 800f326:	9600      	str	r6, [sp, #0]
 800f328:	f7ff fd82 	bl	800ee30 <__lo0bits>
 800f32c:	9900      	ldr	r1, [sp, #0]
 800f32e:	b300      	cbz	r0, 800f372 <__d2b+0x82>
 800f330:	9a01      	ldr	r2, [sp, #4]
 800f332:	f1c0 0320 	rsb	r3, r0, #32
 800f336:	fa02 f303 	lsl.w	r3, r2, r3
 800f33a:	430b      	orrs	r3, r1
 800f33c:	40c2      	lsrs	r2, r0
 800f33e:	6163      	str	r3, [r4, #20]
 800f340:	9201      	str	r2, [sp, #4]
 800f342:	9b01      	ldr	r3, [sp, #4]
 800f344:	61a3      	str	r3, [r4, #24]
 800f346:	2b00      	cmp	r3, #0
 800f348:	bf14      	ite	ne
 800f34a:	2202      	movne	r2, #2
 800f34c:	2201      	moveq	r2, #1
 800f34e:	6122      	str	r2, [r4, #16]
 800f350:	b1d5      	cbz	r5, 800f388 <__d2b+0x98>
 800f352:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f356:	4405      	add	r5, r0
 800f358:	f8c9 5000 	str.w	r5, [r9]
 800f35c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f360:	f8c8 0000 	str.w	r0, [r8]
 800f364:	4620      	mov	r0, r4
 800f366:	b003      	add	sp, #12
 800f368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f36c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f370:	e7d5      	b.n	800f31e <__d2b+0x2e>
 800f372:	6161      	str	r1, [r4, #20]
 800f374:	e7e5      	b.n	800f342 <__d2b+0x52>
 800f376:	a801      	add	r0, sp, #4
 800f378:	f7ff fd5a 	bl	800ee30 <__lo0bits>
 800f37c:	9b01      	ldr	r3, [sp, #4]
 800f37e:	6163      	str	r3, [r4, #20]
 800f380:	2201      	movs	r2, #1
 800f382:	6122      	str	r2, [r4, #16]
 800f384:	3020      	adds	r0, #32
 800f386:	e7e3      	b.n	800f350 <__d2b+0x60>
 800f388:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f38c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f390:	f8c9 0000 	str.w	r0, [r9]
 800f394:	6918      	ldr	r0, [r3, #16]
 800f396:	f7ff fd2b 	bl	800edf0 <__hi0bits>
 800f39a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f39e:	e7df      	b.n	800f360 <__d2b+0x70>
 800f3a0:	080104eb 	.word	0x080104eb
 800f3a4:	0801055c 	.word	0x0801055c

0800f3a8 <_calloc_r>:
 800f3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3aa:	fba1 2402 	umull	r2, r4, r1, r2
 800f3ae:	b94c      	cbnz	r4, 800f3c4 <_calloc_r+0x1c>
 800f3b0:	4611      	mov	r1, r2
 800f3b2:	9201      	str	r2, [sp, #4]
 800f3b4:	f000 f87a 	bl	800f4ac <_malloc_r>
 800f3b8:	9a01      	ldr	r2, [sp, #4]
 800f3ba:	4605      	mov	r5, r0
 800f3bc:	b930      	cbnz	r0, 800f3cc <_calloc_r+0x24>
 800f3be:	4628      	mov	r0, r5
 800f3c0:	b003      	add	sp, #12
 800f3c2:	bd30      	pop	{r4, r5, pc}
 800f3c4:	220c      	movs	r2, #12
 800f3c6:	6002      	str	r2, [r0, #0]
 800f3c8:	2500      	movs	r5, #0
 800f3ca:	e7f8      	b.n	800f3be <_calloc_r+0x16>
 800f3cc:	4621      	mov	r1, r4
 800f3ce:	f7fe f829 	bl	800d424 <memset>
 800f3d2:	e7f4      	b.n	800f3be <_calloc_r+0x16>

0800f3d4 <_free_r>:
 800f3d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3d6:	2900      	cmp	r1, #0
 800f3d8:	d044      	beq.n	800f464 <_free_r+0x90>
 800f3da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3de:	9001      	str	r0, [sp, #4]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f1a1 0404 	sub.w	r4, r1, #4
 800f3e6:	bfb8      	it	lt
 800f3e8:	18e4      	addlt	r4, r4, r3
 800f3ea:	f000 fe55 	bl	8010098 <__malloc_lock>
 800f3ee:	4a1e      	ldr	r2, [pc, #120]	; (800f468 <_free_r+0x94>)
 800f3f0:	9801      	ldr	r0, [sp, #4]
 800f3f2:	6813      	ldr	r3, [r2, #0]
 800f3f4:	b933      	cbnz	r3, 800f404 <_free_r+0x30>
 800f3f6:	6063      	str	r3, [r4, #4]
 800f3f8:	6014      	str	r4, [r2, #0]
 800f3fa:	b003      	add	sp, #12
 800f3fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f400:	f000 be50 	b.w	80100a4 <__malloc_unlock>
 800f404:	42a3      	cmp	r3, r4
 800f406:	d908      	bls.n	800f41a <_free_r+0x46>
 800f408:	6825      	ldr	r5, [r4, #0]
 800f40a:	1961      	adds	r1, r4, r5
 800f40c:	428b      	cmp	r3, r1
 800f40e:	bf01      	itttt	eq
 800f410:	6819      	ldreq	r1, [r3, #0]
 800f412:	685b      	ldreq	r3, [r3, #4]
 800f414:	1949      	addeq	r1, r1, r5
 800f416:	6021      	streq	r1, [r4, #0]
 800f418:	e7ed      	b.n	800f3f6 <_free_r+0x22>
 800f41a:	461a      	mov	r2, r3
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	b10b      	cbz	r3, 800f424 <_free_r+0x50>
 800f420:	42a3      	cmp	r3, r4
 800f422:	d9fa      	bls.n	800f41a <_free_r+0x46>
 800f424:	6811      	ldr	r1, [r2, #0]
 800f426:	1855      	adds	r5, r2, r1
 800f428:	42a5      	cmp	r5, r4
 800f42a:	d10b      	bne.n	800f444 <_free_r+0x70>
 800f42c:	6824      	ldr	r4, [r4, #0]
 800f42e:	4421      	add	r1, r4
 800f430:	1854      	adds	r4, r2, r1
 800f432:	42a3      	cmp	r3, r4
 800f434:	6011      	str	r1, [r2, #0]
 800f436:	d1e0      	bne.n	800f3fa <_free_r+0x26>
 800f438:	681c      	ldr	r4, [r3, #0]
 800f43a:	685b      	ldr	r3, [r3, #4]
 800f43c:	6053      	str	r3, [r2, #4]
 800f43e:	4421      	add	r1, r4
 800f440:	6011      	str	r1, [r2, #0]
 800f442:	e7da      	b.n	800f3fa <_free_r+0x26>
 800f444:	d902      	bls.n	800f44c <_free_r+0x78>
 800f446:	230c      	movs	r3, #12
 800f448:	6003      	str	r3, [r0, #0]
 800f44a:	e7d6      	b.n	800f3fa <_free_r+0x26>
 800f44c:	6825      	ldr	r5, [r4, #0]
 800f44e:	1961      	adds	r1, r4, r5
 800f450:	428b      	cmp	r3, r1
 800f452:	bf04      	itt	eq
 800f454:	6819      	ldreq	r1, [r3, #0]
 800f456:	685b      	ldreq	r3, [r3, #4]
 800f458:	6063      	str	r3, [r4, #4]
 800f45a:	bf04      	itt	eq
 800f45c:	1949      	addeq	r1, r1, r5
 800f45e:	6021      	streq	r1, [r4, #0]
 800f460:	6054      	str	r4, [r2, #4]
 800f462:	e7ca      	b.n	800f3fa <_free_r+0x26>
 800f464:	b003      	add	sp, #12
 800f466:	bd30      	pop	{r4, r5, pc}
 800f468:	20002d04 	.word	0x20002d04

0800f46c <sbrk_aligned>:
 800f46c:	b570      	push	{r4, r5, r6, lr}
 800f46e:	4e0e      	ldr	r6, [pc, #56]	; (800f4a8 <sbrk_aligned+0x3c>)
 800f470:	460c      	mov	r4, r1
 800f472:	6831      	ldr	r1, [r6, #0]
 800f474:	4605      	mov	r5, r0
 800f476:	b911      	cbnz	r1, 800f47e <sbrk_aligned+0x12>
 800f478:	f000 fb42 	bl	800fb00 <_sbrk_r>
 800f47c:	6030      	str	r0, [r6, #0]
 800f47e:	4621      	mov	r1, r4
 800f480:	4628      	mov	r0, r5
 800f482:	f000 fb3d 	bl	800fb00 <_sbrk_r>
 800f486:	1c43      	adds	r3, r0, #1
 800f488:	d00a      	beq.n	800f4a0 <sbrk_aligned+0x34>
 800f48a:	1cc4      	adds	r4, r0, #3
 800f48c:	f024 0403 	bic.w	r4, r4, #3
 800f490:	42a0      	cmp	r0, r4
 800f492:	d007      	beq.n	800f4a4 <sbrk_aligned+0x38>
 800f494:	1a21      	subs	r1, r4, r0
 800f496:	4628      	mov	r0, r5
 800f498:	f000 fb32 	bl	800fb00 <_sbrk_r>
 800f49c:	3001      	adds	r0, #1
 800f49e:	d101      	bne.n	800f4a4 <sbrk_aligned+0x38>
 800f4a0:	f04f 34ff 	mov.w	r4, #4294967295
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	bd70      	pop	{r4, r5, r6, pc}
 800f4a8:	20002d08 	.word	0x20002d08

0800f4ac <_malloc_r>:
 800f4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4b0:	1ccd      	adds	r5, r1, #3
 800f4b2:	f025 0503 	bic.w	r5, r5, #3
 800f4b6:	3508      	adds	r5, #8
 800f4b8:	2d0c      	cmp	r5, #12
 800f4ba:	bf38      	it	cc
 800f4bc:	250c      	movcc	r5, #12
 800f4be:	2d00      	cmp	r5, #0
 800f4c0:	4607      	mov	r7, r0
 800f4c2:	db01      	blt.n	800f4c8 <_malloc_r+0x1c>
 800f4c4:	42a9      	cmp	r1, r5
 800f4c6:	d905      	bls.n	800f4d4 <_malloc_r+0x28>
 800f4c8:	230c      	movs	r3, #12
 800f4ca:	603b      	str	r3, [r7, #0]
 800f4cc:	2600      	movs	r6, #0
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4d4:	4e2e      	ldr	r6, [pc, #184]	; (800f590 <_malloc_r+0xe4>)
 800f4d6:	f000 fddf 	bl	8010098 <__malloc_lock>
 800f4da:	6833      	ldr	r3, [r6, #0]
 800f4dc:	461c      	mov	r4, r3
 800f4de:	bb34      	cbnz	r4, 800f52e <_malloc_r+0x82>
 800f4e0:	4629      	mov	r1, r5
 800f4e2:	4638      	mov	r0, r7
 800f4e4:	f7ff ffc2 	bl	800f46c <sbrk_aligned>
 800f4e8:	1c43      	adds	r3, r0, #1
 800f4ea:	4604      	mov	r4, r0
 800f4ec:	d14d      	bne.n	800f58a <_malloc_r+0xde>
 800f4ee:	6834      	ldr	r4, [r6, #0]
 800f4f0:	4626      	mov	r6, r4
 800f4f2:	2e00      	cmp	r6, #0
 800f4f4:	d140      	bne.n	800f578 <_malloc_r+0xcc>
 800f4f6:	6823      	ldr	r3, [r4, #0]
 800f4f8:	4631      	mov	r1, r6
 800f4fa:	4638      	mov	r0, r7
 800f4fc:	eb04 0803 	add.w	r8, r4, r3
 800f500:	f000 fafe 	bl	800fb00 <_sbrk_r>
 800f504:	4580      	cmp	r8, r0
 800f506:	d13a      	bne.n	800f57e <_malloc_r+0xd2>
 800f508:	6821      	ldr	r1, [r4, #0]
 800f50a:	3503      	adds	r5, #3
 800f50c:	1a6d      	subs	r5, r5, r1
 800f50e:	f025 0503 	bic.w	r5, r5, #3
 800f512:	3508      	adds	r5, #8
 800f514:	2d0c      	cmp	r5, #12
 800f516:	bf38      	it	cc
 800f518:	250c      	movcc	r5, #12
 800f51a:	4629      	mov	r1, r5
 800f51c:	4638      	mov	r0, r7
 800f51e:	f7ff ffa5 	bl	800f46c <sbrk_aligned>
 800f522:	3001      	adds	r0, #1
 800f524:	d02b      	beq.n	800f57e <_malloc_r+0xd2>
 800f526:	6823      	ldr	r3, [r4, #0]
 800f528:	442b      	add	r3, r5
 800f52a:	6023      	str	r3, [r4, #0]
 800f52c:	e00e      	b.n	800f54c <_malloc_r+0xa0>
 800f52e:	6822      	ldr	r2, [r4, #0]
 800f530:	1b52      	subs	r2, r2, r5
 800f532:	d41e      	bmi.n	800f572 <_malloc_r+0xc6>
 800f534:	2a0b      	cmp	r2, #11
 800f536:	d916      	bls.n	800f566 <_malloc_r+0xba>
 800f538:	1961      	adds	r1, r4, r5
 800f53a:	42a3      	cmp	r3, r4
 800f53c:	6025      	str	r5, [r4, #0]
 800f53e:	bf18      	it	ne
 800f540:	6059      	strne	r1, [r3, #4]
 800f542:	6863      	ldr	r3, [r4, #4]
 800f544:	bf08      	it	eq
 800f546:	6031      	streq	r1, [r6, #0]
 800f548:	5162      	str	r2, [r4, r5]
 800f54a:	604b      	str	r3, [r1, #4]
 800f54c:	4638      	mov	r0, r7
 800f54e:	f104 060b 	add.w	r6, r4, #11
 800f552:	f000 fda7 	bl	80100a4 <__malloc_unlock>
 800f556:	f026 0607 	bic.w	r6, r6, #7
 800f55a:	1d23      	adds	r3, r4, #4
 800f55c:	1af2      	subs	r2, r6, r3
 800f55e:	d0b6      	beq.n	800f4ce <_malloc_r+0x22>
 800f560:	1b9b      	subs	r3, r3, r6
 800f562:	50a3      	str	r3, [r4, r2]
 800f564:	e7b3      	b.n	800f4ce <_malloc_r+0x22>
 800f566:	6862      	ldr	r2, [r4, #4]
 800f568:	42a3      	cmp	r3, r4
 800f56a:	bf0c      	ite	eq
 800f56c:	6032      	streq	r2, [r6, #0]
 800f56e:	605a      	strne	r2, [r3, #4]
 800f570:	e7ec      	b.n	800f54c <_malloc_r+0xa0>
 800f572:	4623      	mov	r3, r4
 800f574:	6864      	ldr	r4, [r4, #4]
 800f576:	e7b2      	b.n	800f4de <_malloc_r+0x32>
 800f578:	4634      	mov	r4, r6
 800f57a:	6876      	ldr	r6, [r6, #4]
 800f57c:	e7b9      	b.n	800f4f2 <_malloc_r+0x46>
 800f57e:	230c      	movs	r3, #12
 800f580:	603b      	str	r3, [r7, #0]
 800f582:	4638      	mov	r0, r7
 800f584:	f000 fd8e 	bl	80100a4 <__malloc_unlock>
 800f588:	e7a1      	b.n	800f4ce <_malloc_r+0x22>
 800f58a:	6025      	str	r5, [r4, #0]
 800f58c:	e7de      	b.n	800f54c <_malloc_r+0xa0>
 800f58e:	bf00      	nop
 800f590:	20002d04 	.word	0x20002d04

0800f594 <__ssputs_r>:
 800f594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f598:	688e      	ldr	r6, [r1, #8]
 800f59a:	429e      	cmp	r6, r3
 800f59c:	4682      	mov	sl, r0
 800f59e:	460c      	mov	r4, r1
 800f5a0:	4690      	mov	r8, r2
 800f5a2:	461f      	mov	r7, r3
 800f5a4:	d838      	bhi.n	800f618 <__ssputs_r+0x84>
 800f5a6:	898a      	ldrh	r2, [r1, #12]
 800f5a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f5ac:	d032      	beq.n	800f614 <__ssputs_r+0x80>
 800f5ae:	6825      	ldr	r5, [r4, #0]
 800f5b0:	6909      	ldr	r1, [r1, #16]
 800f5b2:	eba5 0901 	sub.w	r9, r5, r1
 800f5b6:	6965      	ldr	r5, [r4, #20]
 800f5b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	444b      	add	r3, r9
 800f5c4:	106d      	asrs	r5, r5, #1
 800f5c6:	429d      	cmp	r5, r3
 800f5c8:	bf38      	it	cc
 800f5ca:	461d      	movcc	r5, r3
 800f5cc:	0553      	lsls	r3, r2, #21
 800f5ce:	d531      	bpl.n	800f634 <__ssputs_r+0xa0>
 800f5d0:	4629      	mov	r1, r5
 800f5d2:	f7ff ff6b 	bl	800f4ac <_malloc_r>
 800f5d6:	4606      	mov	r6, r0
 800f5d8:	b950      	cbnz	r0, 800f5f0 <__ssputs_r+0x5c>
 800f5da:	230c      	movs	r3, #12
 800f5dc:	f8ca 3000 	str.w	r3, [sl]
 800f5e0:	89a3      	ldrh	r3, [r4, #12]
 800f5e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5e6:	81a3      	strh	r3, [r4, #12]
 800f5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5f0:	6921      	ldr	r1, [r4, #16]
 800f5f2:	464a      	mov	r2, r9
 800f5f4:	f7fd ff08 	bl	800d408 <memcpy>
 800f5f8:	89a3      	ldrh	r3, [r4, #12]
 800f5fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f602:	81a3      	strh	r3, [r4, #12]
 800f604:	6126      	str	r6, [r4, #16]
 800f606:	6165      	str	r5, [r4, #20]
 800f608:	444e      	add	r6, r9
 800f60a:	eba5 0509 	sub.w	r5, r5, r9
 800f60e:	6026      	str	r6, [r4, #0]
 800f610:	60a5      	str	r5, [r4, #8]
 800f612:	463e      	mov	r6, r7
 800f614:	42be      	cmp	r6, r7
 800f616:	d900      	bls.n	800f61a <__ssputs_r+0x86>
 800f618:	463e      	mov	r6, r7
 800f61a:	6820      	ldr	r0, [r4, #0]
 800f61c:	4632      	mov	r2, r6
 800f61e:	4641      	mov	r1, r8
 800f620:	f000 fd20 	bl	8010064 <memmove>
 800f624:	68a3      	ldr	r3, [r4, #8]
 800f626:	1b9b      	subs	r3, r3, r6
 800f628:	60a3      	str	r3, [r4, #8]
 800f62a:	6823      	ldr	r3, [r4, #0]
 800f62c:	4433      	add	r3, r6
 800f62e:	6023      	str	r3, [r4, #0]
 800f630:	2000      	movs	r0, #0
 800f632:	e7db      	b.n	800f5ec <__ssputs_r+0x58>
 800f634:	462a      	mov	r2, r5
 800f636:	f000 fd3b 	bl	80100b0 <_realloc_r>
 800f63a:	4606      	mov	r6, r0
 800f63c:	2800      	cmp	r0, #0
 800f63e:	d1e1      	bne.n	800f604 <__ssputs_r+0x70>
 800f640:	6921      	ldr	r1, [r4, #16]
 800f642:	4650      	mov	r0, sl
 800f644:	f7ff fec6 	bl	800f3d4 <_free_r>
 800f648:	e7c7      	b.n	800f5da <__ssputs_r+0x46>
	...

0800f64c <_svfiprintf_r>:
 800f64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f650:	4698      	mov	r8, r3
 800f652:	898b      	ldrh	r3, [r1, #12]
 800f654:	061b      	lsls	r3, r3, #24
 800f656:	b09d      	sub	sp, #116	; 0x74
 800f658:	4607      	mov	r7, r0
 800f65a:	460d      	mov	r5, r1
 800f65c:	4614      	mov	r4, r2
 800f65e:	d50e      	bpl.n	800f67e <_svfiprintf_r+0x32>
 800f660:	690b      	ldr	r3, [r1, #16]
 800f662:	b963      	cbnz	r3, 800f67e <_svfiprintf_r+0x32>
 800f664:	2140      	movs	r1, #64	; 0x40
 800f666:	f7ff ff21 	bl	800f4ac <_malloc_r>
 800f66a:	6028      	str	r0, [r5, #0]
 800f66c:	6128      	str	r0, [r5, #16]
 800f66e:	b920      	cbnz	r0, 800f67a <_svfiprintf_r+0x2e>
 800f670:	230c      	movs	r3, #12
 800f672:	603b      	str	r3, [r7, #0]
 800f674:	f04f 30ff 	mov.w	r0, #4294967295
 800f678:	e0d1      	b.n	800f81e <_svfiprintf_r+0x1d2>
 800f67a:	2340      	movs	r3, #64	; 0x40
 800f67c:	616b      	str	r3, [r5, #20]
 800f67e:	2300      	movs	r3, #0
 800f680:	9309      	str	r3, [sp, #36]	; 0x24
 800f682:	2320      	movs	r3, #32
 800f684:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f688:	f8cd 800c 	str.w	r8, [sp, #12]
 800f68c:	2330      	movs	r3, #48	; 0x30
 800f68e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f838 <_svfiprintf_r+0x1ec>
 800f692:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f696:	f04f 0901 	mov.w	r9, #1
 800f69a:	4623      	mov	r3, r4
 800f69c:	469a      	mov	sl, r3
 800f69e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6a2:	b10a      	cbz	r2, 800f6a8 <_svfiprintf_r+0x5c>
 800f6a4:	2a25      	cmp	r2, #37	; 0x25
 800f6a6:	d1f9      	bne.n	800f69c <_svfiprintf_r+0x50>
 800f6a8:	ebba 0b04 	subs.w	fp, sl, r4
 800f6ac:	d00b      	beq.n	800f6c6 <_svfiprintf_r+0x7a>
 800f6ae:	465b      	mov	r3, fp
 800f6b0:	4622      	mov	r2, r4
 800f6b2:	4629      	mov	r1, r5
 800f6b4:	4638      	mov	r0, r7
 800f6b6:	f7ff ff6d 	bl	800f594 <__ssputs_r>
 800f6ba:	3001      	adds	r0, #1
 800f6bc:	f000 80aa 	beq.w	800f814 <_svfiprintf_r+0x1c8>
 800f6c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6c2:	445a      	add	r2, fp
 800f6c4:	9209      	str	r2, [sp, #36]	; 0x24
 800f6c6:	f89a 3000 	ldrb.w	r3, [sl]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	f000 80a2 	beq.w	800f814 <_svfiprintf_r+0x1c8>
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6da:	f10a 0a01 	add.w	sl, sl, #1
 800f6de:	9304      	str	r3, [sp, #16]
 800f6e0:	9307      	str	r3, [sp, #28]
 800f6e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6e6:	931a      	str	r3, [sp, #104]	; 0x68
 800f6e8:	4654      	mov	r4, sl
 800f6ea:	2205      	movs	r2, #5
 800f6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6f0:	4851      	ldr	r0, [pc, #324]	; (800f838 <_svfiprintf_r+0x1ec>)
 800f6f2:	f7f0 fd75 	bl	80001e0 <memchr>
 800f6f6:	9a04      	ldr	r2, [sp, #16]
 800f6f8:	b9d8      	cbnz	r0, 800f732 <_svfiprintf_r+0xe6>
 800f6fa:	06d0      	lsls	r0, r2, #27
 800f6fc:	bf44      	itt	mi
 800f6fe:	2320      	movmi	r3, #32
 800f700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f704:	0711      	lsls	r1, r2, #28
 800f706:	bf44      	itt	mi
 800f708:	232b      	movmi	r3, #43	; 0x2b
 800f70a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f70e:	f89a 3000 	ldrb.w	r3, [sl]
 800f712:	2b2a      	cmp	r3, #42	; 0x2a
 800f714:	d015      	beq.n	800f742 <_svfiprintf_r+0xf6>
 800f716:	9a07      	ldr	r2, [sp, #28]
 800f718:	4654      	mov	r4, sl
 800f71a:	2000      	movs	r0, #0
 800f71c:	f04f 0c0a 	mov.w	ip, #10
 800f720:	4621      	mov	r1, r4
 800f722:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f726:	3b30      	subs	r3, #48	; 0x30
 800f728:	2b09      	cmp	r3, #9
 800f72a:	d94e      	bls.n	800f7ca <_svfiprintf_r+0x17e>
 800f72c:	b1b0      	cbz	r0, 800f75c <_svfiprintf_r+0x110>
 800f72e:	9207      	str	r2, [sp, #28]
 800f730:	e014      	b.n	800f75c <_svfiprintf_r+0x110>
 800f732:	eba0 0308 	sub.w	r3, r0, r8
 800f736:	fa09 f303 	lsl.w	r3, r9, r3
 800f73a:	4313      	orrs	r3, r2
 800f73c:	9304      	str	r3, [sp, #16]
 800f73e:	46a2      	mov	sl, r4
 800f740:	e7d2      	b.n	800f6e8 <_svfiprintf_r+0x9c>
 800f742:	9b03      	ldr	r3, [sp, #12]
 800f744:	1d19      	adds	r1, r3, #4
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	9103      	str	r1, [sp, #12]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	bfbb      	ittet	lt
 800f74e:	425b      	neglt	r3, r3
 800f750:	f042 0202 	orrlt.w	r2, r2, #2
 800f754:	9307      	strge	r3, [sp, #28]
 800f756:	9307      	strlt	r3, [sp, #28]
 800f758:	bfb8      	it	lt
 800f75a:	9204      	strlt	r2, [sp, #16]
 800f75c:	7823      	ldrb	r3, [r4, #0]
 800f75e:	2b2e      	cmp	r3, #46	; 0x2e
 800f760:	d10c      	bne.n	800f77c <_svfiprintf_r+0x130>
 800f762:	7863      	ldrb	r3, [r4, #1]
 800f764:	2b2a      	cmp	r3, #42	; 0x2a
 800f766:	d135      	bne.n	800f7d4 <_svfiprintf_r+0x188>
 800f768:	9b03      	ldr	r3, [sp, #12]
 800f76a:	1d1a      	adds	r2, r3, #4
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	9203      	str	r2, [sp, #12]
 800f770:	2b00      	cmp	r3, #0
 800f772:	bfb8      	it	lt
 800f774:	f04f 33ff 	movlt.w	r3, #4294967295
 800f778:	3402      	adds	r4, #2
 800f77a:	9305      	str	r3, [sp, #20]
 800f77c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f848 <_svfiprintf_r+0x1fc>
 800f780:	7821      	ldrb	r1, [r4, #0]
 800f782:	2203      	movs	r2, #3
 800f784:	4650      	mov	r0, sl
 800f786:	f7f0 fd2b 	bl	80001e0 <memchr>
 800f78a:	b140      	cbz	r0, 800f79e <_svfiprintf_r+0x152>
 800f78c:	2340      	movs	r3, #64	; 0x40
 800f78e:	eba0 000a 	sub.w	r0, r0, sl
 800f792:	fa03 f000 	lsl.w	r0, r3, r0
 800f796:	9b04      	ldr	r3, [sp, #16]
 800f798:	4303      	orrs	r3, r0
 800f79a:	3401      	adds	r4, #1
 800f79c:	9304      	str	r3, [sp, #16]
 800f79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7a2:	4826      	ldr	r0, [pc, #152]	; (800f83c <_svfiprintf_r+0x1f0>)
 800f7a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7a8:	2206      	movs	r2, #6
 800f7aa:	f7f0 fd19 	bl	80001e0 <memchr>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	d038      	beq.n	800f824 <_svfiprintf_r+0x1d8>
 800f7b2:	4b23      	ldr	r3, [pc, #140]	; (800f840 <_svfiprintf_r+0x1f4>)
 800f7b4:	bb1b      	cbnz	r3, 800f7fe <_svfiprintf_r+0x1b2>
 800f7b6:	9b03      	ldr	r3, [sp, #12]
 800f7b8:	3307      	adds	r3, #7
 800f7ba:	f023 0307 	bic.w	r3, r3, #7
 800f7be:	3308      	adds	r3, #8
 800f7c0:	9303      	str	r3, [sp, #12]
 800f7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7c4:	4433      	add	r3, r6
 800f7c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f7c8:	e767      	b.n	800f69a <_svfiprintf_r+0x4e>
 800f7ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7ce:	460c      	mov	r4, r1
 800f7d0:	2001      	movs	r0, #1
 800f7d2:	e7a5      	b.n	800f720 <_svfiprintf_r+0xd4>
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	3401      	adds	r4, #1
 800f7d8:	9305      	str	r3, [sp, #20]
 800f7da:	4619      	mov	r1, r3
 800f7dc:	f04f 0c0a 	mov.w	ip, #10
 800f7e0:	4620      	mov	r0, r4
 800f7e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7e6:	3a30      	subs	r2, #48	; 0x30
 800f7e8:	2a09      	cmp	r2, #9
 800f7ea:	d903      	bls.n	800f7f4 <_svfiprintf_r+0x1a8>
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d0c5      	beq.n	800f77c <_svfiprintf_r+0x130>
 800f7f0:	9105      	str	r1, [sp, #20]
 800f7f2:	e7c3      	b.n	800f77c <_svfiprintf_r+0x130>
 800f7f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7f8:	4604      	mov	r4, r0
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	e7f0      	b.n	800f7e0 <_svfiprintf_r+0x194>
 800f7fe:	ab03      	add	r3, sp, #12
 800f800:	9300      	str	r3, [sp, #0]
 800f802:	462a      	mov	r2, r5
 800f804:	4b0f      	ldr	r3, [pc, #60]	; (800f844 <_svfiprintf_r+0x1f8>)
 800f806:	a904      	add	r1, sp, #16
 800f808:	4638      	mov	r0, r7
 800f80a:	f7fd feb3 	bl	800d574 <_printf_float>
 800f80e:	1c42      	adds	r2, r0, #1
 800f810:	4606      	mov	r6, r0
 800f812:	d1d6      	bne.n	800f7c2 <_svfiprintf_r+0x176>
 800f814:	89ab      	ldrh	r3, [r5, #12]
 800f816:	065b      	lsls	r3, r3, #25
 800f818:	f53f af2c 	bmi.w	800f674 <_svfiprintf_r+0x28>
 800f81c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f81e:	b01d      	add	sp, #116	; 0x74
 800f820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f824:	ab03      	add	r3, sp, #12
 800f826:	9300      	str	r3, [sp, #0]
 800f828:	462a      	mov	r2, r5
 800f82a:	4b06      	ldr	r3, [pc, #24]	; (800f844 <_svfiprintf_r+0x1f8>)
 800f82c:	a904      	add	r1, sp, #16
 800f82e:	4638      	mov	r0, r7
 800f830:	f7fe f944 	bl	800dabc <_printf_i>
 800f834:	e7eb      	b.n	800f80e <_svfiprintf_r+0x1c2>
 800f836:	bf00      	nop
 800f838:	080106b4 	.word	0x080106b4
 800f83c:	080106be 	.word	0x080106be
 800f840:	0800d575 	.word	0x0800d575
 800f844:	0800f595 	.word	0x0800f595
 800f848:	080106ba 	.word	0x080106ba

0800f84c <__sfputc_r>:
 800f84c:	6893      	ldr	r3, [r2, #8]
 800f84e:	3b01      	subs	r3, #1
 800f850:	2b00      	cmp	r3, #0
 800f852:	b410      	push	{r4}
 800f854:	6093      	str	r3, [r2, #8]
 800f856:	da08      	bge.n	800f86a <__sfputc_r+0x1e>
 800f858:	6994      	ldr	r4, [r2, #24]
 800f85a:	42a3      	cmp	r3, r4
 800f85c:	db01      	blt.n	800f862 <__sfputc_r+0x16>
 800f85e:	290a      	cmp	r1, #10
 800f860:	d103      	bne.n	800f86a <__sfputc_r+0x1e>
 800f862:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f866:	f000 b99f 	b.w	800fba8 <__swbuf_r>
 800f86a:	6813      	ldr	r3, [r2, #0]
 800f86c:	1c58      	adds	r0, r3, #1
 800f86e:	6010      	str	r0, [r2, #0]
 800f870:	7019      	strb	r1, [r3, #0]
 800f872:	4608      	mov	r0, r1
 800f874:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f878:	4770      	bx	lr

0800f87a <__sfputs_r>:
 800f87a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f87c:	4606      	mov	r6, r0
 800f87e:	460f      	mov	r7, r1
 800f880:	4614      	mov	r4, r2
 800f882:	18d5      	adds	r5, r2, r3
 800f884:	42ac      	cmp	r4, r5
 800f886:	d101      	bne.n	800f88c <__sfputs_r+0x12>
 800f888:	2000      	movs	r0, #0
 800f88a:	e007      	b.n	800f89c <__sfputs_r+0x22>
 800f88c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f890:	463a      	mov	r2, r7
 800f892:	4630      	mov	r0, r6
 800f894:	f7ff ffda 	bl	800f84c <__sfputc_r>
 800f898:	1c43      	adds	r3, r0, #1
 800f89a:	d1f3      	bne.n	800f884 <__sfputs_r+0xa>
 800f89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f8a0 <_vfiprintf_r>:
 800f8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a4:	460d      	mov	r5, r1
 800f8a6:	b09d      	sub	sp, #116	; 0x74
 800f8a8:	4614      	mov	r4, r2
 800f8aa:	4698      	mov	r8, r3
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	b118      	cbz	r0, 800f8b8 <_vfiprintf_r+0x18>
 800f8b0:	6983      	ldr	r3, [r0, #24]
 800f8b2:	b90b      	cbnz	r3, 800f8b8 <_vfiprintf_r+0x18>
 800f8b4:	f7ff f946 	bl	800eb44 <__sinit>
 800f8b8:	4b89      	ldr	r3, [pc, #548]	; (800fae0 <_vfiprintf_r+0x240>)
 800f8ba:	429d      	cmp	r5, r3
 800f8bc:	d11b      	bne.n	800f8f6 <_vfiprintf_r+0x56>
 800f8be:	6875      	ldr	r5, [r6, #4]
 800f8c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8c2:	07d9      	lsls	r1, r3, #31
 800f8c4:	d405      	bmi.n	800f8d2 <_vfiprintf_r+0x32>
 800f8c6:	89ab      	ldrh	r3, [r5, #12]
 800f8c8:	059a      	lsls	r2, r3, #22
 800f8ca:	d402      	bmi.n	800f8d2 <_vfiprintf_r+0x32>
 800f8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8ce:	f7ff f9dc 	bl	800ec8a <__retarget_lock_acquire_recursive>
 800f8d2:	89ab      	ldrh	r3, [r5, #12]
 800f8d4:	071b      	lsls	r3, r3, #28
 800f8d6:	d501      	bpl.n	800f8dc <_vfiprintf_r+0x3c>
 800f8d8:	692b      	ldr	r3, [r5, #16]
 800f8da:	b9eb      	cbnz	r3, 800f918 <_vfiprintf_r+0x78>
 800f8dc:	4629      	mov	r1, r5
 800f8de:	4630      	mov	r0, r6
 800f8e0:	f000 f9c6 	bl	800fc70 <__swsetup_r>
 800f8e4:	b1c0      	cbz	r0, 800f918 <_vfiprintf_r+0x78>
 800f8e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8e8:	07dc      	lsls	r4, r3, #31
 800f8ea:	d50e      	bpl.n	800f90a <_vfiprintf_r+0x6a>
 800f8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f0:	b01d      	add	sp, #116	; 0x74
 800f8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8f6:	4b7b      	ldr	r3, [pc, #492]	; (800fae4 <_vfiprintf_r+0x244>)
 800f8f8:	429d      	cmp	r5, r3
 800f8fa:	d101      	bne.n	800f900 <_vfiprintf_r+0x60>
 800f8fc:	68b5      	ldr	r5, [r6, #8]
 800f8fe:	e7df      	b.n	800f8c0 <_vfiprintf_r+0x20>
 800f900:	4b79      	ldr	r3, [pc, #484]	; (800fae8 <_vfiprintf_r+0x248>)
 800f902:	429d      	cmp	r5, r3
 800f904:	bf08      	it	eq
 800f906:	68f5      	ldreq	r5, [r6, #12]
 800f908:	e7da      	b.n	800f8c0 <_vfiprintf_r+0x20>
 800f90a:	89ab      	ldrh	r3, [r5, #12]
 800f90c:	0598      	lsls	r0, r3, #22
 800f90e:	d4ed      	bmi.n	800f8ec <_vfiprintf_r+0x4c>
 800f910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f912:	f7ff f9bb 	bl	800ec8c <__retarget_lock_release_recursive>
 800f916:	e7e9      	b.n	800f8ec <_vfiprintf_r+0x4c>
 800f918:	2300      	movs	r3, #0
 800f91a:	9309      	str	r3, [sp, #36]	; 0x24
 800f91c:	2320      	movs	r3, #32
 800f91e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f922:	f8cd 800c 	str.w	r8, [sp, #12]
 800f926:	2330      	movs	r3, #48	; 0x30
 800f928:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800faec <_vfiprintf_r+0x24c>
 800f92c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f930:	f04f 0901 	mov.w	r9, #1
 800f934:	4623      	mov	r3, r4
 800f936:	469a      	mov	sl, r3
 800f938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f93c:	b10a      	cbz	r2, 800f942 <_vfiprintf_r+0xa2>
 800f93e:	2a25      	cmp	r2, #37	; 0x25
 800f940:	d1f9      	bne.n	800f936 <_vfiprintf_r+0x96>
 800f942:	ebba 0b04 	subs.w	fp, sl, r4
 800f946:	d00b      	beq.n	800f960 <_vfiprintf_r+0xc0>
 800f948:	465b      	mov	r3, fp
 800f94a:	4622      	mov	r2, r4
 800f94c:	4629      	mov	r1, r5
 800f94e:	4630      	mov	r0, r6
 800f950:	f7ff ff93 	bl	800f87a <__sfputs_r>
 800f954:	3001      	adds	r0, #1
 800f956:	f000 80aa 	beq.w	800faae <_vfiprintf_r+0x20e>
 800f95a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f95c:	445a      	add	r2, fp
 800f95e:	9209      	str	r2, [sp, #36]	; 0x24
 800f960:	f89a 3000 	ldrb.w	r3, [sl]
 800f964:	2b00      	cmp	r3, #0
 800f966:	f000 80a2 	beq.w	800faae <_vfiprintf_r+0x20e>
 800f96a:	2300      	movs	r3, #0
 800f96c:	f04f 32ff 	mov.w	r2, #4294967295
 800f970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f974:	f10a 0a01 	add.w	sl, sl, #1
 800f978:	9304      	str	r3, [sp, #16]
 800f97a:	9307      	str	r3, [sp, #28]
 800f97c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f980:	931a      	str	r3, [sp, #104]	; 0x68
 800f982:	4654      	mov	r4, sl
 800f984:	2205      	movs	r2, #5
 800f986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f98a:	4858      	ldr	r0, [pc, #352]	; (800faec <_vfiprintf_r+0x24c>)
 800f98c:	f7f0 fc28 	bl	80001e0 <memchr>
 800f990:	9a04      	ldr	r2, [sp, #16]
 800f992:	b9d8      	cbnz	r0, 800f9cc <_vfiprintf_r+0x12c>
 800f994:	06d1      	lsls	r1, r2, #27
 800f996:	bf44      	itt	mi
 800f998:	2320      	movmi	r3, #32
 800f99a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f99e:	0713      	lsls	r3, r2, #28
 800f9a0:	bf44      	itt	mi
 800f9a2:	232b      	movmi	r3, #43	; 0x2b
 800f9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f9ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f9ae:	d015      	beq.n	800f9dc <_vfiprintf_r+0x13c>
 800f9b0:	9a07      	ldr	r2, [sp, #28]
 800f9b2:	4654      	mov	r4, sl
 800f9b4:	2000      	movs	r0, #0
 800f9b6:	f04f 0c0a 	mov.w	ip, #10
 800f9ba:	4621      	mov	r1, r4
 800f9bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9c0:	3b30      	subs	r3, #48	; 0x30
 800f9c2:	2b09      	cmp	r3, #9
 800f9c4:	d94e      	bls.n	800fa64 <_vfiprintf_r+0x1c4>
 800f9c6:	b1b0      	cbz	r0, 800f9f6 <_vfiprintf_r+0x156>
 800f9c8:	9207      	str	r2, [sp, #28]
 800f9ca:	e014      	b.n	800f9f6 <_vfiprintf_r+0x156>
 800f9cc:	eba0 0308 	sub.w	r3, r0, r8
 800f9d0:	fa09 f303 	lsl.w	r3, r9, r3
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	9304      	str	r3, [sp, #16]
 800f9d8:	46a2      	mov	sl, r4
 800f9da:	e7d2      	b.n	800f982 <_vfiprintf_r+0xe2>
 800f9dc:	9b03      	ldr	r3, [sp, #12]
 800f9de:	1d19      	adds	r1, r3, #4
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	9103      	str	r1, [sp, #12]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	bfbb      	ittet	lt
 800f9e8:	425b      	neglt	r3, r3
 800f9ea:	f042 0202 	orrlt.w	r2, r2, #2
 800f9ee:	9307      	strge	r3, [sp, #28]
 800f9f0:	9307      	strlt	r3, [sp, #28]
 800f9f2:	bfb8      	it	lt
 800f9f4:	9204      	strlt	r2, [sp, #16]
 800f9f6:	7823      	ldrb	r3, [r4, #0]
 800f9f8:	2b2e      	cmp	r3, #46	; 0x2e
 800f9fa:	d10c      	bne.n	800fa16 <_vfiprintf_r+0x176>
 800f9fc:	7863      	ldrb	r3, [r4, #1]
 800f9fe:	2b2a      	cmp	r3, #42	; 0x2a
 800fa00:	d135      	bne.n	800fa6e <_vfiprintf_r+0x1ce>
 800fa02:	9b03      	ldr	r3, [sp, #12]
 800fa04:	1d1a      	adds	r2, r3, #4
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	9203      	str	r2, [sp, #12]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	bfb8      	it	lt
 800fa0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa12:	3402      	adds	r4, #2
 800fa14:	9305      	str	r3, [sp, #20]
 800fa16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fafc <_vfiprintf_r+0x25c>
 800fa1a:	7821      	ldrb	r1, [r4, #0]
 800fa1c:	2203      	movs	r2, #3
 800fa1e:	4650      	mov	r0, sl
 800fa20:	f7f0 fbde 	bl	80001e0 <memchr>
 800fa24:	b140      	cbz	r0, 800fa38 <_vfiprintf_r+0x198>
 800fa26:	2340      	movs	r3, #64	; 0x40
 800fa28:	eba0 000a 	sub.w	r0, r0, sl
 800fa2c:	fa03 f000 	lsl.w	r0, r3, r0
 800fa30:	9b04      	ldr	r3, [sp, #16]
 800fa32:	4303      	orrs	r3, r0
 800fa34:	3401      	adds	r4, #1
 800fa36:	9304      	str	r3, [sp, #16]
 800fa38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa3c:	482c      	ldr	r0, [pc, #176]	; (800faf0 <_vfiprintf_r+0x250>)
 800fa3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa42:	2206      	movs	r2, #6
 800fa44:	f7f0 fbcc 	bl	80001e0 <memchr>
 800fa48:	2800      	cmp	r0, #0
 800fa4a:	d03f      	beq.n	800facc <_vfiprintf_r+0x22c>
 800fa4c:	4b29      	ldr	r3, [pc, #164]	; (800faf4 <_vfiprintf_r+0x254>)
 800fa4e:	bb1b      	cbnz	r3, 800fa98 <_vfiprintf_r+0x1f8>
 800fa50:	9b03      	ldr	r3, [sp, #12]
 800fa52:	3307      	adds	r3, #7
 800fa54:	f023 0307 	bic.w	r3, r3, #7
 800fa58:	3308      	adds	r3, #8
 800fa5a:	9303      	str	r3, [sp, #12]
 800fa5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa5e:	443b      	add	r3, r7
 800fa60:	9309      	str	r3, [sp, #36]	; 0x24
 800fa62:	e767      	b.n	800f934 <_vfiprintf_r+0x94>
 800fa64:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa68:	460c      	mov	r4, r1
 800fa6a:	2001      	movs	r0, #1
 800fa6c:	e7a5      	b.n	800f9ba <_vfiprintf_r+0x11a>
 800fa6e:	2300      	movs	r3, #0
 800fa70:	3401      	adds	r4, #1
 800fa72:	9305      	str	r3, [sp, #20]
 800fa74:	4619      	mov	r1, r3
 800fa76:	f04f 0c0a 	mov.w	ip, #10
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa80:	3a30      	subs	r2, #48	; 0x30
 800fa82:	2a09      	cmp	r2, #9
 800fa84:	d903      	bls.n	800fa8e <_vfiprintf_r+0x1ee>
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d0c5      	beq.n	800fa16 <_vfiprintf_r+0x176>
 800fa8a:	9105      	str	r1, [sp, #20]
 800fa8c:	e7c3      	b.n	800fa16 <_vfiprintf_r+0x176>
 800fa8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa92:	4604      	mov	r4, r0
 800fa94:	2301      	movs	r3, #1
 800fa96:	e7f0      	b.n	800fa7a <_vfiprintf_r+0x1da>
 800fa98:	ab03      	add	r3, sp, #12
 800fa9a:	9300      	str	r3, [sp, #0]
 800fa9c:	462a      	mov	r2, r5
 800fa9e:	4b16      	ldr	r3, [pc, #88]	; (800faf8 <_vfiprintf_r+0x258>)
 800faa0:	a904      	add	r1, sp, #16
 800faa2:	4630      	mov	r0, r6
 800faa4:	f7fd fd66 	bl	800d574 <_printf_float>
 800faa8:	4607      	mov	r7, r0
 800faaa:	1c78      	adds	r0, r7, #1
 800faac:	d1d6      	bne.n	800fa5c <_vfiprintf_r+0x1bc>
 800faae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fab0:	07d9      	lsls	r1, r3, #31
 800fab2:	d405      	bmi.n	800fac0 <_vfiprintf_r+0x220>
 800fab4:	89ab      	ldrh	r3, [r5, #12]
 800fab6:	059a      	lsls	r2, r3, #22
 800fab8:	d402      	bmi.n	800fac0 <_vfiprintf_r+0x220>
 800faba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fabc:	f7ff f8e6 	bl	800ec8c <__retarget_lock_release_recursive>
 800fac0:	89ab      	ldrh	r3, [r5, #12]
 800fac2:	065b      	lsls	r3, r3, #25
 800fac4:	f53f af12 	bmi.w	800f8ec <_vfiprintf_r+0x4c>
 800fac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800faca:	e711      	b.n	800f8f0 <_vfiprintf_r+0x50>
 800facc:	ab03      	add	r3, sp, #12
 800face:	9300      	str	r3, [sp, #0]
 800fad0:	462a      	mov	r2, r5
 800fad2:	4b09      	ldr	r3, [pc, #36]	; (800faf8 <_vfiprintf_r+0x258>)
 800fad4:	a904      	add	r1, sp, #16
 800fad6:	4630      	mov	r0, r6
 800fad8:	f7fd fff0 	bl	800dabc <_printf_i>
 800fadc:	e7e4      	b.n	800faa8 <_vfiprintf_r+0x208>
 800fade:	bf00      	nop
 800fae0:	0801051c 	.word	0x0801051c
 800fae4:	0801053c 	.word	0x0801053c
 800fae8:	080104fc 	.word	0x080104fc
 800faec:	080106b4 	.word	0x080106b4
 800faf0:	080106be 	.word	0x080106be
 800faf4:	0800d575 	.word	0x0800d575
 800faf8:	0800f87b 	.word	0x0800f87b
 800fafc:	080106ba 	.word	0x080106ba

0800fb00 <_sbrk_r>:
 800fb00:	b538      	push	{r3, r4, r5, lr}
 800fb02:	4d06      	ldr	r5, [pc, #24]	; (800fb1c <_sbrk_r+0x1c>)
 800fb04:	2300      	movs	r3, #0
 800fb06:	4604      	mov	r4, r0
 800fb08:	4608      	mov	r0, r1
 800fb0a:	602b      	str	r3, [r5, #0]
 800fb0c:	f7f3 fab4 	bl	8003078 <_sbrk>
 800fb10:	1c43      	adds	r3, r0, #1
 800fb12:	d102      	bne.n	800fb1a <_sbrk_r+0x1a>
 800fb14:	682b      	ldr	r3, [r5, #0]
 800fb16:	b103      	cbz	r3, 800fb1a <_sbrk_r+0x1a>
 800fb18:	6023      	str	r3, [r4, #0]
 800fb1a:	bd38      	pop	{r3, r4, r5, pc}
 800fb1c:	20002d0c 	.word	0x20002d0c

0800fb20 <__sread>:
 800fb20:	b510      	push	{r4, lr}
 800fb22:	460c      	mov	r4, r1
 800fb24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb28:	f000 faf2 	bl	8010110 <_read_r>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	bfab      	itete	ge
 800fb30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fb32:	89a3      	ldrhlt	r3, [r4, #12]
 800fb34:	181b      	addge	r3, r3, r0
 800fb36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fb3a:	bfac      	ite	ge
 800fb3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fb3e:	81a3      	strhlt	r3, [r4, #12]
 800fb40:	bd10      	pop	{r4, pc}

0800fb42 <__swrite>:
 800fb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb46:	461f      	mov	r7, r3
 800fb48:	898b      	ldrh	r3, [r1, #12]
 800fb4a:	05db      	lsls	r3, r3, #23
 800fb4c:	4605      	mov	r5, r0
 800fb4e:	460c      	mov	r4, r1
 800fb50:	4616      	mov	r6, r2
 800fb52:	d505      	bpl.n	800fb60 <__swrite+0x1e>
 800fb54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb58:	2302      	movs	r3, #2
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	f000 f9f8 	bl	800ff50 <_lseek_r>
 800fb60:	89a3      	ldrh	r3, [r4, #12]
 800fb62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb6a:	81a3      	strh	r3, [r4, #12]
 800fb6c:	4632      	mov	r2, r6
 800fb6e:	463b      	mov	r3, r7
 800fb70:	4628      	mov	r0, r5
 800fb72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb76:	f000 b869 	b.w	800fc4c <_write_r>

0800fb7a <__sseek>:
 800fb7a:	b510      	push	{r4, lr}
 800fb7c:	460c      	mov	r4, r1
 800fb7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb82:	f000 f9e5 	bl	800ff50 <_lseek_r>
 800fb86:	1c43      	adds	r3, r0, #1
 800fb88:	89a3      	ldrh	r3, [r4, #12]
 800fb8a:	bf15      	itete	ne
 800fb8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb96:	81a3      	strheq	r3, [r4, #12]
 800fb98:	bf18      	it	ne
 800fb9a:	81a3      	strhne	r3, [r4, #12]
 800fb9c:	bd10      	pop	{r4, pc}

0800fb9e <__sclose>:
 800fb9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fba2:	f000 b8f1 	b.w	800fd88 <_close_r>
	...

0800fba8 <__swbuf_r>:
 800fba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbaa:	460e      	mov	r6, r1
 800fbac:	4614      	mov	r4, r2
 800fbae:	4605      	mov	r5, r0
 800fbb0:	b118      	cbz	r0, 800fbba <__swbuf_r+0x12>
 800fbb2:	6983      	ldr	r3, [r0, #24]
 800fbb4:	b90b      	cbnz	r3, 800fbba <__swbuf_r+0x12>
 800fbb6:	f7fe ffc5 	bl	800eb44 <__sinit>
 800fbba:	4b21      	ldr	r3, [pc, #132]	; (800fc40 <__swbuf_r+0x98>)
 800fbbc:	429c      	cmp	r4, r3
 800fbbe:	d12b      	bne.n	800fc18 <__swbuf_r+0x70>
 800fbc0:	686c      	ldr	r4, [r5, #4]
 800fbc2:	69a3      	ldr	r3, [r4, #24]
 800fbc4:	60a3      	str	r3, [r4, #8]
 800fbc6:	89a3      	ldrh	r3, [r4, #12]
 800fbc8:	071a      	lsls	r2, r3, #28
 800fbca:	d52f      	bpl.n	800fc2c <__swbuf_r+0x84>
 800fbcc:	6923      	ldr	r3, [r4, #16]
 800fbce:	b36b      	cbz	r3, 800fc2c <__swbuf_r+0x84>
 800fbd0:	6923      	ldr	r3, [r4, #16]
 800fbd2:	6820      	ldr	r0, [r4, #0]
 800fbd4:	1ac0      	subs	r0, r0, r3
 800fbd6:	6963      	ldr	r3, [r4, #20]
 800fbd8:	b2f6      	uxtb	r6, r6
 800fbda:	4283      	cmp	r3, r0
 800fbdc:	4637      	mov	r7, r6
 800fbde:	dc04      	bgt.n	800fbea <__swbuf_r+0x42>
 800fbe0:	4621      	mov	r1, r4
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	f000 f966 	bl	800feb4 <_fflush_r>
 800fbe8:	bb30      	cbnz	r0, 800fc38 <__swbuf_r+0x90>
 800fbea:	68a3      	ldr	r3, [r4, #8]
 800fbec:	3b01      	subs	r3, #1
 800fbee:	60a3      	str	r3, [r4, #8]
 800fbf0:	6823      	ldr	r3, [r4, #0]
 800fbf2:	1c5a      	adds	r2, r3, #1
 800fbf4:	6022      	str	r2, [r4, #0]
 800fbf6:	701e      	strb	r6, [r3, #0]
 800fbf8:	6963      	ldr	r3, [r4, #20]
 800fbfa:	3001      	adds	r0, #1
 800fbfc:	4283      	cmp	r3, r0
 800fbfe:	d004      	beq.n	800fc0a <__swbuf_r+0x62>
 800fc00:	89a3      	ldrh	r3, [r4, #12]
 800fc02:	07db      	lsls	r3, r3, #31
 800fc04:	d506      	bpl.n	800fc14 <__swbuf_r+0x6c>
 800fc06:	2e0a      	cmp	r6, #10
 800fc08:	d104      	bne.n	800fc14 <__swbuf_r+0x6c>
 800fc0a:	4621      	mov	r1, r4
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	f000 f951 	bl	800feb4 <_fflush_r>
 800fc12:	b988      	cbnz	r0, 800fc38 <__swbuf_r+0x90>
 800fc14:	4638      	mov	r0, r7
 800fc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc18:	4b0a      	ldr	r3, [pc, #40]	; (800fc44 <__swbuf_r+0x9c>)
 800fc1a:	429c      	cmp	r4, r3
 800fc1c:	d101      	bne.n	800fc22 <__swbuf_r+0x7a>
 800fc1e:	68ac      	ldr	r4, [r5, #8]
 800fc20:	e7cf      	b.n	800fbc2 <__swbuf_r+0x1a>
 800fc22:	4b09      	ldr	r3, [pc, #36]	; (800fc48 <__swbuf_r+0xa0>)
 800fc24:	429c      	cmp	r4, r3
 800fc26:	bf08      	it	eq
 800fc28:	68ec      	ldreq	r4, [r5, #12]
 800fc2a:	e7ca      	b.n	800fbc2 <__swbuf_r+0x1a>
 800fc2c:	4621      	mov	r1, r4
 800fc2e:	4628      	mov	r0, r5
 800fc30:	f000 f81e 	bl	800fc70 <__swsetup_r>
 800fc34:	2800      	cmp	r0, #0
 800fc36:	d0cb      	beq.n	800fbd0 <__swbuf_r+0x28>
 800fc38:	f04f 37ff 	mov.w	r7, #4294967295
 800fc3c:	e7ea      	b.n	800fc14 <__swbuf_r+0x6c>
 800fc3e:	bf00      	nop
 800fc40:	0801051c 	.word	0x0801051c
 800fc44:	0801053c 	.word	0x0801053c
 800fc48:	080104fc 	.word	0x080104fc

0800fc4c <_write_r>:
 800fc4c:	b538      	push	{r3, r4, r5, lr}
 800fc4e:	4d07      	ldr	r5, [pc, #28]	; (800fc6c <_write_r+0x20>)
 800fc50:	4604      	mov	r4, r0
 800fc52:	4608      	mov	r0, r1
 800fc54:	4611      	mov	r1, r2
 800fc56:	2200      	movs	r2, #0
 800fc58:	602a      	str	r2, [r5, #0]
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	f7f3 f9bb 	bl	8002fd6 <_write>
 800fc60:	1c43      	adds	r3, r0, #1
 800fc62:	d102      	bne.n	800fc6a <_write_r+0x1e>
 800fc64:	682b      	ldr	r3, [r5, #0]
 800fc66:	b103      	cbz	r3, 800fc6a <_write_r+0x1e>
 800fc68:	6023      	str	r3, [r4, #0]
 800fc6a:	bd38      	pop	{r3, r4, r5, pc}
 800fc6c:	20002d0c 	.word	0x20002d0c

0800fc70 <__swsetup_r>:
 800fc70:	4b32      	ldr	r3, [pc, #200]	; (800fd3c <__swsetup_r+0xcc>)
 800fc72:	b570      	push	{r4, r5, r6, lr}
 800fc74:	681d      	ldr	r5, [r3, #0]
 800fc76:	4606      	mov	r6, r0
 800fc78:	460c      	mov	r4, r1
 800fc7a:	b125      	cbz	r5, 800fc86 <__swsetup_r+0x16>
 800fc7c:	69ab      	ldr	r3, [r5, #24]
 800fc7e:	b913      	cbnz	r3, 800fc86 <__swsetup_r+0x16>
 800fc80:	4628      	mov	r0, r5
 800fc82:	f7fe ff5f 	bl	800eb44 <__sinit>
 800fc86:	4b2e      	ldr	r3, [pc, #184]	; (800fd40 <__swsetup_r+0xd0>)
 800fc88:	429c      	cmp	r4, r3
 800fc8a:	d10f      	bne.n	800fcac <__swsetup_r+0x3c>
 800fc8c:	686c      	ldr	r4, [r5, #4]
 800fc8e:	89a3      	ldrh	r3, [r4, #12]
 800fc90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc94:	0719      	lsls	r1, r3, #28
 800fc96:	d42c      	bmi.n	800fcf2 <__swsetup_r+0x82>
 800fc98:	06dd      	lsls	r5, r3, #27
 800fc9a:	d411      	bmi.n	800fcc0 <__swsetup_r+0x50>
 800fc9c:	2309      	movs	r3, #9
 800fc9e:	6033      	str	r3, [r6, #0]
 800fca0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fca4:	81a3      	strh	r3, [r4, #12]
 800fca6:	f04f 30ff 	mov.w	r0, #4294967295
 800fcaa:	e03e      	b.n	800fd2a <__swsetup_r+0xba>
 800fcac:	4b25      	ldr	r3, [pc, #148]	; (800fd44 <__swsetup_r+0xd4>)
 800fcae:	429c      	cmp	r4, r3
 800fcb0:	d101      	bne.n	800fcb6 <__swsetup_r+0x46>
 800fcb2:	68ac      	ldr	r4, [r5, #8]
 800fcb4:	e7eb      	b.n	800fc8e <__swsetup_r+0x1e>
 800fcb6:	4b24      	ldr	r3, [pc, #144]	; (800fd48 <__swsetup_r+0xd8>)
 800fcb8:	429c      	cmp	r4, r3
 800fcba:	bf08      	it	eq
 800fcbc:	68ec      	ldreq	r4, [r5, #12]
 800fcbe:	e7e6      	b.n	800fc8e <__swsetup_r+0x1e>
 800fcc0:	0758      	lsls	r0, r3, #29
 800fcc2:	d512      	bpl.n	800fcea <__swsetup_r+0x7a>
 800fcc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcc6:	b141      	cbz	r1, 800fcda <__swsetup_r+0x6a>
 800fcc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fccc:	4299      	cmp	r1, r3
 800fcce:	d002      	beq.n	800fcd6 <__swsetup_r+0x66>
 800fcd0:	4630      	mov	r0, r6
 800fcd2:	f7ff fb7f 	bl	800f3d4 <_free_r>
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	6363      	str	r3, [r4, #52]	; 0x34
 800fcda:	89a3      	ldrh	r3, [r4, #12]
 800fcdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fce0:	81a3      	strh	r3, [r4, #12]
 800fce2:	2300      	movs	r3, #0
 800fce4:	6063      	str	r3, [r4, #4]
 800fce6:	6923      	ldr	r3, [r4, #16]
 800fce8:	6023      	str	r3, [r4, #0]
 800fcea:	89a3      	ldrh	r3, [r4, #12]
 800fcec:	f043 0308 	orr.w	r3, r3, #8
 800fcf0:	81a3      	strh	r3, [r4, #12]
 800fcf2:	6923      	ldr	r3, [r4, #16]
 800fcf4:	b94b      	cbnz	r3, 800fd0a <__swsetup_r+0x9a>
 800fcf6:	89a3      	ldrh	r3, [r4, #12]
 800fcf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fcfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd00:	d003      	beq.n	800fd0a <__swsetup_r+0x9a>
 800fd02:	4621      	mov	r1, r4
 800fd04:	4630      	mov	r0, r6
 800fd06:	f000 f95b 	bl	800ffc0 <__smakebuf_r>
 800fd0a:	89a0      	ldrh	r0, [r4, #12]
 800fd0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd10:	f010 0301 	ands.w	r3, r0, #1
 800fd14:	d00a      	beq.n	800fd2c <__swsetup_r+0xbc>
 800fd16:	2300      	movs	r3, #0
 800fd18:	60a3      	str	r3, [r4, #8]
 800fd1a:	6963      	ldr	r3, [r4, #20]
 800fd1c:	425b      	negs	r3, r3
 800fd1e:	61a3      	str	r3, [r4, #24]
 800fd20:	6923      	ldr	r3, [r4, #16]
 800fd22:	b943      	cbnz	r3, 800fd36 <__swsetup_r+0xc6>
 800fd24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fd28:	d1ba      	bne.n	800fca0 <__swsetup_r+0x30>
 800fd2a:	bd70      	pop	{r4, r5, r6, pc}
 800fd2c:	0781      	lsls	r1, r0, #30
 800fd2e:	bf58      	it	pl
 800fd30:	6963      	ldrpl	r3, [r4, #20]
 800fd32:	60a3      	str	r3, [r4, #8]
 800fd34:	e7f4      	b.n	800fd20 <__swsetup_r+0xb0>
 800fd36:	2000      	movs	r0, #0
 800fd38:	e7f7      	b.n	800fd2a <__swsetup_r+0xba>
 800fd3a:	bf00      	nop
 800fd3c:	20000114 	.word	0x20000114
 800fd40:	0801051c 	.word	0x0801051c
 800fd44:	0801053c 	.word	0x0801053c
 800fd48:	080104fc 	.word	0x080104fc

0800fd4c <__assert_func>:
 800fd4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd4e:	4614      	mov	r4, r2
 800fd50:	461a      	mov	r2, r3
 800fd52:	4b09      	ldr	r3, [pc, #36]	; (800fd78 <__assert_func+0x2c>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4605      	mov	r5, r0
 800fd58:	68d8      	ldr	r0, [r3, #12]
 800fd5a:	b14c      	cbz	r4, 800fd70 <__assert_func+0x24>
 800fd5c:	4b07      	ldr	r3, [pc, #28]	; (800fd7c <__assert_func+0x30>)
 800fd5e:	9100      	str	r1, [sp, #0]
 800fd60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd64:	4906      	ldr	r1, [pc, #24]	; (800fd80 <__assert_func+0x34>)
 800fd66:	462b      	mov	r3, r5
 800fd68:	f000 f8e0 	bl	800ff2c <fiprintf>
 800fd6c:	f000 f9ef 	bl	801014e <abort>
 800fd70:	4b04      	ldr	r3, [pc, #16]	; (800fd84 <__assert_func+0x38>)
 800fd72:	461c      	mov	r4, r3
 800fd74:	e7f3      	b.n	800fd5e <__assert_func+0x12>
 800fd76:	bf00      	nop
 800fd78:	20000114 	.word	0x20000114
 800fd7c:	080106c5 	.word	0x080106c5
 800fd80:	080106d2 	.word	0x080106d2
 800fd84:	08010700 	.word	0x08010700

0800fd88 <_close_r>:
 800fd88:	b538      	push	{r3, r4, r5, lr}
 800fd8a:	4d06      	ldr	r5, [pc, #24]	; (800fda4 <_close_r+0x1c>)
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	4604      	mov	r4, r0
 800fd90:	4608      	mov	r0, r1
 800fd92:	602b      	str	r3, [r5, #0]
 800fd94:	f7f3 f93b 	bl	800300e <_close>
 800fd98:	1c43      	adds	r3, r0, #1
 800fd9a:	d102      	bne.n	800fda2 <_close_r+0x1a>
 800fd9c:	682b      	ldr	r3, [r5, #0]
 800fd9e:	b103      	cbz	r3, 800fda2 <_close_r+0x1a>
 800fda0:	6023      	str	r3, [r4, #0]
 800fda2:	bd38      	pop	{r3, r4, r5, pc}
 800fda4:	20002d0c 	.word	0x20002d0c

0800fda8 <__sflush_r>:
 800fda8:	898a      	ldrh	r2, [r1, #12]
 800fdaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdae:	4605      	mov	r5, r0
 800fdb0:	0710      	lsls	r0, r2, #28
 800fdb2:	460c      	mov	r4, r1
 800fdb4:	d458      	bmi.n	800fe68 <__sflush_r+0xc0>
 800fdb6:	684b      	ldr	r3, [r1, #4]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	dc05      	bgt.n	800fdc8 <__sflush_r+0x20>
 800fdbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	dc02      	bgt.n	800fdc8 <__sflush_r+0x20>
 800fdc2:	2000      	movs	r0, #0
 800fdc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdca:	2e00      	cmp	r6, #0
 800fdcc:	d0f9      	beq.n	800fdc2 <__sflush_r+0x1a>
 800fdce:	2300      	movs	r3, #0
 800fdd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fdd4:	682f      	ldr	r7, [r5, #0]
 800fdd6:	602b      	str	r3, [r5, #0]
 800fdd8:	d032      	beq.n	800fe40 <__sflush_r+0x98>
 800fdda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fddc:	89a3      	ldrh	r3, [r4, #12]
 800fdde:	075a      	lsls	r2, r3, #29
 800fde0:	d505      	bpl.n	800fdee <__sflush_r+0x46>
 800fde2:	6863      	ldr	r3, [r4, #4]
 800fde4:	1ac0      	subs	r0, r0, r3
 800fde6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fde8:	b10b      	cbz	r3, 800fdee <__sflush_r+0x46>
 800fdea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fdec:	1ac0      	subs	r0, r0, r3
 800fdee:	2300      	movs	r3, #0
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdf4:	6a21      	ldr	r1, [r4, #32]
 800fdf6:	4628      	mov	r0, r5
 800fdf8:	47b0      	blx	r6
 800fdfa:	1c43      	adds	r3, r0, #1
 800fdfc:	89a3      	ldrh	r3, [r4, #12]
 800fdfe:	d106      	bne.n	800fe0e <__sflush_r+0x66>
 800fe00:	6829      	ldr	r1, [r5, #0]
 800fe02:	291d      	cmp	r1, #29
 800fe04:	d82c      	bhi.n	800fe60 <__sflush_r+0xb8>
 800fe06:	4a2a      	ldr	r2, [pc, #168]	; (800feb0 <__sflush_r+0x108>)
 800fe08:	40ca      	lsrs	r2, r1
 800fe0a:	07d6      	lsls	r6, r2, #31
 800fe0c:	d528      	bpl.n	800fe60 <__sflush_r+0xb8>
 800fe0e:	2200      	movs	r2, #0
 800fe10:	6062      	str	r2, [r4, #4]
 800fe12:	04d9      	lsls	r1, r3, #19
 800fe14:	6922      	ldr	r2, [r4, #16]
 800fe16:	6022      	str	r2, [r4, #0]
 800fe18:	d504      	bpl.n	800fe24 <__sflush_r+0x7c>
 800fe1a:	1c42      	adds	r2, r0, #1
 800fe1c:	d101      	bne.n	800fe22 <__sflush_r+0x7a>
 800fe1e:	682b      	ldr	r3, [r5, #0]
 800fe20:	b903      	cbnz	r3, 800fe24 <__sflush_r+0x7c>
 800fe22:	6560      	str	r0, [r4, #84]	; 0x54
 800fe24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe26:	602f      	str	r7, [r5, #0]
 800fe28:	2900      	cmp	r1, #0
 800fe2a:	d0ca      	beq.n	800fdc2 <__sflush_r+0x1a>
 800fe2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe30:	4299      	cmp	r1, r3
 800fe32:	d002      	beq.n	800fe3a <__sflush_r+0x92>
 800fe34:	4628      	mov	r0, r5
 800fe36:	f7ff facd 	bl	800f3d4 <_free_r>
 800fe3a:	2000      	movs	r0, #0
 800fe3c:	6360      	str	r0, [r4, #52]	; 0x34
 800fe3e:	e7c1      	b.n	800fdc4 <__sflush_r+0x1c>
 800fe40:	6a21      	ldr	r1, [r4, #32]
 800fe42:	2301      	movs	r3, #1
 800fe44:	4628      	mov	r0, r5
 800fe46:	47b0      	blx	r6
 800fe48:	1c41      	adds	r1, r0, #1
 800fe4a:	d1c7      	bne.n	800fddc <__sflush_r+0x34>
 800fe4c:	682b      	ldr	r3, [r5, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d0c4      	beq.n	800fddc <__sflush_r+0x34>
 800fe52:	2b1d      	cmp	r3, #29
 800fe54:	d001      	beq.n	800fe5a <__sflush_r+0xb2>
 800fe56:	2b16      	cmp	r3, #22
 800fe58:	d101      	bne.n	800fe5e <__sflush_r+0xb6>
 800fe5a:	602f      	str	r7, [r5, #0]
 800fe5c:	e7b1      	b.n	800fdc2 <__sflush_r+0x1a>
 800fe5e:	89a3      	ldrh	r3, [r4, #12]
 800fe60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe64:	81a3      	strh	r3, [r4, #12]
 800fe66:	e7ad      	b.n	800fdc4 <__sflush_r+0x1c>
 800fe68:	690f      	ldr	r7, [r1, #16]
 800fe6a:	2f00      	cmp	r7, #0
 800fe6c:	d0a9      	beq.n	800fdc2 <__sflush_r+0x1a>
 800fe6e:	0793      	lsls	r3, r2, #30
 800fe70:	680e      	ldr	r6, [r1, #0]
 800fe72:	bf08      	it	eq
 800fe74:	694b      	ldreq	r3, [r1, #20]
 800fe76:	600f      	str	r7, [r1, #0]
 800fe78:	bf18      	it	ne
 800fe7a:	2300      	movne	r3, #0
 800fe7c:	eba6 0807 	sub.w	r8, r6, r7
 800fe80:	608b      	str	r3, [r1, #8]
 800fe82:	f1b8 0f00 	cmp.w	r8, #0
 800fe86:	dd9c      	ble.n	800fdc2 <__sflush_r+0x1a>
 800fe88:	6a21      	ldr	r1, [r4, #32]
 800fe8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe8c:	4643      	mov	r3, r8
 800fe8e:	463a      	mov	r2, r7
 800fe90:	4628      	mov	r0, r5
 800fe92:	47b0      	blx	r6
 800fe94:	2800      	cmp	r0, #0
 800fe96:	dc06      	bgt.n	800fea6 <__sflush_r+0xfe>
 800fe98:	89a3      	ldrh	r3, [r4, #12]
 800fe9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe9e:	81a3      	strh	r3, [r4, #12]
 800fea0:	f04f 30ff 	mov.w	r0, #4294967295
 800fea4:	e78e      	b.n	800fdc4 <__sflush_r+0x1c>
 800fea6:	4407      	add	r7, r0
 800fea8:	eba8 0800 	sub.w	r8, r8, r0
 800feac:	e7e9      	b.n	800fe82 <__sflush_r+0xda>
 800feae:	bf00      	nop
 800feb0:	20400001 	.word	0x20400001

0800feb4 <_fflush_r>:
 800feb4:	b538      	push	{r3, r4, r5, lr}
 800feb6:	690b      	ldr	r3, [r1, #16]
 800feb8:	4605      	mov	r5, r0
 800feba:	460c      	mov	r4, r1
 800febc:	b913      	cbnz	r3, 800fec4 <_fflush_r+0x10>
 800febe:	2500      	movs	r5, #0
 800fec0:	4628      	mov	r0, r5
 800fec2:	bd38      	pop	{r3, r4, r5, pc}
 800fec4:	b118      	cbz	r0, 800fece <_fflush_r+0x1a>
 800fec6:	6983      	ldr	r3, [r0, #24]
 800fec8:	b90b      	cbnz	r3, 800fece <_fflush_r+0x1a>
 800feca:	f7fe fe3b 	bl	800eb44 <__sinit>
 800fece:	4b14      	ldr	r3, [pc, #80]	; (800ff20 <_fflush_r+0x6c>)
 800fed0:	429c      	cmp	r4, r3
 800fed2:	d11b      	bne.n	800ff0c <_fflush_r+0x58>
 800fed4:	686c      	ldr	r4, [r5, #4]
 800fed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d0ef      	beq.n	800febe <_fflush_r+0xa>
 800fede:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fee0:	07d0      	lsls	r0, r2, #31
 800fee2:	d404      	bmi.n	800feee <_fflush_r+0x3a>
 800fee4:	0599      	lsls	r1, r3, #22
 800fee6:	d402      	bmi.n	800feee <_fflush_r+0x3a>
 800fee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feea:	f7fe fece 	bl	800ec8a <__retarget_lock_acquire_recursive>
 800feee:	4628      	mov	r0, r5
 800fef0:	4621      	mov	r1, r4
 800fef2:	f7ff ff59 	bl	800fda8 <__sflush_r>
 800fef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fef8:	07da      	lsls	r2, r3, #31
 800fefa:	4605      	mov	r5, r0
 800fefc:	d4e0      	bmi.n	800fec0 <_fflush_r+0xc>
 800fefe:	89a3      	ldrh	r3, [r4, #12]
 800ff00:	059b      	lsls	r3, r3, #22
 800ff02:	d4dd      	bmi.n	800fec0 <_fflush_r+0xc>
 800ff04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff06:	f7fe fec1 	bl	800ec8c <__retarget_lock_release_recursive>
 800ff0a:	e7d9      	b.n	800fec0 <_fflush_r+0xc>
 800ff0c:	4b05      	ldr	r3, [pc, #20]	; (800ff24 <_fflush_r+0x70>)
 800ff0e:	429c      	cmp	r4, r3
 800ff10:	d101      	bne.n	800ff16 <_fflush_r+0x62>
 800ff12:	68ac      	ldr	r4, [r5, #8]
 800ff14:	e7df      	b.n	800fed6 <_fflush_r+0x22>
 800ff16:	4b04      	ldr	r3, [pc, #16]	; (800ff28 <_fflush_r+0x74>)
 800ff18:	429c      	cmp	r4, r3
 800ff1a:	bf08      	it	eq
 800ff1c:	68ec      	ldreq	r4, [r5, #12]
 800ff1e:	e7da      	b.n	800fed6 <_fflush_r+0x22>
 800ff20:	0801051c 	.word	0x0801051c
 800ff24:	0801053c 	.word	0x0801053c
 800ff28:	080104fc 	.word	0x080104fc

0800ff2c <fiprintf>:
 800ff2c:	b40e      	push	{r1, r2, r3}
 800ff2e:	b503      	push	{r0, r1, lr}
 800ff30:	4601      	mov	r1, r0
 800ff32:	ab03      	add	r3, sp, #12
 800ff34:	4805      	ldr	r0, [pc, #20]	; (800ff4c <fiprintf+0x20>)
 800ff36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff3a:	6800      	ldr	r0, [r0, #0]
 800ff3c:	9301      	str	r3, [sp, #4]
 800ff3e:	f7ff fcaf 	bl	800f8a0 <_vfiprintf_r>
 800ff42:	b002      	add	sp, #8
 800ff44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff48:	b003      	add	sp, #12
 800ff4a:	4770      	bx	lr
 800ff4c:	20000114 	.word	0x20000114

0800ff50 <_lseek_r>:
 800ff50:	b538      	push	{r3, r4, r5, lr}
 800ff52:	4d07      	ldr	r5, [pc, #28]	; (800ff70 <_lseek_r+0x20>)
 800ff54:	4604      	mov	r4, r0
 800ff56:	4608      	mov	r0, r1
 800ff58:	4611      	mov	r1, r2
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	602a      	str	r2, [r5, #0]
 800ff5e:	461a      	mov	r2, r3
 800ff60:	f7f3 f87c 	bl	800305c <_lseek>
 800ff64:	1c43      	adds	r3, r0, #1
 800ff66:	d102      	bne.n	800ff6e <_lseek_r+0x1e>
 800ff68:	682b      	ldr	r3, [r5, #0]
 800ff6a:	b103      	cbz	r3, 800ff6e <_lseek_r+0x1e>
 800ff6c:	6023      	str	r3, [r4, #0]
 800ff6e:	bd38      	pop	{r3, r4, r5, pc}
 800ff70:	20002d0c 	.word	0x20002d0c

0800ff74 <__swhatbuf_r>:
 800ff74:	b570      	push	{r4, r5, r6, lr}
 800ff76:	460e      	mov	r6, r1
 800ff78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff7c:	2900      	cmp	r1, #0
 800ff7e:	b096      	sub	sp, #88	; 0x58
 800ff80:	4614      	mov	r4, r2
 800ff82:	461d      	mov	r5, r3
 800ff84:	da08      	bge.n	800ff98 <__swhatbuf_r+0x24>
 800ff86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	602a      	str	r2, [r5, #0]
 800ff8e:	061a      	lsls	r2, r3, #24
 800ff90:	d410      	bmi.n	800ffb4 <__swhatbuf_r+0x40>
 800ff92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff96:	e00e      	b.n	800ffb6 <__swhatbuf_r+0x42>
 800ff98:	466a      	mov	r2, sp
 800ff9a:	f000 f8df 	bl	801015c <_fstat_r>
 800ff9e:	2800      	cmp	r0, #0
 800ffa0:	dbf1      	blt.n	800ff86 <__swhatbuf_r+0x12>
 800ffa2:	9a01      	ldr	r2, [sp, #4]
 800ffa4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ffa8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ffac:	425a      	negs	r2, r3
 800ffae:	415a      	adcs	r2, r3
 800ffb0:	602a      	str	r2, [r5, #0]
 800ffb2:	e7ee      	b.n	800ff92 <__swhatbuf_r+0x1e>
 800ffb4:	2340      	movs	r3, #64	; 0x40
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	6023      	str	r3, [r4, #0]
 800ffba:	b016      	add	sp, #88	; 0x58
 800ffbc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ffc0 <__smakebuf_r>:
 800ffc0:	898b      	ldrh	r3, [r1, #12]
 800ffc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ffc4:	079d      	lsls	r5, r3, #30
 800ffc6:	4606      	mov	r6, r0
 800ffc8:	460c      	mov	r4, r1
 800ffca:	d507      	bpl.n	800ffdc <__smakebuf_r+0x1c>
 800ffcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ffd0:	6023      	str	r3, [r4, #0]
 800ffd2:	6123      	str	r3, [r4, #16]
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	6163      	str	r3, [r4, #20]
 800ffd8:	b002      	add	sp, #8
 800ffda:	bd70      	pop	{r4, r5, r6, pc}
 800ffdc:	ab01      	add	r3, sp, #4
 800ffde:	466a      	mov	r2, sp
 800ffe0:	f7ff ffc8 	bl	800ff74 <__swhatbuf_r>
 800ffe4:	9900      	ldr	r1, [sp, #0]
 800ffe6:	4605      	mov	r5, r0
 800ffe8:	4630      	mov	r0, r6
 800ffea:	f7ff fa5f 	bl	800f4ac <_malloc_r>
 800ffee:	b948      	cbnz	r0, 8010004 <__smakebuf_r+0x44>
 800fff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fff4:	059a      	lsls	r2, r3, #22
 800fff6:	d4ef      	bmi.n	800ffd8 <__smakebuf_r+0x18>
 800fff8:	f023 0303 	bic.w	r3, r3, #3
 800fffc:	f043 0302 	orr.w	r3, r3, #2
 8010000:	81a3      	strh	r3, [r4, #12]
 8010002:	e7e3      	b.n	800ffcc <__smakebuf_r+0xc>
 8010004:	4b0d      	ldr	r3, [pc, #52]	; (801003c <__smakebuf_r+0x7c>)
 8010006:	62b3      	str	r3, [r6, #40]	; 0x28
 8010008:	89a3      	ldrh	r3, [r4, #12]
 801000a:	6020      	str	r0, [r4, #0]
 801000c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010010:	81a3      	strh	r3, [r4, #12]
 8010012:	9b00      	ldr	r3, [sp, #0]
 8010014:	6163      	str	r3, [r4, #20]
 8010016:	9b01      	ldr	r3, [sp, #4]
 8010018:	6120      	str	r0, [r4, #16]
 801001a:	b15b      	cbz	r3, 8010034 <__smakebuf_r+0x74>
 801001c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010020:	4630      	mov	r0, r6
 8010022:	f000 f8ad 	bl	8010180 <_isatty_r>
 8010026:	b128      	cbz	r0, 8010034 <__smakebuf_r+0x74>
 8010028:	89a3      	ldrh	r3, [r4, #12]
 801002a:	f023 0303 	bic.w	r3, r3, #3
 801002e:	f043 0301 	orr.w	r3, r3, #1
 8010032:	81a3      	strh	r3, [r4, #12]
 8010034:	89a0      	ldrh	r0, [r4, #12]
 8010036:	4305      	orrs	r5, r0
 8010038:	81a5      	strh	r5, [r4, #12]
 801003a:	e7cd      	b.n	800ffd8 <__smakebuf_r+0x18>
 801003c:	0800eadd 	.word	0x0800eadd

08010040 <__ascii_mbtowc>:
 8010040:	b082      	sub	sp, #8
 8010042:	b901      	cbnz	r1, 8010046 <__ascii_mbtowc+0x6>
 8010044:	a901      	add	r1, sp, #4
 8010046:	b142      	cbz	r2, 801005a <__ascii_mbtowc+0x1a>
 8010048:	b14b      	cbz	r3, 801005e <__ascii_mbtowc+0x1e>
 801004a:	7813      	ldrb	r3, [r2, #0]
 801004c:	600b      	str	r3, [r1, #0]
 801004e:	7812      	ldrb	r2, [r2, #0]
 8010050:	1e10      	subs	r0, r2, #0
 8010052:	bf18      	it	ne
 8010054:	2001      	movne	r0, #1
 8010056:	b002      	add	sp, #8
 8010058:	4770      	bx	lr
 801005a:	4610      	mov	r0, r2
 801005c:	e7fb      	b.n	8010056 <__ascii_mbtowc+0x16>
 801005e:	f06f 0001 	mvn.w	r0, #1
 8010062:	e7f8      	b.n	8010056 <__ascii_mbtowc+0x16>

08010064 <memmove>:
 8010064:	4288      	cmp	r0, r1
 8010066:	b510      	push	{r4, lr}
 8010068:	eb01 0402 	add.w	r4, r1, r2
 801006c:	d902      	bls.n	8010074 <memmove+0x10>
 801006e:	4284      	cmp	r4, r0
 8010070:	4623      	mov	r3, r4
 8010072:	d807      	bhi.n	8010084 <memmove+0x20>
 8010074:	1e43      	subs	r3, r0, #1
 8010076:	42a1      	cmp	r1, r4
 8010078:	d008      	beq.n	801008c <memmove+0x28>
 801007a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801007e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010082:	e7f8      	b.n	8010076 <memmove+0x12>
 8010084:	4402      	add	r2, r0
 8010086:	4601      	mov	r1, r0
 8010088:	428a      	cmp	r2, r1
 801008a:	d100      	bne.n	801008e <memmove+0x2a>
 801008c:	bd10      	pop	{r4, pc}
 801008e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010096:	e7f7      	b.n	8010088 <memmove+0x24>

08010098 <__malloc_lock>:
 8010098:	4801      	ldr	r0, [pc, #4]	; (80100a0 <__malloc_lock+0x8>)
 801009a:	f7fe bdf6 	b.w	800ec8a <__retarget_lock_acquire_recursive>
 801009e:	bf00      	nop
 80100a0:	20002d00 	.word	0x20002d00

080100a4 <__malloc_unlock>:
 80100a4:	4801      	ldr	r0, [pc, #4]	; (80100ac <__malloc_unlock+0x8>)
 80100a6:	f7fe bdf1 	b.w	800ec8c <__retarget_lock_release_recursive>
 80100aa:	bf00      	nop
 80100ac:	20002d00 	.word	0x20002d00

080100b0 <_realloc_r>:
 80100b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100b4:	4680      	mov	r8, r0
 80100b6:	4614      	mov	r4, r2
 80100b8:	460e      	mov	r6, r1
 80100ba:	b921      	cbnz	r1, 80100c6 <_realloc_r+0x16>
 80100bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100c0:	4611      	mov	r1, r2
 80100c2:	f7ff b9f3 	b.w	800f4ac <_malloc_r>
 80100c6:	b92a      	cbnz	r2, 80100d4 <_realloc_r+0x24>
 80100c8:	f7ff f984 	bl	800f3d4 <_free_r>
 80100cc:	4625      	mov	r5, r4
 80100ce:	4628      	mov	r0, r5
 80100d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100d4:	f000 f864 	bl	80101a0 <_malloc_usable_size_r>
 80100d8:	4284      	cmp	r4, r0
 80100da:	4607      	mov	r7, r0
 80100dc:	d802      	bhi.n	80100e4 <_realloc_r+0x34>
 80100de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80100e2:	d812      	bhi.n	801010a <_realloc_r+0x5a>
 80100e4:	4621      	mov	r1, r4
 80100e6:	4640      	mov	r0, r8
 80100e8:	f7ff f9e0 	bl	800f4ac <_malloc_r>
 80100ec:	4605      	mov	r5, r0
 80100ee:	2800      	cmp	r0, #0
 80100f0:	d0ed      	beq.n	80100ce <_realloc_r+0x1e>
 80100f2:	42bc      	cmp	r4, r7
 80100f4:	4622      	mov	r2, r4
 80100f6:	4631      	mov	r1, r6
 80100f8:	bf28      	it	cs
 80100fa:	463a      	movcs	r2, r7
 80100fc:	f7fd f984 	bl	800d408 <memcpy>
 8010100:	4631      	mov	r1, r6
 8010102:	4640      	mov	r0, r8
 8010104:	f7ff f966 	bl	800f3d4 <_free_r>
 8010108:	e7e1      	b.n	80100ce <_realloc_r+0x1e>
 801010a:	4635      	mov	r5, r6
 801010c:	e7df      	b.n	80100ce <_realloc_r+0x1e>
	...

08010110 <_read_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	4d07      	ldr	r5, [pc, #28]	; (8010130 <_read_r+0x20>)
 8010114:	4604      	mov	r4, r0
 8010116:	4608      	mov	r0, r1
 8010118:	4611      	mov	r1, r2
 801011a:	2200      	movs	r2, #0
 801011c:	602a      	str	r2, [r5, #0]
 801011e:	461a      	mov	r2, r3
 8010120:	f7f2 ff3c 	bl	8002f9c <_read>
 8010124:	1c43      	adds	r3, r0, #1
 8010126:	d102      	bne.n	801012e <_read_r+0x1e>
 8010128:	682b      	ldr	r3, [r5, #0]
 801012a:	b103      	cbz	r3, 801012e <_read_r+0x1e>
 801012c:	6023      	str	r3, [r4, #0]
 801012e:	bd38      	pop	{r3, r4, r5, pc}
 8010130:	20002d0c 	.word	0x20002d0c

08010134 <__ascii_wctomb>:
 8010134:	b149      	cbz	r1, 801014a <__ascii_wctomb+0x16>
 8010136:	2aff      	cmp	r2, #255	; 0xff
 8010138:	bf85      	ittet	hi
 801013a:	238a      	movhi	r3, #138	; 0x8a
 801013c:	6003      	strhi	r3, [r0, #0]
 801013e:	700a      	strbls	r2, [r1, #0]
 8010140:	f04f 30ff 	movhi.w	r0, #4294967295
 8010144:	bf98      	it	ls
 8010146:	2001      	movls	r0, #1
 8010148:	4770      	bx	lr
 801014a:	4608      	mov	r0, r1
 801014c:	4770      	bx	lr

0801014e <abort>:
 801014e:	b508      	push	{r3, lr}
 8010150:	2006      	movs	r0, #6
 8010152:	f000 f855 	bl	8010200 <raise>
 8010156:	2001      	movs	r0, #1
 8010158:	f7f2 ff16 	bl	8002f88 <_exit>

0801015c <_fstat_r>:
 801015c:	b538      	push	{r3, r4, r5, lr}
 801015e:	4d07      	ldr	r5, [pc, #28]	; (801017c <_fstat_r+0x20>)
 8010160:	2300      	movs	r3, #0
 8010162:	4604      	mov	r4, r0
 8010164:	4608      	mov	r0, r1
 8010166:	4611      	mov	r1, r2
 8010168:	602b      	str	r3, [r5, #0]
 801016a:	f7f2 ff5c 	bl	8003026 <_fstat>
 801016e:	1c43      	adds	r3, r0, #1
 8010170:	d102      	bne.n	8010178 <_fstat_r+0x1c>
 8010172:	682b      	ldr	r3, [r5, #0]
 8010174:	b103      	cbz	r3, 8010178 <_fstat_r+0x1c>
 8010176:	6023      	str	r3, [r4, #0]
 8010178:	bd38      	pop	{r3, r4, r5, pc}
 801017a:	bf00      	nop
 801017c:	20002d0c 	.word	0x20002d0c

08010180 <_isatty_r>:
 8010180:	b538      	push	{r3, r4, r5, lr}
 8010182:	4d06      	ldr	r5, [pc, #24]	; (801019c <_isatty_r+0x1c>)
 8010184:	2300      	movs	r3, #0
 8010186:	4604      	mov	r4, r0
 8010188:	4608      	mov	r0, r1
 801018a:	602b      	str	r3, [r5, #0]
 801018c:	f7f2 ff5b 	bl	8003046 <_isatty>
 8010190:	1c43      	adds	r3, r0, #1
 8010192:	d102      	bne.n	801019a <_isatty_r+0x1a>
 8010194:	682b      	ldr	r3, [r5, #0]
 8010196:	b103      	cbz	r3, 801019a <_isatty_r+0x1a>
 8010198:	6023      	str	r3, [r4, #0]
 801019a:	bd38      	pop	{r3, r4, r5, pc}
 801019c:	20002d0c 	.word	0x20002d0c

080101a0 <_malloc_usable_size_r>:
 80101a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101a4:	1f18      	subs	r0, r3, #4
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	bfbc      	itt	lt
 80101aa:	580b      	ldrlt	r3, [r1, r0]
 80101ac:	18c0      	addlt	r0, r0, r3
 80101ae:	4770      	bx	lr

080101b0 <_raise_r>:
 80101b0:	291f      	cmp	r1, #31
 80101b2:	b538      	push	{r3, r4, r5, lr}
 80101b4:	4604      	mov	r4, r0
 80101b6:	460d      	mov	r5, r1
 80101b8:	d904      	bls.n	80101c4 <_raise_r+0x14>
 80101ba:	2316      	movs	r3, #22
 80101bc:	6003      	str	r3, [r0, #0]
 80101be:	f04f 30ff 	mov.w	r0, #4294967295
 80101c2:	bd38      	pop	{r3, r4, r5, pc}
 80101c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80101c6:	b112      	cbz	r2, 80101ce <_raise_r+0x1e>
 80101c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101cc:	b94b      	cbnz	r3, 80101e2 <_raise_r+0x32>
 80101ce:	4620      	mov	r0, r4
 80101d0:	f000 f830 	bl	8010234 <_getpid_r>
 80101d4:	462a      	mov	r2, r5
 80101d6:	4601      	mov	r1, r0
 80101d8:	4620      	mov	r0, r4
 80101da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101de:	f000 b817 	b.w	8010210 <_kill_r>
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	d00a      	beq.n	80101fc <_raise_r+0x4c>
 80101e6:	1c59      	adds	r1, r3, #1
 80101e8:	d103      	bne.n	80101f2 <_raise_r+0x42>
 80101ea:	2316      	movs	r3, #22
 80101ec:	6003      	str	r3, [r0, #0]
 80101ee:	2001      	movs	r0, #1
 80101f0:	e7e7      	b.n	80101c2 <_raise_r+0x12>
 80101f2:	2400      	movs	r4, #0
 80101f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80101f8:	4628      	mov	r0, r5
 80101fa:	4798      	blx	r3
 80101fc:	2000      	movs	r0, #0
 80101fe:	e7e0      	b.n	80101c2 <_raise_r+0x12>

08010200 <raise>:
 8010200:	4b02      	ldr	r3, [pc, #8]	; (801020c <raise+0xc>)
 8010202:	4601      	mov	r1, r0
 8010204:	6818      	ldr	r0, [r3, #0]
 8010206:	f7ff bfd3 	b.w	80101b0 <_raise_r>
 801020a:	bf00      	nop
 801020c:	20000114 	.word	0x20000114

08010210 <_kill_r>:
 8010210:	b538      	push	{r3, r4, r5, lr}
 8010212:	4d07      	ldr	r5, [pc, #28]	; (8010230 <_kill_r+0x20>)
 8010214:	2300      	movs	r3, #0
 8010216:	4604      	mov	r4, r0
 8010218:	4608      	mov	r0, r1
 801021a:	4611      	mov	r1, r2
 801021c:	602b      	str	r3, [r5, #0]
 801021e:	f7f2 fea3 	bl	8002f68 <_kill>
 8010222:	1c43      	adds	r3, r0, #1
 8010224:	d102      	bne.n	801022c <_kill_r+0x1c>
 8010226:	682b      	ldr	r3, [r5, #0]
 8010228:	b103      	cbz	r3, 801022c <_kill_r+0x1c>
 801022a:	6023      	str	r3, [r4, #0]
 801022c:	bd38      	pop	{r3, r4, r5, pc}
 801022e:	bf00      	nop
 8010230:	20002d0c 	.word	0x20002d0c

08010234 <_getpid_r>:
 8010234:	f7f2 be90 	b.w	8002f58 <_getpid>

08010238 <_init>:
 8010238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801023a:	bf00      	nop
 801023c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801023e:	bc08      	pop	{r3}
 8010240:	469e      	mov	lr, r3
 8010242:	4770      	bx	lr

08010244 <_fini>:
 8010244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010246:	bf00      	nop
 8010248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801024a:	bc08      	pop	{r3}
 801024c:	469e      	mov	lr, r3
 801024e:	4770      	bx	lr
